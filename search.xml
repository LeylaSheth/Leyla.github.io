<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浏览器缓存的实现</title>
    <url>/2020/01/07/Task/</url>
    <content><![CDATA[<h1 id="浏览器缓存的实现"><a href="#浏览器缓存的实现" class="headerlink" title="浏览器缓存的实现"></a>浏览器缓存的实现</h1><p>网站的性能就是看网站打开的速度</p>
<p>其中提高网页反应速度的一个方式就是使用缓存</p>
<p>缩短网页请求资源的距离，减少延迟</p>
<p>缓存文件可以重复利用，可以减少带宽，降低网络负荷</p>
<p>缓存的目标，尽快返回请求数据，减少延迟</p>
<h2 id="认识浏览器缓存"><a href="#认识浏览器缓存" class="headerlink" title="认识浏览器缓存"></a>认识浏览器缓存</h2><p>当浏览器请求一个网站，会加载很多资源，对于一些不经常变动的内容，会保存在本地文件中，下次访问就会快速加载</p>
<blockquote>
<p>被浏览器保存的文件就被称为缓存（不是Cookie或者Localstorage）</p>
</blockquote>
<p><img src="/2020/01/07/Task/image-20191105234029395.png" alt></p>
<p>第一次进网站后刷新一次，可见文件来自缓存</p>
<p>但是让我把浏览器关闭，再次打开网站，又不是来自缓存了</p>
<p>该资源从本地硬盘或者浏览器内存读取</p>
<p>缓存的好处：</p>
<ul>
<li>减少页面加载时间</li>
<li>减少服务器负载</li>
</ul>
<p>浏览器是否使用缓存、缓存时间、是由服务器控制</p>
<p>浏览器请求资源时，服务器发回的响应的[响应头]部分的某些字段指明了有关缓存的关键信息</p>
<p>HTTP报文中与缓存相关的首部字段</p>
<ol>
<li>通用首部字段</li>
</ol>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Cache-Control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Pragma</td>
<td>http1.0时代，值为”no-cache”时禁用</td>
</tr>
</tbody></table>
<ol start="2">
<li>请求首部字段</li>
<li>响应手补字段</li>
<li>实体首部字段</li>
</ol>
<h3 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h3><p>有四种缓存位置，有各自的优先级，当依次查找缓存且都没有命中时候，才会去请求网络</p>
<ul>
<li>Service Worker</li>
<li>Memory Cache</li>
<li>Disk Cache</li>
<li>Push Cache</li>
</ul>
<h4 id="1-Service-Worker"><a href="#1-Service-Worker" class="headerlink" title="1. Service Worker"></a>1. Service Worker</h4><p>Service Worker是运行在浏览器背后的独立线程，一般可以用来实现缓存功能</p>
<p>传输协议必须是<code>HTTPS</code></p>
<p>Service Worker中涉及到请求拦截，所以必须使用HTTPS协议来保障安全</p>
<p>与浏览器其他内建的缓存机制不同，它可以让用户自由控制缓存哪些文件，如何匹配、读取缓存，并且缓存时连续性的</p>
<hr>
**实现缓存**

<ol>
<li>注册Service Worker</li>
<li>然后监听到install事件后就可以缓存需要的文件</li>
<li>用户再次访问，通过拦截请求的方式查询是否存在缓存，存在则读取，反之请求</li>
</ol>
<hr>
如果没有命中缓存，就需要调用`fetch()`获取数据。

<p>没用命中会根据缓存查找优先级去查找数据，无论是从Memory Cache还是从网络请求中获取的数据，都会显示是从Service Worker中获取</p>
<h4 id="2-Memory-Cache"><a href="#2-Memory-Cache" class="headerlink" title="2. Memory Cache"></a>2. Memory Cache</h4><p>Memory Cache是内存中的缓存，主要包含的是当前页面中已经抓取到的资源，从页面上下载的样式、脚本、图片等，读取内存的数据比磁盘快，内存缓存读取高效，但是缓存持续性很短，会随着进程的释放而释放，<strong>比如一旦关闭页面，内存中的缓存就释放了</strong></p>
<p>内存缓存中有一块重要的缓存资源是<code>preloader</code>相关指令(eg: <code>&lt;link rel=&quot;prefetch&quot;&gt;</code>)下载的资源，preloader相关指令是页面优化的常见手段之一，可以一边解析js/css文件，一边网络请求下一个资源</p>
<p><strong>内存缓存在缓存资源时不关心返回资源的HTTP缓存头Cache-Control的值，同时资源的匹配也并非仅仅对URL匹配，还可能会对Content-Type，CORS等其他特征做校验</strong></p>
<h4 id="3-Disk-Cache"><a href="#3-Disk-Cache" class="headerlink" title="3. Disk Cache"></a>3. Disk Cache</h4><p>Disk Cache时存储在硬盘中的缓存，读取数据慢一点，但是都可以存储到硬盘中，比Memory Cache胜在容量和存储时效性上</p>
<p>Disk Cache覆盖面最大，根据HTTP Header中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源过期了需要重新请求。即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再去请求数据。</p>
<p>浏览器把文件存入内存or硬盘</p>
<ul>
<li>对于大文件，大概率不存在内存，反之优先</li>
<li>当前系统内存使用率高的话，文件优先存入硬盘</li>
</ul>
<h4 id="4-Push-Cache"><a href="#4-Push-Cache" class="headerlink" title="4. Push Cache"></a>4. Push Cache</h4><p>Push Cache（推送缓存）时HTTP/2中的内容，上面三种缓存都没有命中时，才会被使用，它只在会话（Session）中存在，一旦会话结束就被释放，缓存时间也很短暂，同时它严格执行HTTP头中的缓存指令</p>
<ul>
<li>所有资源都能被推送，并且能够被缓存</li>
<li>可以推送no-cache和no-store的资源</li>
<li>一旦连接被关闭，Push Cache就会被释放</li>
<li>多个页面可以使用同一个HTTP/2的连接，也就可以使用同一个Push Cache。这主要是依赖浏览器的实现而定，有的浏览器会对相同域名但不跳tab标签使用同一个HTTP连接</li>
<li>Push Cache中的韩村只能被使用一次</li>
<li>浏览器可以拒绝接受已经存在的资源推送</li>
<li>可以给其他域名推送资源</li>
</ul>
<blockquote>
<p>当这四种缓存都没有命重，那么只能发起请求来获取资源</p>
<p>为了性能的考虑，大部分接口都应该选择好缓存策略</p>
<p>通常有 <strong>强缓存和协商缓存，而且缓存策略都是通过设置HTTP Header来实现的</strong></p>
</blockquote>
<h2 id="缓存过程分析"><a href="#缓存过程分析" class="headerlink" title="缓存过程分析"></a>缓存过程分析</h2><p>浏览器和服务器通信的方式为应答模式</p>
<p>浏览器发起HTTP请求 —— 服务器响应该请求</p>
<p>浏览器如何确定一个资源是否应该缓存，以及如何缓存？</p>
<p>浏览器第一次向服务器发起请求后拿到请求结果后，将请求结果哈缓存标志存入浏览器缓存，<strong>浏览器对于缓存的处理时根据第一次请求资源时返回的响应头来确定的</strong></p>
<ul>
<li>浏览器每次发起请求，都会在浏览器缓存中查找该请求的结果以及缓存标识</li>
<li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</li>
</ul>
<p>这就是浏览器缓存机制的关键，它确保了每个请求的缓存存入和读取</p>
<h2 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><blockquote>
<p>不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的Network选项中可以看到该请求返回200的状态码。Size显示from disk cache 或 from memory cache。强缓存可以通过设置两种HTTP Header实现：Expires和Cache-Control</p>
</blockquote>
<ol>
<li><p>Expires</p>
<p>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点</p>
<p>Expires = max-age + 请求时间，需要和Last-modified结合使用</p>
<p>Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存读取数据，无需再次请求</p>
<p>但是它受限于本地时间，如果修改了本地时间，可能会造成缓存失败</p>
<p>对于服务器而言的时间</p>
</li>
<li><p>Cache-Control</p>
<p>Cache-Control在HTTP/1.1中是最重要的规则，主要用于控制网页缓存。</p>
<p>当<code>Cache-Control:max-age=300</code>时，则代表这个请求正确返回时间（浏览器也会记录）的5分钟内再次加载资源，就会命中强缓存，对本地时间</p>
<p>Cache-Control可以在请求头或者响应头中设置，并且可以组合多种指令：</p>
<hr>
**public:所有内容都将被缓存(客户端和代理服务器都可缓存)**。具体表现为，响应可被任何中间节点缓存。Browser $\Leftarrow$ proxy1 $\Leftarrow$ proxy2 $\Leftarrow$ Server，中间的proxy可以缓存资源，比如下一次再请求同一资源proxy1直接把自己缓存的东西给Browser而不在向proxy2请求

</li>
</ol>
<hr>
   **private:所有内容只有客户端可以缓存**，Cache-Control的默认取值。具体是，表示中间节点不允许缓存，对于Browser $\Leftarrow$ proxy1 $\Leftarrow$ proxy2 $\Leftarrow$ Server，proxy会把Server返回的数据发送给proxy1，自己不缓存任何数据。下一次请求时proxy会做好请求转发而不是擅自给自己缓存的数据

   <hr>
**no-cache:客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定。**表示不使用Cache-Control的缓存控制方式做前置验证，使用Etag或者Last-Modified字段来控制。**设置no-cache后，不是浏览器不缓存数据，而是浏览器在使用缓存数据时，需要先确认一下数据是否还和服务器保持一致**

<hr>
   no-store:所有内容都不会被缓存，既不使用强制缓存，也不使用协商缓存

   <hr>
3. Expires和Cache-Control两者对比

<p>   如果两者同时存在，Cache-Control优先级高于Expires</p>
<p>   强缓存判断是否缓存的依据来自于是否超出某个时间或者时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务端最新的内容，需要到协商缓存策略来判断服务端内容是否已经发生了更新</p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存就是在强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标志决定是否使用缓存的过程</p>
<ul>
<li>协商缓存生效，返回304和Not Modified</li>
<li>协商缓存失效，返回200和请求结果</li>
</ul>
<p>协商缓存可以通过设置两种HTTP Header实现：Last-Modified和ETag</p>
<ol>
<li><p>Last-Modified和If-Modified-Since</p>
<p>浏览器在第一次访问资源时，服务器返回资源的同时，在<code>response header</code>中添加<code>Last-Modified</code>的header，值是资源在服务器上的最后修改时间，浏览器接收后缓存文件和header</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Last-Modified: Fri, <span class="number">22</span> Jul <span class="number">2016</span> <span class="number">01</span>:<span class="number">47</span>:<span class="number">00</span> GMT</span><br></pre></td></tr></table></figure>

<p>浏览器下一次请求这个资源，浏览器检测到有Last-Modified这个Header，于是添加If-Modified-Since这个header，值就是Last-Modified中的值；服务器再次收到这个资源请求，会根据If-Modified-Since中的值和服务器中这个资源的最后修改时间对比，如果没有变化，返回304和空的响应体，直接从缓存读取，如果If-Modified-Since的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和200</p>
<hr>
Last-Modified存在一些弊端：
</li>
</ol>
<ul>
<li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成Last-Modified被修改，服务端不能命中缓存导致发送相同的资源。<ul>
<li>因为Last-Modified只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会任务资源还是命中了，不会返回正确的资源</li>
</ul>
</li>
</ul>
<p>这说明根据文件修改时间来决定是否缓存尚有不足</p>
<hr>
2. ETag和If-None-Match

<p>   <strong>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识（由服务器生成），只要资源有变化，Etag就会重新生成。</strong></p>
<p>   浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的Etag值放到request header里的If-None-Match 里，服务器只需要比较客户端传来的If-None-Match 跟自己服务器上该资源的ETag是否一致，就能很好的判断资源相对客户端而言是否被修改过了。如果服务器发现ETag匹配不上，那么直接以常规GET 200回包形式将新的资源（当然也包括了新的ETag）发给客户端；如果ETag时一致的，则直接返回304知会客户端直接使用本地缓存即可</p>
   <hr>

<ol start="3">
<li><p>对比：</p>
<ul>
<li><p>在精确度上，Etag要优于Last-Modified，Last-Modified的时间单位是秒，如果某个文件在1s内改变了多次，那么他们的Last-Modified其实并没有体现出修改，但是Etag每次都会确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也可能不一致</p>
</li>
<li><p>在性能上，Etag要逊色于Last-Modified，Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值</p>
</li>
<li><p>优先级上，服务器校验优先考虑Etag</p>
<p>​                                            </p>
</li>
</ul>
</li>
</ol>
<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><blockquote>
<p>强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不失效则进行协商缓存(Last-Modified/If-Modified-Since和Etag/If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回304，继续使用缓存</p>
</blockquote>
<p>如果什么缓存策略都没设置，浏览器会如何处理</p>
<p>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的Date减去Last-Modified值的10%作为缓存时间</p>
<h3 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h3><h4 id="频繁变动的资源"><a href="#频繁变动的资源" class="headerlink" title="频繁变动的资源"></a>频繁变动的资源</h4><blockquote>
<p>Cache-Control：no-cache</p>
</blockquote>
<p>对于频繁变动的资源，首先需要使用Cache-Control：no-cache使浏览器每次都请求服务器，然后配合ETag或者Last-Modified来验证资源是否有效。这样做虽然不能节省请求数量，但是能显著减少响应数据的大小</p>
<h4 id="不常变化的资源"><a href="#不常变化的资源" class="headerlink" title="不常变化的资源"></a>不常变化的资源</h4><blockquote>
<p>Cache-Control：max-age=31536000</p>
</blockquote>
<p>在处理这类资源时，给它们的Cache-Control配置了一个很大的max-age=31536000（一年），这样浏览器之后请求相同的URL会命中强制缓存，为了解决更新的问题，就需要在文件名（或路径）中添加hash，版本号等动态字符，之后更改动态字符，从而达到更改引用URL的目的，让之前的强制缓存失效（其实并未立即失效，只是不再使用了而已）</p>
<p>在线提供的类库（jquery等）均采用这种模式</p>
<h3 id="用户行为对浏览器缓存的影响"><a href="#用户行为对浏览器缓存的影响" class="headerlink" title="用户行为对浏览器缓存的影响"></a>用户行为对浏览器缓存的影响</h3><p>用户在浏览器操作时，会触发什么样的缓存策略</p>
<ul>
<li>打开网页，地址栏输入地址：查找disk cache中是否有匹配。如果有则使用；没有则发送网络请求</li>
<li>普通刷新（F5）：因为Tab没有关闭，因此memory cache时可用的，会被优先使用（如果匹配的话）。其次才是disk cache</li>
<li>强制刷新（Ctrl+F5）：浏览器不使用缓存，因此发送的请求头部均带有Cache-control：no-cache（为了兼容，还带了Pragma：no-cache），服务器直接返回200和最新内容</li>
</ul>
<h1 id="前后端数据交互方法和原理"><a href="#前后端数据交互方法和原理" class="headerlink" title="前后端数据交互方法和原理"></a>前后端数据交互方法和原理</h1><h2 id="数据如何发送到后端"><a href="#数据如何发送到后端" class="headerlink" title="数据如何发送到后端"></a>数据如何发送到后端</h2><p>网站数据处理主要分为三层</p>
<blockquote>
<p>第一层：表示层，这一部分可以由HTML、CSS和JavaScript代码等来实现。通过前端代码可以实现网页的布局和设计。这一层也可以称为显示层。即浏览器打开能看到的网页</p>
<hr>
第二层：业务层，这层是负责处理数据的，常用的代码语言有PHP、JSP、Java等。通过这些后台处理语言的算法来处理前台传回的数据。必要时进行操作数据库，然后把结果返回给前端网页

<hr>
第三层：数据层，这个是数据库，用来存储数据的。通过业务层的操作可以实现增删改数据库的操作
</blockquote>
<p>用户在表示层，即网页端填入数据，点击提交触发后台处理机制。</p>
<p>这时候数据会传到后台的代码进行处理。这部分代码根据不同的网站可以使用不同的编程语言来实现。代码会根据预设的算法将接收到的数据进行处理之后会相应的对数据库进行操作，存储数据等。</p>
<p>成功操作完数据库之后，业务层的代码会再想表示层传回一个指令通知填写成功</p>
<h2 id="客户端服务端交互"><a href="#客户端服务端交互" class="headerlink" title="客户端服务端交互"></a>客户端服务端交互</h2><h3 id="网络服务器和HTTP"><a href="#网络服务器和HTTP" class="headerlink" title="网络服务器和HTTP"></a>网络服务器和HTTP</h3><p>网络浏览器通过超文本标记语言传输协议(HTTP)和网络服务器(web servers)</p>
<p>当在网页上点击一个链接、提交一个表单，或进行一次搜索时，浏览器发送一个HTTP请求给服务器</p>
<p>这个请求包含：</p>
<ul>
<li><p>一个用来识别目标服务器和资源的URL（如HTML文档、存储在服务器上的一个特定数据，或者一个用来运行的工具等）</p>
</li>
<li><p>一个定义了请求行为的方法（获得一个文档或者上传某些数据）</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>获取一份指定的资源（如HTML文档）</td>
</tr>
<tr>
<td>POST</td>
<td>创建一份新的资源（添加新的文章，给数据库增加新的节点）</td>
</tr>
<tr>
<td>HEAD</td>
<td>获取相关指定资源的元数据信息，而不会像GET的内容部分</td>
</tr>
<tr>
<td>PUT</td>
<td>更新一份已经存在的资源</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除指定的资源</td>
</tr>
</tbody></table>
</li>
<li><p>额外的信息可以和请求一起被编码（eg：HTML表单数据）信息可以被编码</p>
<ul>
<li><p>URL参数：GET请求通过在URL末尾增加的键值对，来编码包含在发送给服务器的URL中的数据 eg: <code>http://mysite.com?name=Fred&amp;age=11</code></p>
<p>使用<code>?</code>将URL剩余部分和URL参数分隔开</p>
<p>使用<code>=</code>将名称和与之相关的值分给开</p>
<p>使用<code>&amp;</code>分隔不同的键值对</p>
<p>被用户改变然后提交时，URL参数是不安全的，一个URL参数或者GET请求是不会用来在服务器上更新数据的</p>
</li>
<li><p>POST数据：POST请求会增加新的资源，这些数据会在请求体中编码</p>
</li>
<li><p>客户端cookie：cookies包含与客户相关的会话数据，服务器可以用这些数据来判断用户的登录状态以及用户是否有资源的权限</p>
</li>
</ul>
</li>
</ul>
<p>网络服务器等待来自客户的请求信息，当请求到达时处理，然后发给浏览器HTTP响应消息。回应包含一个HTTP响应状态码来暗示请求是都成功（200 OK 连接成功，404 Not Found 资源未找到，403 Forbidden 用户没有被授权查看资源）一个成功的响应主体，会包含GET请求所有的资源</p>
<h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><p>静态网站是指每当请求一个特定的资源时，会从服务器返回相同的硬编码内容</p>
<p> 当你有少量页面时，向每个用户发送相同的内容时，静态网站是最佳选择， 然而随着页面数量的增加，它们的维护成本也会很高。 </p>
<p>存在反复添加类似代码的问题</p>
<p><img src="/2020/01/07/Task/image-20191116155614919.png" alt></p>
<p>当用户想要导航到页面时，浏览器会发送一个指定HTML页面的URL的HTTP的FET请求</p>
<p>服务器从它的文件系统中检索所请求的文档，并返回包含文档和HTTP响应状态码<code>200 OK</code>的HTTP响应，</p>
<h1 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h1><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><blockquote>
<p>函数防抖</p>
<p>函数防抖(debounce)：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果在设定的时间到来之前，又一次触发了时间，就重新开始延时。</p>
</blockquote>
<p>比如，持续触发scroll事件时，并不执行handle函数，当1000ms内没有触发scroll事件时，才会岩石触发scroll事件</p>
<p><img src="/2020/01/07/Task/image-20191114132834533.png" alt></p>
<h3 id="防抖函数是基于定时器来实现的"><a href="#防抖函数是基于定时器来实现的" class="headerlink" title="防抖函数是基于定时器来实现的"></a>防抖函数是基于定时器来实现的</h3><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a><code>setTimeout()</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = setTimeout(func|code,delay)</span><br></pre></td></tr></table></figure>

<p>接受两个参数，要推迟执行的函数名或一段代码，第二个参数是要推迟执行的毫秒数</p>
<h4 id="setTimeout-传参"><a href="#setTimeout-传参" class="headerlink" title="setTimeout()传参"></a><code>setTimeout()</code>传参</h4><p>还可以添加更多的参数，它们将被传入推迟执行的函数（回调函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//老版本中不支持传入额外参数，所以在匿名函数中调用一个回调函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myFuc(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bind or apply方法，把参数绑定到回调函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">arg1</span>)</span>&#123;&#125;.bind(undefinded,<span class="number">10</span>),<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//undefined绑定到全局作用域</span></span><br></pre></td></tr></table></figure>

<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>回调函数中的this</p>
<p>推迟执行的回调函数是某个对象的方法，<strong>那么this指向全局环境，而不是定义时所在的对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  x: <span class="number">2</span>,</span><br><span class="line">  y: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">setTimeout(o.y,<span class="number">1000</span>);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>



<h4 id="执行回调间隔事件长度"><a href="#执行回调间隔事件长度" class="headerlink" title="执行回调间隔事件长度"></a>执行回调间隔事件长度</h4><h3 id="setTimeout运行机制"><a href="#setTimeout运行机制" class="headerlink" title="setTimeout运行机制"></a><code>setTimeout</code>运行机制</h3><p>将指定的代码移出本次执行，等到下一轮Event Loop时，再检查是否到了指定时间，如果到了，就执行，反之等待下一轮，所以必须等到本次执行的所有代码都执行完，才会执行</p>
<p> setTimeout(f,0)将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“任务队列”中已有的事件）一结束就立刻执行。也就是说，setTimeout(f,0)的作用是，尽可能早地执行指定的任务。 </p>
<h2 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a><code>clearTimeout()</code></h2><p>接受返回的计数器编号，取消对应的计时器</p>
<p> 如果在延时期限到达之前取消延执行，可以使用window.clearTimeout(timeoutId)方法，该方法接收一个id，表示一个定时器。这个id是由setTimeout方法返回的 </p>
<p> 一个clearTimeout实际应用的例子。有些网站会实时将用户在文本框的输入，通过Ajax方法传回服务器 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'textarea'</span>).on(<span class="string">'keydown'</span>, ajaxAction);</span><br></pre></td></tr></table></figure>

<p> 这样写有一个很大的缺点，就是如果用户连续击键，就会连续触发keydown事件，造成大量的Ajax通信。这是不必要的，而且很可能会发生性能问题。正确的做法应该是，设置一个门槛值，表示两次Ajax通信的最小间隔时间。如果在设定的时间内，发生新的keydown事件，则不触发Ajax通信，并且重新开始计时。如果过了指定时间，没有发生新的keydown事件，将进行Ajax通信将数据发送出去。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">//声明计时器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      fn.apply(context,args);</span><br><span class="line">    &#125;,delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="this、apply、call、bind"><a href="#this、apply、call、bind" class="headerlink" title="this、apply、call、bind"></a>this、apply、call、bind</h1><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote>
<p>this永远指向最后调用它的那个对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"windowsName"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">"Cherry"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);	<span class="comment">//windowsName</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"inner:"</span> + <span class="keyword">this</span>);	<span class="comment">//inner:window</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"outer:"</span> + <span class="keyword">this</span>); <span class="comment">//outer:window</span></span><br></pre></td></tr></table></figure>

<p>最后调用a的地方是a() 前面没有调用的对象就是全局对象window。相当于是window.a()</p>
<h3 id="改变this的指向"><a href="#改变this的指向" class="headerlink" title="改变this的指向"></a>改变this的指向</h3><ul>
<li>使用箭头函数</li>
<li>函数内部使用<code>_this = this</code></li>
<li>使用apply、call、bind</li>
<li>new实例化一个对象</li>
</ul>
<h2 id="call-thisArgs-args…"><a href="#call-thisArgs-args…" class="headerlink" title="call(thisArgs [,args…])"></a>call(thisArgs [,args…])</h2><p>call方法可以传递一个thisArgs参数和一个参数列表，thisArgs指定了函数在运行期的调用者，也就是函数中的this对象。参数列表会被传入调用函数中</p>
<p>thisArgs取值</p>
<ul>
<li>不传，或者传入null，undefined，函数中的this指向window对象</li>
<li>传递另一个函数的函数名，函数中的this指向这个函数的引用</li>
<li>传递字符串、数值或布尔类型等基础类型，函数中的this指向其对应的包装对象，如String、Number、Boolean</li>
<li>传递一个对象，函数中的this指向这个对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//输出函数a中的this对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">//定义函数b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'object'</span>&#125;; <span class="comment">//定义对象obj</span></span><br><span class="line"></span><br><span class="line">a.call(); <span class="comment">//window</span></span><br><span class="line">a.call(<span class="literal">null</span>); <span class="comment">//window</span></span><br><span class="line">a.call(<span class="number">1</span>); <span class="comment">//Number</span></span><br><span class="line">a.call(<span class="string">''</span>); <span class="comment">//String</span></span><br><span class="line">a.call(<span class="literal">true</span>); <span class="comment">//Boolean</span></span><br><span class="line">a.call(b); <span class="comment">//function b()&#123;&#125;</span></span><br><span class="line">a.call(obj); <span class="comment">//Object</span></span><br></pre></td></tr></table></figure>

<p>call的核心功能，允许在对象上调用该对象没有定义的方法，并且这个方法可以访问该对象中的属性</p>
<p> 使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。 </p>
<p><code>call()</code> 允许为不同的对象分配和调用属于一个对象的函数/方法。</p>
<p><code>call()</code> 提供新的 <strong>this</strong> 值给当前调用的函数/方法。你可以使用 <code>call</code> 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p><code>bind()</code>方法会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体。当目标函数被调用时，this值绑定到<code>bind()</code>的第一个参数，该参数不能被重写，绑定函数被调用时，<code>bind()</code>也接受预设的参数提供给原函数。一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的<code>this</code>值被忽略，同时调用时的参数被提供给模拟函数</p>
<p>bind函数的两个要点</p>
<ol>
<li>返回一个函数</li>
<li>可以传入参数</li>
</ol>
<blockquote>
<p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.bind(thisArg[,arg1[,arg2[,...]]])</span><br></pre></td></tr></table></figure>
</blockquote>
<p>参数含义</p>
<p><code>thisArg</code>当绑定函数被调用时，该参数会作为原函数运行时的this指向，当使用[new 操作符]，调用绑定函数时，该参数无效</p>
<p><code>arg1,arg2,...</code>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法</p>
<p>返回值：返回由指定的this值和初始化参数改造的原函数拷贝</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol>
<li><p>bind方法不会立即执行函数，所以可以返回一个待执行函数</p>
<p><code>return function(){}</code></p>
</li>
<li><p>作用域绑定，可以使用apply或者call来实现</p>
</li>
<li><p>参数不确定可以用数组</p>
</li>
</ol>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="最简单的用法是创建一个无论怎么调用都有同样this值的函数"><a href="#最简单的用法是创建一个无论怎么调用都有同样this值的函数" class="headerlink" title="最简单的用法是创建一个无论怎么调用都有同样this值的函数"></a>最简单的用法是创建一个无论怎么调用都有同样this值的函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure>

<h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><p>使一个函数拥有预设的初值参数，这些参数作为第二个参数跟在this或其他对象后面，之后它们会被插入到目标函数的参数列表中的开始位置，传递给绑定函数的参数会跟在它们后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list1 = list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a function with a preset leading argument</span></span><br><span class="line"><span class="keyword">var</span> leadingThirtysevenList = list.bind(<span class="literal">undefined</span>, <span class="number">37</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list2 = leadingThirtysevenList(); <span class="comment">// [37]</span></span><br><span class="line"><span class="keyword">var</span> list3 = leadingThirtysevenList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [37, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>



<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><blockquote>
<p>new运算符创建一个用户定义的对象类型的实例或具有构造函数内置对象类型之一</p>
</blockquote>
<h3 id="new做了什么"><a href="#new做了什么" class="headerlink" title="new做了什么"></a>new做了什么</h3><ol>
<li>创建了一个全新的对象</li>
<li>这个对象会被执行[[Prototype]](也就是_proto_)链接</li>
<li>生成的新对象会绑定到函数调用的this</li>
<li>通过new创建的每个对象将最终被[[Prototype]]链接到这个函数的prototype对象上</li>
<li>如果函数没有返回对象类型Object（包括Function，Array，Date，RegExg，Error），那么new表达式中的函数调用机会自动返回这个新的对象</li>
</ol>
<p>创建一个空对象，并使得该空对象继承Func.prototype</p>
<p>执行构造函数，并将this指向刚刚创建的新对象</p>
<p>返回新对象</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全（XSS&amp;CSRF）</title>
    <url>/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&amp;CSRF)/</url>
    <content><![CDATA[<h1 id="前端安全-XSS-amp-CSRF"><a href="#前端安全-XSS-amp-CSRF" class="headerlink" title="前端安全(XSS&amp;CSRF)"></a>前端安全(XSS&amp;CSRF)</h1><h2 id="XSS-篇"><a href="#XSS-篇" class="headerlink" title="XSS 篇"></a>XSS 篇</h2><p>Cross-Site Scripting(跨站脚本攻击)，是一种代码注入攻击。</p>
<p>攻击者通过在目标网站注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可以获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全</p>
<ol>
<li>XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨那些脚本是可信的，导致恶意脚本被执行</li>
<li>由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求</li>
<li>在部分情况下，由于输入的限制，注入的恶意脚本比较短。但可以通过引入外部的脚本，并由浏览器执行，来完成比较复杂的攻击策略</li>
</ol>
<a id="more"></a>

<h3 id="反射型-XSS（非持久型）"><a href="#反射型-XSS（非持久型）" class="headerlink" title="反射型 XSS（非持久型）"></a>反射型 XSS（非持久型）</h3><p>经过后端，不经过数据库，攻击方式仅具有一次性</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<hr>
 反射型 XSS 的数据流向是：浏览器 -> 后端 -> 浏览器。

<ol>
<li>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等</li>
<li>由于需要用户主动打开恶意的 URL 才会生效，攻击者会结合多种手段诱导用户点击（社会工程学）</li>
<li>POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表带提交页面，并引导用户点击），不常见</li>
</ol>
<hr>
#### 攻击演示

<h5 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h5><p>查看 php 源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里直接把 name 作为参数，直接引用，没有进行任何的过滤</p>
<p>直接就可以简单的注入&lt;script&gt;脚本</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117102338139.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117102507967.png" alt></p>
<p>这里可以直接在 input 框注入脚本</p>
<h5 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里会过滤掉&lt;script&gt;，但是它不区分大小写，而且是过滤掉整个标签的内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span>&gt;</span><span class="actionscript">alert(<span class="string">"大写就可了"</span>)</span><span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert("双写绕过")&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117103159011.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117103334509.png" alt></p>
<h5 id="High"><a href="#High" class="headerlink" title="High"></a>High</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里使用了正则表达式来过滤 script，也就是说不能用&lt;script&gt;来注入触发攻击</p>
<p>但是可以用其他的参数来触发，比如&lt;img src=”errorURL”&gt;，插入图片地址，或者&lt;a&gt;也可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"errorURL"</span> <span class="attr">onerror</span>=<span class="string">alert(</span>"触发错误以绕过")&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span> = <span class="string">alert(</span>"直接触发")&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117104411270.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117104612118.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117104804465.png" alt></p>
<h5 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">`Hello $&#123;name&#125;<span class="string">";&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;`</span></span><br></pre></td></tr></table></figure>

<p>把所有的预定义字符都转化为 HTML 实体</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">"This is some &lt;b&gt;bold&lt;/b&gt; text."</span>;</span><br><span class="line"><span class="keyword">echo</span> htmlspecialchars($str);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    This is some <span class="symbol">&amp;lt;</span>b<span class="symbol">&amp;gt;</span>bold<span class="symbol">&amp;lt;</span>/b<span class="symbol">&amp;gt;</span> text.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is some &lt;b&gt;bold&lt;&#x2F;b&gt; text;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117105630252.png" alt></p>
<p>这里即使是想以标签的形式插入，但是插入的结果，确实以字符串形式填入，不会转义为标签</p>
<h3 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h3><p>不经过后端,DOM—based XSS 漏洞是基于文档对象模型 Document Objeet Model,DOM)的一种漏洞,dom - xss 是通过 url 传入参数去控制触发的。</p>
<ol>
<li>用户打开带有恶意代码的 URL</li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站的接口执行攻击者指定的操作</li>
</ol>
<hr>
DOM-XSS 的数据流向是：URL-->浏览器

<p>DOM 型 XSS 跟前两种 XSS 的区别</p>
<p>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞</p>
<hr>
#### 攻击演示

<h5 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No protections, anything goes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117113237470.png" alt></p>
<p>点击 Select 过后，默认的 default=English</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117113404758.png" alt></p>
<p>当修改 default 的值，就会本地的修改页面的渲染了</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117115234132.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117115557967.png" alt></p>
<h5 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123;</span><br><span class="line">    $default = $_GET[<span class="string">'default'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">"&lt;script"</span>) !== <span class="keyword">false</span>) &#123;<span class="comment">//这里限制了script</span></span><br><span class="line">        header (<span class="string">"location: ?default=English"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;svg%20onload%20&#x3D;%20alert(&quot;直接触发&quot;)&gt;&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117140904220.png" alt></p>
<h5 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">'default'</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"French"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"English"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"German"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Spanish"</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">"location: ?default=English"</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>#注入，绕过白名单</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117150043503.png" alt></p>
<p>绕过了前端验证#如同在后面插入一个注释</p>
<h3 id="存储型-XSS（持久型）"><a href="#存储型-XSS（持久型）" class="headerlink" title="存储型 XSS（持久型）"></a>存储型 XSS（持久型）</h3><p>经过后端，经过数据库</p>
<ol>
<li>攻击者将恶意代码提交到目标网站的数据库中</li>
<li>用户打开目标网站时，网站的服务端将恶意代码从数据库取出，拼接带 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<hr>
 浏览器 -> 后端 -> 数据库 -> 后端 -> 浏览器

<p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等</p>
<p>最严重的一类，如留言板，如果有漏洞，恶意代码会存入数据库，别的用户来看留言板，会向后台发一个请求，拿到别人的留言内容，前端就会读取到这个恶意代码</p>
<h4 id="攻击演示"><a href="#攻击演示" class="headerlink" title="攻击演示"></a>攻击演示</h4><h5 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );<span class="comment">//移除一些字符，/n，/t 空格</span></span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message ); <span class="comment">//对字符串进行转义，比如删除了\，但是没有对输入的数据进行检查</span></span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117110540915.png" alt></p>
<p>成功注入并弹窗，这里的插入会使得永久保存，并且所有的客户端都可见，说明它已经存储在了服务器中，而且可以发现与反射型相比，它的 URL 并没有发生改变，数据的传输</p>
<h5 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );<span class="comment">//！！这里对message进行了编码，但是发现并没有对name参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是可以发现，name 是有字数的限制，但是可以进入控制台修改</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117111902805.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117112400329.png" alt></p>
<p>在 name 的 input 框中插入成功</p>
<h5 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h5><p>正则表达式的过滤，其实效果同反射型</p>
<h5 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h5><p>也是，将两个参数都实体化了，无法绕过</p>
<h3 id="可能注入-XSS-的情况"><a href="#可能注入-XSS-的情况" class="headerlink" title="可能注入 XSS 的情况"></a>可能注入 XSS 的情况</h3><ul>
<li>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入</li>
<li>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）</li>
<li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签</li>
<li>在标签的<code>href</code>、<code>src</code>等属性中，包含<code>javascript:</code>等可执行代码</li>
<li>在<code>onload</code>、<code>onerror</code>、<code>onclick</code>等事件中，注入不受控制代码</li>
<li>在<code>style</code>属性和标签中，包含类似<code>background-image:url(&quot;javascript:...&quot;);</code>的代码（浏览器已经可以防范了）</li>
<li>在<code>style</code>属性和标签中，包含类似<code>expression(...)</code>的 CSS 表达式代码（也可以防范）</li>
</ul>
<h3 id="预防存储型和反射性-XSS-攻击"><a href="#预防存储型和反射性-XSS-攻击" class="headerlink" title="预防存储型和反射性 XSS 攻击"></a>预防存储型和反射性 XSS 攻击</h3><h4 id="纯前端渲染"><a href="#纯前端渲染" class="headerlink" title="纯前端渲染"></a>纯前端渲染</h4><p>纯前端渲染的过程</p>
<ol>
<li>浏览器先加载一个静态的 HTML，从 HTML 中不包含任何跟业务相关的数据</li>
<li>然后浏览器执行 HTML 中的 JavaScript</li>
<li>JavaScript 通过 AJAX 加载业务数据，调用 DOM API 更新到页面上</li>
</ol>
<p>在纯前端渲染中，会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等，浏览器不会轻易被欺骗，因而不会执行预期外的代码</p>
<p>纯前端渲染还要注意避免 DOM 型 XSS 漏洞（例如 onload 事件和 href 中的 javascript:xxx 等）</p>
<p>在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，仍然需要面对拼接 HTML 的问题</p>
<h4 id="转义-HTML"><a href="#转义-HTML" class="headerlink" title="转义 HTML"></a>转义 HTML</h4><p>如果拼接 HTML 是必要的，就需要采用合适的转义库，对 HTML 模板各处插入点进行充分的转义</p>
<p>常用的模板引擎，如 doT.js，ejs，FreeMarker 等，对于 HTML 转义的规则</p>
<p>把<code>&amp; &lt; &gt; &quot; &#39; /</code>几个字符转义，起到一定的 XSS 防护作用</p>
<h3 id="预防-DOM-型-XSS-攻击"><a href="#预防-DOM-型-XSS-攻击" class="headerlink" title="预防 DOM 型 XSS 攻击"></a>预防 DOM 型 XSS 攻击</h3><p>在使用<code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code>时要小心</p>
<p>不要把不可信的数据作为 HTML 插入到页面，应该尽量使用<code>.textContene</code>、<code>.setAttribute()</code>等</p>
<p>DOM 中的内联事件监听器，location、onclick、onerror、onload、onmouseover 等，&lt;a&gt;标签的 href 属性</p>
<p>JavaScript 中的 eval()、setTimeout()、setInterval()等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，会造成安全隐患。</p>
<h3 id="其他-XSS-防御手段"><a href="#其他-XSS-防御手段" class="headerlink" title="其他 XSS 防御手段"></a>其他 XSS 防御手段</h3><ol>
<li><p>Content Security Policy</p>
</li>
<li><p>输入内容长度控制</p>
<p>对于不受信任的输入，都应该限定一个合理的长度，虽然无法完全防止，但是可以增加 XSS 攻击的难度</p>
</li>
<li><p>HTTP-only Cookie</p>
<p>禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取 Cookie</p>
</li>
<li><p>敏感操作使用验证码，防止脚本冒充用户提交危险操作</p>
</li>
</ol>
<h2 id="CSRF-篇"><a href="#CSRF-篇" class="headerlink" title="CSRF 篇"></a>CSRF 篇</h2><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的</p>
<h3 id="一个常见的攻击过程"><a href="#一个常见的攻击过程" class="headerlink" title="一个常见的攻击过程"></a>一个常见的攻击过程</h3><ul>
<li>受害者登录 a.com，并保留了登录凭证（Cookie）</li>
<li>攻击者引诱受害者访问量 b.com（弹窗什么的）</li>
<li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带 a.com 的 Cookie（比如微博，点了一下，多了一些奇奇怪怪的关注）</li>
<li>a.com 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</li>
<li>a.com 以受害者的名义执行了 act=xx</li>
<li>攻击完成。攻击者在受害者不知情的情况下，冒充了受害者，让 a.com 执行了自己定义的操作</li>
</ul>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/sequence_diagram.svg" alt></p>
<h3 id="攻击测试"><a href="#攻击测试" class="headerlink" title="攻击测试"></a>攻击测试</h3><h4 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h4><p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117153204469.png" alt></p>
<p>在 URL 上面就已经显示了</p>
<p>在 XSS store 类型中就可以进行更改</p>
<h4 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">'HTTP_REFERER'</span> ] ,$_SERVER[ <span class="string">'SERVER_NAME'</span> ]) !== <span class="keyword">false</span> )</span><br></pre></td></tr></table></figure>

<p>多了一层校验，检查 header 中的 referer 域是否含有服务器名（header 中的 host 域的值），若是含有，可以进行更改，反之不行</p>
<p>可以将一个钓鱼网站的名字改成 host 的值，从而改变密码</p>
<h3 id="GET-类型的-CSRF"><a href="#GET-类型的-CSRF" class="headerlink" title="GET 类型的 CSRF"></a>GET 类型的 CSRF</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bank.example/withdraw?amount=100000&amp;for=hacker"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>受害者访问含有这个 img 的页面后，浏览器会主动向<code>http://bank.example/withdraw?account=someone&amp;amount=100000&amp;for=hacker</code>发出一次 HTTP 请求。bank.example 就会收到包含受害者登录信息的一次跨域请求</p>
<h3 id="POST-类型的-CSRF"><a href="#POST-类型的-CSRF" class="headerlink" title="POST 类型的 CSRF"></a>POST 类型的 CSRF</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://bank.example/withdraw"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"account"</span> <span class="attr">value</span>=<span class="string">"someone"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"amount"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"for"</span> <span class="attr">value</span>=<span class="string">"hacker"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>hidden，表单设置为隐藏的</p>
<p>访问该页面后，表单会<strong>自动提交</strong>，相当于模拟用户完成了一次 POST 操作</p>
<h3 id="点击链接类型的-CSRF"><a href="#点击链接类型的-CSRF" class="headerlink" title="点击链接类型的 CSRF"></a>点击链接类型的 CSRF</h3><p>这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户点击</p>
<h3 id="CSRF-攻击特点"><a href="#CSRF-攻击特点" class="headerlink" title="CSRF 攻击特点"></a>CSRF 攻击特点</h3><ul>
<li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生</li>
<li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据</li>
<li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”</li>
<li>跨站请求可以用各种方式：URL、超链接、CORS、Form 提交等等</li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS</title>
    <url>/2020/01/06/SCSS/</url>
    <content><![CDATA[<h1 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h1><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义变量和值</span></span><br><span class="line"><span class="variable">$bgcolor</span>: lightblue;</span><br><span class="line"><span class="variable">$textcolor</span>: darkblue;</span><br><span class="line"><span class="variable">$fontsize</span>: <span class="number">18px</span>;</span><br><span class="line"><span class="comment">// 使用变量</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$textcolor</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontsize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Sass-变量"><a href="#Sass-变量" class="headerlink" title="Sass 变量"></a>Sass 变量</h2><p>变量用于存储一些信息，可以重复使用</p>
<p>可以是，字符串、数字、颜色、布尔值、列表、null 值</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span>: value;</span><br></pre></td></tr></table></figure>

<h2 id="Sass-作用域"><a href="#Sass-作用域" class="headerlink" title="Sass 作用域"></a>Sass 作用域</h2><p>变量的作用域只能在当前的层级上有效果，即，局部作用域</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$myColor</span>: green; <span class="comment">//只在h1里有用，局部作用域</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转化到 css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="global"><a href="#global" class="headerlink" title="!global"></a>!global</h3><p>用来设置全局变量</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$myColor</span>: green !global; <span class="comment">//全局作用域</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样 p 标签的样式也是 green，就都改了</p>
<h2 id="Sass-嵌套规则和属性"><a href="#Sass-嵌套规则和属性" class="headerlink" title="Sass 嵌套规则和属性"></a>Sass 嵌套规则和属性</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一种标签类名之类的一些嵌套</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="父选择器的标识符-amp"><a href="#父选择器的标识符-amp" class="headerlink" title="父选择器的标识符&amp;"></a>父选择器的标识符&amp;</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="comment">//这是错误的写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正解</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sass-嵌套属性"><a href="#Sass-嵌套属性" class="headerlink" title="Sass 嵌套属性"></a>Sass 嵌套属性</h3><p>很多 CSS 属性都有相同的前缀</p>
<p>eg：<code>font-family</code>、<code>font-size</code>、<code>font-weight</code>等等等</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过一个:来进行嵌套属性</span></span><br><span class="line"><span class="attribute">font</span>: &#123;</span><br><span class="line">  family: Helvetica, sans-serif;</span><br><span class="line">  size: <span class="number">18px</span>;</span><br><span class="line">  weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text: &#123;</span><br><span class="line">  align: center;</span><br><span class="line">  <span class="attribute">transform</span>: lowercase;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可以编译成正常的</p>
<h2 id="Sass-import"><a href="#Sass-import" class="headerlink" title="Sass @import"></a>Sass @import</h2><h3 id="Sass-导入文件"><a href="#Sass-导入文件" class="headerlink" title="Sass 导入文件"></a>Sass 导入文件</h3><p>类似 CSS，Sass 支持<code>@import</code>指令</p>
<p>可以导入其他文件等内容</p>
<p><strong><code>CSS @import</code>指令每次调用都会创建一个额外的 HTTP 请求。<code>Sass @import</code>指令将文件包含在 CSS 中，不需要额外的 HTTP 请求</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> filename;</span><br></pre></td></tr></table></figure>

<p>不需要指定后缀</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'variables'</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'colors'</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reset.scss</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//standard.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码转化之后，可以合并到同一个 CSS 文件中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sass-Partials"><a href="#Sass-Partials" class="headerlink" title="Sass Partials"></a>Sass Partials</h3><p>不要编译到同一个 CSS 文件的方法，在文件名开头加一个下划线</p>
<p>表示不要将其编译到 CSS 文件，但是导入的时候不加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_filename</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//_colors.scss</span></span><br><span class="line"><span class="variable">$myPink</span>: <span class="number">#ee82ee</span>;</span><br><span class="line"><span class="variable">$myBlue</span>: <span class="number">#4169e1</span>;</span><br><span class="line"><span class="variable">$myGreen</span>: <span class="number">#8fbc8f</span>;</span><br></pre></td></tr></table></figure>

<p>导入的时候，不需要下划线</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'colors'</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myBlue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请不要将带下划线与不带下划线的同名文件放置在同一个目录下，比如，_colors.scss 和 colors.scss 不能同时存在于同一个目录下，否则带下划线的文件将会被忽略。</p>
<h2 id="Sass-mixin-与-include"><a href="#Sass-mixin-与-include" class="headerlink" title="Sass @mixin 与@include"></a>Sass @mixin 与@include</h2><p>@mixin 指令允许定义一个可以在整个样式表中重复使用的样式</p>
<p>@include 指令可以将混入(mixin)引入到文档中</p>
<h3 id="定义一个混入"><a href="#定义一个混入" class="headerlink" title="定义一个混入"></a>定义一个混入</h3><p>混入(mixin)通过@mixin 指令来定义</p>
<p><code>@mixin name{property:value;property:value;...}</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> important-text &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：<code>-</code>与<code>_</code>是等价的</strong></p>
<h3 id="使用混入"><a href="#使用混入" class="headerlink" title="使用混入"></a>使用混入</h3><p>@include 指令可用于包含一混入：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">selector &#123;</span><br><span class="line">  <span class="keyword">@include</span> mixin-name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>包含 important-text 混入代码</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> important-text &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.danger</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> important-text;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转换后的 CSS 代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.danger</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>混入中可以包含引入的混入</p>
<h3 id="向混入传递变量"><a href="#向混入传递变量" class="headerlink" title="向混入传递变量"></a>向混入传递变量</h3><p>混入可以接收参数</p>
<p>也可以向混入传递变量</p>
<h4 id="定义可以接收参数的混入"><a href="#定义可以接收参数的混入" class="headerlink" title="定义可以接收参数的混入"></a>定义可以接收参数的混入</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//混入接收两个参数</span></span><br><span class="line"><span class="keyword">@mixin</span> bordered(<span class="variable">$color</span>, <span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myAricle</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> bordered(blue, <span class="number">1px</span>); <span class="comment">//调用混入并传参</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myNotes</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> bordered(red, <span class="number">2px</span>); <span class="comment">// 调用混入，并传递两个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="混入的参数可以定义默认值"><a href="#混入的参数可以定义默认值" class="headerlink" title="混入的参数可以定义默认值"></a>混入的参数可以定义默认值</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> bordered(<span class="variable">$color</span>: blue, <span class="variable">$width</span>: <span class="number">1px</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>: <span class="number">1in</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="selector-tag">style</span>: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> sexy-border(blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> sexy-border(blue, <span class="number">2in</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>不确定一个混入或者一个函数使用多少参数。可以用<code>...</code>来设置可变参数</p>
<p>创建一个盒阴影</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> box-shadow(<span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转码后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浏览器前缀使用混入"><a href="#浏览器前缀使用混入" class="headerlink" title="浏览器前缀使用混入"></a>浏览器前缀使用混入</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> transform(<span class="variable">$property</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myBox</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> transform(rotate(<span class="number">20deg</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转码为 CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myBox</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sass-extend-与继承"><a href="#Sass-extend-与继承" class="headerlink" title="Sass @extend 与继承"></a>Sass @extend 与继承</h2><p>@extend 指令告诉 Sass 一个选择器的样式从另一选择器继承</p>
<p>当大量样式一致的时候，继承就很简单了</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-basic</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-report</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .button-basic;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-submit</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .button-basic;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转码过后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-basic</span>,</span><br><span class="line"><span class="selector-class">.button-report</span>,</span><br><span class="line"><span class="selector-class">.button-submit</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-report</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-submit</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
