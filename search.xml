<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习Webpack</title>
    <url>/2020/01/13/%E5%AD%A6%E4%B9%A0Webpack/</url>
    <content><![CDATA[<h1 id="学习-Webpack"><a href="#学习-Webpack" class="headerlink" title="学习 Webpack"></a>学习 Webpack</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><blockquote>
<p>将一个复杂的系统分解为多个模块以方便编码</p>
</blockquote>
<h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a><code>CommonJS</code></h4><p>核心思想：</p>
<ol>
<li>通过<code>require</code>方法来同步加载依赖的其他模块</li>
<li>通过<code>module.exports</code>导出需要暴露的接口（Node.js 使用也是如此）</li>
</ol>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = moduleA.someFunc;</span><br></pre></td></tr></table></figure>

<p>优点</p>
<ul>
<li>代码可复用于<code>Node.js</code>环境并运行，同构应用</li>
<li>Npm 发布</li>
</ul>
<p>缺点</p>
<ul>
<li>无法直接在浏览器环境运行，必须使用工具转化为 ES5</li>
</ul>
<h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a><code>AMD</code></h4><p>采用异步的方式去加载依赖的模块。<code>AMD</code>主要用于解决针对浏览器环境的模块化问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个模块</span></span><br><span class="line">define(<span class="string">'module'</span>, [<span class="string">'dep'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">dep</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//导入和使用</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'module'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>优点</p>
<ul>
<li>直接在浏览器运行</li>
<li>可以异步加载依赖</li>
<li>并行加载多个依赖</li>
<li>可以在浏览器和<code>Node.js</code>环境下运行</li>
</ul>
<p>缺点</p>
<ul>
<li><code>JavaScript</code>环境没有原生支持</li>
</ul>
<h4 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a><code>ES6模块化</code></h4><p>浏览器和服务器通用的模块解决方案</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="样式文件中的模块化"><a href="#样式文件中的模块化" class="headerlink" title="样式文件中的模块化"></a>样式文件中的模块化</h4><p>将一些常用的样式片段放在通用文件中，再在另一个文件里通过<code>@import</code>语句导入和使用</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//util.scss文件</span></span><br><span class="line"><span class="comment">//定义样式片段</span></span><br><span class="line"><span class="keyword">@mixin</span> center &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.scss文件</span></span><br><span class="line"><span class="comment">//导入和使用样式片段</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'util'</span>;</span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a><code>Webpack</code></h3><blockquote>
<p>在<code>Webpack</code>里一切文件都是模块，通过<code>Loader</code>转换文件，通过<code>Plugin</code>注入钩子，最后输出由多个模块组合成的文件</p>
</blockquote>
<p>能配置处理文件的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//所有模块的入口，Webpack从入口开始递归解析出所有依赖的模块</span></span><br><span class="line">  entry: <span class="string">'./app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">//将入口所依赖的所有模块打包成一个文件bundle.js输出</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装<code>Webpack</code></h4><p>使用 Webpack 执行构建任务，需要通过<code>webpack</code>可执行文件去启动构建任务</p>
<ul>
<li><p>新建 Web 项目</p>
<ul>
<li><code>npm init</code>初始化模块化开发的项目</li>
<li>使用脚手架工具<a href="http://yeoman.io" target="_blank" rel="noopener">Yeoman</a></li>
</ul>
</li>
<li><p>安装<code>Webpack</code>到项目</p>
<ul>
<li><code>npm i -D webpack</code> // <code>npm i -g webpack</code>全局安装</li>
</ul>
</li>
<li><p>运行</p>
<ul>
<li><p>在根目录下的<code>node_modules/.bin/webpack</code>运行可执行文件</p>
</li>
<li><p>在<code>Npm Script</code>里定义</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts":&#123;"start":"webpack --config webpack.config.js"&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>工程</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言程序设计</title>
    <url>/2020/01/08/assembly/</url>
    <content><![CDATA[<h1 id="汇编语言程序设计"><a href="#汇编语言程序设计" class="headerlink" title="汇编语言程序设计"></a>汇编语言程序设计</h1><p>计算机的硬件组成结构</p>
<p>CPU：运算器，控制器，寄存器</p>
<p>主存储器</p>
<p>I/O接口</p>
<p>汇编语言抽象成为：寄存器，存储器地址和输入输出地址</p>
<a id="more"></a>

<h2 id="寄存器（Register）"><a href="#寄存器（Register）" class="headerlink" title="寄存器（Register）"></a>寄存器（Register）</h2><ul>
<li><p>处理器内部的高速存储单元</p>
</li>
<li><p>用于暂时存放执行过程中的代码和数据</p>
</li>
<li><p>透明寄存器：对应用人员不可见，不可用编程直接控制</p>
</li>
<li><p>可编程寄存器：有引用名称</p>
<ul>
<li>通用寄存器</li>
<li>专用寄存器</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>通用寄存器</th>
<th>专用寄存器</th>
</tr>
</thead>
<tbody><tr>
<td>16位：AX、BX、CX、DX、SI、DI、BP、SP</td>
<td>标志寄存器FLAGS<br>指令指针寄存器EIP</td>
</tr>
<tr>
<td>8位：AH、AL、BH、BL、CH、CL、DH、DL</td>
<td>段寄存器：CS、DS、SS、ES、FS、GS</td>
</tr>
</tbody></table>
<h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><ul>
<li><p>处理器最常使用的整数通用寄存器</p>
</li>
<li><p>可用于保存整数数据、地址等</p>
<img src="/2020/01/08/assembly/{94C58A26-CC0B-C8B2-95D4-A5512BF5AFE9}.png" style="zoom:33%;">





</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th></th>
<th></th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>AX</td>
<td>累加器</td>
<td>Accumulator</td>
<td>使用频率最高，用于算术，逻辑运算，以及与外设传送信息，比如一些显示的接口</td>
</tr>
<tr>
<td>BX</td>
<td>基址寄存器</td>
<td>Base Address</td>
<td>常用作存放存储器地址</td>
</tr>
<tr>
<td>CX</td>
<td>计数器</td>
<td>Counter</td>
<td>作为循环和串操作等指令中的隐含计数器</td>
</tr>
<tr>
<td>DX</td>
<td>数据存储器</td>
<td>Data</td>
<td>用于存放双字长数据的高16位，或存放外设端口地址</td>
</tr>
<tr>
<td>SI</td>
<td>源变址寄存器</td>
<td>Source Index</td>
<td>常用于存储器寻址时提供地址</td>
</tr>
<tr>
<td>DI</td>
<td>目的变址寄存器</td>
<td>Destination Index</td>
<td></td>
</tr>
<tr>
<td>BP</td>
<td>基址指针</td>
<td>Base Pointer</td>
<td>表示数据在堆栈段中的基地址</td>
</tr>
<tr>
<td>SP</td>
<td>堆栈指针</td>
<td>Stack Pointer</td>
<td>堆栈指针寄存器，表示栈顶的偏移地址，专用的</td>
</tr>
</tbody></table>
<h3 id="处理器专用寄存"><a href="#处理器专用寄存" class="headerlink" title="处理器专用寄存"></a>处理器专用寄存</h3><h4 id="标志Flag"><a href="#标志Flag" class="headerlink" title="标志Flag"></a>标志Flag</h4><ul>
<li><p>标志体现了某种工作形态</p>
</li>
<li><p>有些处理器标志用以<strong>反映指令执行结果</strong></p>
<ul>
<li>加减是否借位，数据是否为零，或者是正或负</li>
</ul>
</li>
<li><p>有些处理器标志用于控制指令执行形式</p>
<ul>
<li>处理器是否单步操作、是否影响外部中断</li>
</ul>
</li>
<li><p>设计一个或多个二进制表示一种标志</p>
</li>
<li><p>用0和1的组合表达标志的不同状态</p>
</li>
</ul>
<h5 id="处理器最基本的标志：状态标志"><a href="#处理器最基本的标志：状态标志" class="headerlink" title="处理器最基本的标志：状态标志"></a>处理器最基本的标志：状态标志</h5><ul>
<li>用于记录指令执行结果的辅助</li>
<li>加减运算和逻辑运算指令主要设计他们</li>
<li>其他指令的执行也会相应的设置他们</li>
<li>处理器主要使用其中5个构成各种条件<ul>
<li>分支指令判断这些条件实现程序分支</li>
</ul>
</li>
</ul>
<h4 id="指令指针寄存器IP（专用寄存器）"><a href="#指令指针寄存器IP（专用寄存器）" class="headerlink" title="指令指针寄存器IP（专用寄存器）"></a>指令指针寄存器IP（专用寄存器）</h4><p>指示代码段中指令的偏移地址</p>
<p>与代码段寄存器CS联用，确定下一条指令的物理地址</p>
<p>通过<code>CS:IP</code>寄存器来控制指令序列的执行流程</p>
<p>保存将要<strong>执行的指令在主存的存储器地址</strong></p>
<ul>
<li>顺序执行时自动增量（加上该指令的字节数），<strong>指向下一条指令</strong></li>
<li>分支、调用等操作时执行控制转移指令修改，引起程序转移到指定的指令执行</li>
<li>出现中断或异常时被处理器赋值而相应改变</li>
</ul>
<p>保存一个特定用途的内容，一条指令</p>
<p>改变以改变指令执行的顺序</p>
<h3 id="存储空间分段管理"><a href="#存储空间分段管理" class="headerlink" title="存储空间分段管理"></a>存储空间分段管理</h3><p>“段”是保存相关代码或数据的一个主存区域</p>
<p>应用程序主要分3类基本段</p>
<table>
<thead>
<tr>
<th>主存空间</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>代码段(Code Segment) CS</td>
<td>存放程序的可执行代码（处理器指令）</td>
</tr>
<tr>
<td>数据段(Data Segment) DS</td>
<td>存放程序所用的数据，eg：全局变量</td>
</tr>
<tr>
<td>堆栈段(Stack Segment) SS</td>
<td>程序需要的特殊区域，存放返回地址、临时变量等</td>
</tr>
</tbody></table>
<p>段的说明开始——段寄存器，某个段在主存的位置</p>
<h4 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h4><p>4个16位段寄存器，每个段寄存器确定一个逻辑段的起始地址</p>
<table>
<thead>
<tr>
<th>段寄存器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>CS</td>
<td>指明代码段的起始地址</td>
</tr>
<tr>
<td>SS</td>
<td>指明堆栈段的起始地址</td>
</tr>
<tr>
<td>DS</td>
<td>指明数据段的起始地址</td>
</tr>
<tr>
<td>ES</td>
<td>指明附加段的起始地址</td>
</tr>
</tbody></table>
<p>CS、SS、DS、ES</p>
<h4 id="代码段的当前指令地址"><a href="#代码段的当前指令地址" class="headerlink" title="代码段的当前指令地址"></a>代码段的当前指令地址</h4><p><strong>代码段</strong></p>
<ul>
<li>段基地址：代码段寄存器CS指示</li>
<li>偏移地址：指令指针偏移地址IP保存</li>
</ul>
<p>存储器地址在编程时，是以逻辑地址形式访问</p>
<p>逻辑地址-&gt; 段基地址：偏移地址</p>
<p>CS段基地址指明了代码段的开始</p>
<p>IP保存的偏移地址，明确指明正在执行的段内的哪个指令</p>
<p>组合指明当前指令地址</p>
<p>处理器利用<code>CS:IP</code>取得下一条要执行的指令</p>
<img src="/2020/01/08/assembly/{A3EC608F-28F5-3F97-FFDC-810F397D50C9}.png" style="zoom:33%;">

<h4 id="堆栈段的当前栈顶地址"><a href="#堆栈段的当前栈顶地址" class="headerlink" title="堆栈段的当前栈顶地址"></a>堆栈段的当前栈顶地址</h4><p><strong>堆栈段</strong></p>
<ul>
<li>段基地址：堆栈段寄存器SS指示</li>
<li>偏移地址：堆栈指针寄存器SP保存</li>
</ul>
<img src="/2020/01/08/assembly/{812CD6D1-F099-932C-62EC-0CB1A950C462}.png" style="zoom:33%;">

<p>处理器利用<code>SS:SP</code>操作堆栈顶的数据</p>
<h4 id="数据段的操作数地址"><a href="#数据段的操作数地址" class="headerlink" title="数据段的操作数地址"></a>数据段的操作数地址</h4><p><strong>数据段</strong></p>
<ul>
<li>段基地址：数据段寄存器DS指示</li>
<li>偏移地址：存储器寻址方式计算出有效地址EA指示</li>
</ul>
<p>处理器利用<code>DS:EA</code>存取数据段中的数据</p>
<h4 id="附加段的存放"><a href="#附加段的存放" class="headerlink" title="附加段的存放"></a>附加段的存放</h4><p>附加段是附加的数据段</p>
<p>附加段寄存器ES存放附加段的段地址</p>
<p>各种主存寻址方式得到存储器中操作数的偏移地址</p>
<p>处理器利用<code>ES:EA</code>获取附加段的数据</p>
<p>串操作指令将附加段作为其目的操作数的存放区域</p>
<h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>被抽象为存储器地址</p>
<p>存储器是由大量存储单元组成，需要用编号区别每个单元，编号=地址</p>
<h3 id="存储器地址"><a href="#存储器地址" class="headerlink" title="存储器地址"></a>存储器地址</h3><p>主存储器容量很大、被划分为许多存储单元</p>
<p>每个存储单元被编排一个号码、即存储单元地址</p>
<ul>
<li>称为存储器地址</li>
</ul>
<p><strong>每个存储单元以字节为基本存储单位</strong></p>
<ul>
<li>字节编址（Byte Addressable）</li>
<li>一个字节=八个二进制位：1Byte=8Bit</li>
</ul>
<p>数据的基本单位：位、字节、字、双字</p>
<h3 id="存储器的物理地址"><a href="#存储器的物理地址" class="headerlink" title="存储器的物理地址"></a>存储器的物理地址</h3><p>处理器连接的物理存储器使用物理地址</p>
<ul>
<li>从0开始</li>
<li>直到其支持的最大存储单元</li>
</ul>
<h4 id="存储模型"><a href="#存储模型" class="headerlink" title="存储模型"></a>存储模型</h4><p>程序并不直接寻址物理存储器，会对存储器的管理有麻烦</p>
<p>MMU存储管理单元，存储模型，用于程序访问存储器</p>
<h3 id="逻辑地址"><a href="#逻辑地址" class="headerlink" title="逻辑地址"></a>逻辑地址</h3><p>存储器空间可以分段管理，采用逻辑地址指示</p>
<ul>
<li>逻辑地址=段基地址：偏移地址<ul>
<li>段基地址=在主存中的起始位置</li>
<li>偏移地址=距离段基地址的位移量</li>
</ul>
</li>
<li>处理器内部以及编程时采用逻辑地址</li>
</ul>
<p>物理地址是唯一的，而逻辑地址可以多个</p>
<p><code>段基地址:段内偏移地址</code></p>
<h2 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h2><p>二进制编码的十进制数</p>
<ul>
<li>一个十进制数位0~9用4为二进制编码表示</li>
</ul>
<p>直观表示</p>
<p>0100 1001 0111 1000.0001 0100 1001</p>
<p>真值：4978.149</p>
<h2 id="处理器指令"><a href="#处理器指令" class="headerlink" title="处理器指令"></a>处理器指令</h2><p>指令由操作码和操作数组成</p>
<ul>
<li>操作码表明处理器执行的操作<ul>
<li>数据传送、加法、跳转等</li>
<li>指令注记符表示</li>
</ul>
</li>
<li>操作数是参与操作的数据对象<ul>
<li>主要以寄存器名或地址形式指明数据的来源</li>
<li>使用寄存器、常量、变量等形式表示</li>
</ul>
</li>
</ul>
<h3 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h3><p>传送指定：<code>MOV</code></p>
<p>将数据从一个位置传送到另一个位置，类似高级语言的赋值语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov dest,src ;dest&lt;-src</span><br><span class="line">;目的操作数dest：数据将要传送到的位置；源操作数src：被传送的数据或数据所在的位置</span><br><span class="line">mov ax,100 ;AX&lt;-100(常量)</span><br><span class="line">mov ax dvar;AX&lt;-dvar(变量)</span><br><span class="line">mov ax bx ;AX&lt;-bx(寄存器)</span><br></pre></td></tr></table></figure>

<p>给定的是操作数的位置，实际传输的操作数位置的数据</p>
<h2 id="语句格式"><a href="#语句格式" class="headerlink" title="语句格式"></a>语句格式</h2><p>源程序由语句组成</p>
<ul>
<li><p>执行性语句：表达处理器指令、实现功能：赋值，分支，完成一个功能</p>
<p>标号：    硬指令助记符    操作数，操作数 ;注释</p>
</li>
<li><p>说明性语句：表达伪指令、控制汇编方式：变量的定义，类型的说明</p>
<p>名字：    伪指令助记符    参数，参数，..；注释.</p>
</li>
</ul>
<h3 id="标号与名字"><a href="#标号与名字" class="headerlink" title="标号与名字"></a>标号与名字</h3><ul>
<li><p>标号</p>
<p>冒号分隔</p>
<p><strong>表示处理器指令在主存中的逻辑地址</strong></p>
<p><strong>表示分支、循环等程序的目的地址</strong></p>
<p>反映应指令位置(逻辑地址)的标识符</p>
</li>
<li><p>名字</p>
<p>空格或制表符分隔</p>
<p>变量名，段名，子程序名</p>
<p>反映变量、段和子程序等的逻辑地址</p>
<p>伪指令位置</p>
</li>
<li><p>标识符</p>
</li>
</ul>
<p>都是用户定义的标识符</p>
<ul>
<li><p>保留字</p>
<p>汇编程序中已经利用的标识符:</p>
<ul>
<li>硬指令助记符——MOV、ADD</li>
<li>伪指令助记符——DB、EQU</li>
<li>操作符——OFFSET、PTR</li>
<li>寄存器名——AX、CS</li>
<li>预定义符号——@data</li>
</ul>
</li>
</ul>
<h3 id="助记符"><a href="#助记符" class="headerlink" title="助记符"></a>助记符</h3><ul>
<li><p>助记符帮助记忆指令功能的符号</p>
<p>硬指令助记符表示处理器指令</p>
<p>伪指令助记符表示一个汇编命令</p>
</li>
<li><p>处理器指令：传送指令MOV</p>
</li>
<li><p>伪指令：字节变量定义</p>
<p>助记符：BYTE（DB）</p>
<p>功能：在主存占用若干存储空间，用于保存变量值</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg byte &#39;Hello,Assembly!&#39;,13,10,0</span><br></pre></td></tr></table></figure>



<h3 id="操作数和参数"><a href="#操作数和参数" class="headerlink" title="操作数和参数"></a>操作数和参数</h3><ul>
<li><p>处理器指令的操作数：表示参与操作的对象</p>
<p>具体的常量</p>
<p>保存在寄存器的数据</p>
<p>保存在存储器的变量</p>
<p>dest和src</p>
</li>
<li><p>伪指令的参数</p>
<p>常量、变量名、表达式等</p>
<p>可以多个，参数之间以逗号分隔</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg byte &#39;Hello,Assembly!&#39;,13,10,0;字符串是操作数,后面是参数，定义字符串</span><br><span class="line">mov ax, offset msg;ax获得msg的偏移地址</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>分号后的内容</p>
<h2 id="源程序框架"><a href="#源程序框架" class="headerlink" title="源程序框架"></a>源程序框架</h2><p>数据段、代码段等的定义</p>
<p>程序起始执行的位置</p>
<p>汇编结束的指示</p>
<p>MASM</p>
<p>简化段定义格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;example.asm</span><br><span class="line">	.model small</span><br><span class="line">	.stack</span><br><span class="line">	.data</span><br><span class="line">	...;在数据段定义数据</span><br><span class="line">	.code</span><br><span class="line">	.startup</span><br><span class="line">	...;在代码段填入指令序列</span><br><span class="line">	.exit 0</span><br><span class="line">	...;子程序代码</span><br><span class="line">	end</span><br></pre></td></tr></table></figure>

<p>显示字符串的格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	.model small ;定义程序的存储模型</span><br><span class="line">	.stack ;定义堆栈段</span><br><span class="line">	.data ;定义数据段</span><br><span class="line">string db &quot;Hello world!&quot;,odh,0ah,&#39;$&#39;;在数据段定义要显示的字符串</span><br><span class="line">	.code ;定义代码段</span><br><span class="line">	.startup ;程序起始点，建立DS、SS</span><br><span class="line">	mov dx,offset string ;指定字符串</span><br><span class="line">	mov ah,9</span><br><span class="line">	int 21 ;利用功能调用显示信息</span><br><span class="line">	.exit 0;程序结束点，返回</span><br><span class="line">	end;汇编结束</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	.data	;定义数据段</span><br><span class="line">	...		;数据定义</span><br><span class="line">	.code	;定义代码段</span><br><span class="line">start:		;程序执行起始位置</span><br><span class="line">	...		;主程序</span><br><span class="line">	exit 0	;程序正常执行结束</span><br><span class="line">	...		;子程序</span><br><span class="line">	end start	;汇编结束</span><br></pre></td></tr></table></figure>

<h3 id="INCLUDE包含伪指令"><a href="#INCLUDE包含伪指令" class="headerlink" title="INCLUDE包含伪指令"></a>INCLUDE包含伪指令</h3><p>用于声明常用的常量定义，过程说明，共享的子程序库等，相当于C语言头文件</p>
<h3 id="段的简化定义"><a href="#段的简化定义" class="headerlink" title="段的简化定义"></a>段的简化定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;数据段定义伪指令</span><br><span class="line">.data	;创建一个数据段</span><br><span class="line">;代码段定义伪指令</span><br><span class="line">.code	;创建一个代码段</span><br><span class="line">;堆栈段定义伪指令</span><br><span class="line">.stack	;创建一个堆栈段，window自动维护，不用设置</span><br></pre></td></tr></table></figure>

<h3 id="程序的开始和结束"><a href="#程序的开始和结束" class="headerlink" title="程序的开始和结束"></a>程序的开始和结束</h3><ul>
<li><p>程序开始执行的位置</p>
<p>使用一个标号（eg：START）</p>
<p>作为汇编结束<code>END</code>伪指令的参数</p>
</li>
<li><p>应用程序执行终止</p>
<p>语句<code>EXIT 0</code>终止程序执行</p>
<p>返回操作系统，并提供一个返回代码0</p>
</li>
<li><p>源程序汇编结束</p>
<p>使用<code>END</code>伪指令语句</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start:		;程序执行起始位置</span><br><span class="line">	...		;主程序</span><br><span class="line">	exit 0	;程序正常执行结束</span><br><span class="line">	...		;子程序</span><br><span class="line">	end start	;汇编结束</span><br></pre></td></tr></table></figure>

<p>执行终止不等于汇编结束</p>
<p>end是结束start</p>
<p>程序结束的意思是把控制权交还给操作系统</p>
<p>汇编结束是源程序到此结束</p>
<p>框架可作为模板文件</p>
<h3 id="DOS系统功能调用"><a href="#DOS系统功能调用" class="headerlink" title="DOS系统功能调用"></a>DOS系统功能调用</h3><p>21H中断时DOS提供的用于调用系统功能的中断</p>
<p>DOS基本功能调用(INT 21H)</p>
<table>
<thead>
<tr>
<th>子功能号</th>
<th>功能</th>
<th>入口参数</th>
<th>出口参数</th>
</tr>
</thead>
<tbody><tr>
<td>AH=01H</td>
<td>从标准输入设备输入一个字符</td>
<td></td>
<td>AL=输入字符的ASCII码</td>
</tr>
<tr>
<td>AH=02H</td>
<td>向标准输出设备输出一个字符</td>
<td>DL=字符的ASCII码</td>
<td></td>
</tr>
<tr>
<td>AH=09H</td>
<td>向标准输出设备输出一个字符串</td>
<td>DS:DX=字符串地址</td>
<td></td>
</tr>
<tr>
<td>AH=0AH</td>
<td>从标准输入设备输入一个字符串</td>
<td>DS:DX=缓冲区地址</td>
<td></td>
</tr>
<tr>
<td>AH=0BH</td>
<td>判断键盘是否有键按下</td>
<td></td>
<td>AL=0，无；AL=FFH，有</td>
</tr>
<tr>
<td>AH=4CH</td>
<td>程序执行终止</td>
<td>AL=返回代码</td>
<td></td>
</tr>
</tbody></table>
<h4 id="功能调用"><a href="#功能调用" class="headerlink" title="功能调用"></a>功能调用</h4><ol>
<li>在AH寄存器中设置系统功能调用号</li>
<li>在指定寄存器中设置入口参数</li>
<li>执行指令INT 21H实现中断服务程序的功能调用</li>
<li>根据出口参数分析功能调用执行情况</li>
</ol>
<h4 id="字符输出的功能调用"><a href="#字符输出的功能调用" class="headerlink" title="字符输出的功能调用"></a>字符输出的功能调用</h4><p>INT 21H </p>
<p>功能号：AH=02H</p>
<p>入口参数：DL=字符的ASCII码</p>
<p>功能：在显示器当前光标位置显示给定的字符，光变右移一个字符位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ah,02h ; 设置功能号：ah&lt;-02h</span><br><span class="line">mov dl,&quot;?&quot; ; 提供入口参数</span><br><span class="line">int 21h ; 打印显示&quot;?&quot;</span><br></pre></td></tr></table></figure>

<p>0DH回车，0AH换行，都会相应的处理</p>
<hr>
#### 字符串输出功能的调用

<p>功能号：AH=09H</p>
<p>入口参数：DS:DX=欲显示字符串在主存中的首地址</p>
<p>可以输出回车换行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string db &quot;Hello, Everybody!&quot;,0dh,0ah,&#39;$&#39;;在数据段定义要显示的字符串</span><br><span class="line">mov ah,09h ;设置功能号：ah &lt;- 09h</span><br><span class="line">mov dx,offset string ;提供入口参数：dx &lt;- 字符串的偏移地址</span><br><span class="line">int 21h ;DOS功能调用</span><br></pre></td></tr></table></figure>

<hr>
#### 字符输入的功能调用

<p>DOS功能调用INT 21H</p>
<p>功能号：AH=01H</p>
<p>出口参数：AL=字符串的ASCII码</p>
<p>功能：获得按键的ASCII代码值</p>
<p>调用此功能时，若无键按下，则会一直等待，直到按键后才读取该键值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getkey: mov ah,01h ;功能号：ah &lt;- 01h</span><br><span class="line">				int 21h ;功能调用</span><br><span class="line">				cmp al,&#39;Y&#39; ;处理出口参数al</span><br><span class="line">				je yeskey ;是“Y”</span><br><span class="line">				cmp al,&#39;N&#39;</span><br><span class="line">				je nokey ;是“N”</span><br><span class="line">				jne getkey</span><br><span class="line">				...</span><br><span class="line">yeskey: ...</span><br><span class="line">nokey:  ...</span><br></pre></td></tr></table></figure>



<h4 id="字符串输入的功能调用"><a href="#字符串输入的功能调用" class="headerlink" title="字符串输入的功能调用"></a>字符串输入的功能调用</h4><p>DOS功能调用INT 21H</p>
<p>功能号：AH=0AH</p>
<p>入口参数：DS:DX=缓冲区首地址</p>
<p>执行该功能调用时，用户按键，最后用回车确定</p>
<h4 id="缓冲区的定义"><a href="#缓冲区的定义" class="headerlink" title="缓冲区的定义"></a>缓冲区的定义</h4><ul>
<li>第一字节事先填入最多欲接收的字符个数（包括回车字符）</li>
<li>第二字节将存放实际输入的字符个数（不包括回车符）</li>
<li>第三字节开始将存放输入的字符串</li>
</ul>
<h4 id="按键判断的功能调用"><a href="#按键判断的功能调用" class="headerlink" title="按键判断的功能调用"></a>按键判断的功能调用</h4><p>功能号：AH=0BH</p>
<p>出口参数：AL=0，当前没有按键；AL=FFH，当前已经按键</p>
<p>功能：仅判断当前是否有按下的键，设置AL后退出</p>
<h5 id="按键判断：按任意键继续"><a href="#按键判断：按任意键继续" class="headerlink" title="按键判断：按任意键继续"></a>按键判断：按任意键继续</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getkey:mov ah,0bh</span><br><span class="line">			int 21h</span><br><span class="line">			or al,al ;al&#x3D;0?</span><br><span class="line">			jz getkey</span><br><span class="line">			; al&#x3D;0,没有按键，继续等待</span><br><span class="line">			;等同于 mov ah,01h</span><br><span class="line">						; int 21h</span><br></pre></td></tr></table></figure>





<h2 id="信息显示程序"><a href="#信息显示程序" class="headerlink" title="信息显示程序"></a>信息显示程序</h2><h3 id="信息显示"><a href="#信息显示" class="headerlink" title="信息显示"></a>信息显示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		.model small ;定义程序的存储模型</span><br><span class="line">		.stack ;定义堆栈段</span><br><span class="line">		.data ;定义数据段</span><br><span class="line">string db &quot;Hello, Everybody!&quot; ,0dh,0ah,&#39;$&#39;</span><br><span class="line">		;在数据段定义要显示的字符串</span><br><span class="line">		.code ;定义代码段</span><br><span class="line">		.startup ;程序起始点，建立DS、SS</span><br><span class="line">		mov dx, offset string ;指定字符串</span><br><span class="line">		mov ah, 9</span><br><span class="line">		int 21h ;利用功能调用显示信息</span><br><span class="line">		.exit 0 ;程序结束点，返回DOS</span><br><span class="line">		end ;汇编结束</span><br></pre></td></tr></table></figure>

<hr>








<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	;在数据段给出这个字符串形式的信息</span><br><span class="line">	.data	</span><br><span class="line">msg byte &#39;Hello,Assembly!&#39;,13,10,0	;13,10表示&#39;\n&#39;	</span><br><span class="line">	;0表示字符串的结尾（高级语言自动有）	定义要显示的字符串</span><br><span class="line">	;在代码段编写要显示字符串的程序</span><br><span class="line">	.code</span><br><span class="line">start:</span><br><span class="line">	mov ax, offset msg	;指定字符串的偏移地址，ax寄存器，显示的入口参数存放的地方</span><br><span class="line">	call dispmsg	;调用子程序显示信息</span><br><span class="line">	exit 0</span><br><span class="line">	end start</span><br></pre></td></tr></table></figure>





<h2 id="常量表达"><a href="#常量表达" class="headerlink" title="常量表达"></a>常量表达</h2><p>常量是一个确定的数值，可直接编码于指令代码中，不是保存在存储器中可变的便令啊</p>
<p>支持的多种常量表达形式</p>
<ul>
<li>常数：直接给出数值</li>
<li>字符和字符串：ASCII</li>
<li>符号常量</li>
<li>数值表达式</li>
</ul>
<p>符号名 <code>equ</code> &lt;字符串&gt;</p>
<p>数值表达式</p>
<p>加减乘除</p>
<p>数值作为地址，数值表达式成为地址表达式</p>
<ul>
<li><p>地址表达式只能使用加减</p>
</li>
<li><p>指示地址移动常量表示的若干个字节存储单元</p>
<p>地址+常量</p>
<p>地址-常量</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>算术表达式</th>
<th>67h-52h</th>
</tr>
</thead>
<tbody><tr>
<td>地址表达式</td>
<td>var+4</td>
</tr>
</tbody></table>
<h3 id="数据表达程序"><a href="#数据表达程序" class="headerlink" title="数据表达程序"></a>数据表达程序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const1 byte 100,100d,01100100b,64h,&#39;d&#39;;不同进制和形式表达了同一个数值，机器指令中都是二进制</span><br><span class="line">;.00000000 64 64 64 64 64</span><br><span class="line">mov ax,offset const1	;从const1开始显示</span><br><span class="line">call dispmsg</span><br></pre></td></tr></table></figure>



<p>0DH回车，0AH换行</p>
<p>数字0用于字符串的结尾</p>
<h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>变量</p>
<ul>
<li>随程序运行会发生变化的数据</li>
<li>保存在可读写的主存空间</li>
</ul>
<p>变量的实质是主存单元的数据，因而可以改变</p>
<ul>
<li>变量需要先定义才能使用</li>
<li>变量具有属性方便应用</li>
</ul>
<p>变量表达主存数据，即存储器操作数，一般在程序的数据段中</p>
<h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><p>变量名    变量定义伪指令    初值表</p>
<p>变量名：用户起的标识符，表示首元素的<strong>逻辑地址</strong></p>
<p>变量定义伪指令，byte，word，dw，db等表示<strong>变量类型</strong></p>
<p>变量初值表是用逗号分隔的一个或多个参数，表示<strong>变量初值</strong>，相当于高级语言的数组</p>
<p><strong>主要的变量定义伪指令</strong></p>
<table>
<thead>
<tr>
<th>BYTE：字节</th>
<th>分配一个或多个字节单元，每个数据是8位、字节量</th>
<th>char</th>
</tr>
</thead>
<tbody><tr>
<td>WORD：字</td>
<td>分配一个或多个字单元，每个数据是16位、字量</td>
<td>short</td>
</tr>
<tr>
<td>DWORD：双字</td>
<td>分配一个或多个双字单元，每个数据是32位、双字量</td>
<td>long</td>
</tr>
</tbody></table>
<h4 id="变量定义的初值表"><a href="#变量定义的初值表" class="headerlink" title="变量定义的初值表"></a>变量定义的初值表</h4><p>1q变量定义是申请存储空间</p>
<ul>
<li>同时还可以进行存储单元初始化</li>
<li>即用初值表赋予变量初值</li>
</ul>
<p>初值表可以有一个或多个参数，多个参数用逗号分隔</p>
<ul>
<li><p>各种形式的常量</p>
</li>
<li><p>使用”?”表示初值不确定，即未赋初值</p>
</li>
<li><p>使用复制操作符<code>DUP</code>表示多个相同数值</p>
<p>格式：重复次数    DUP(重复参数)</p>
</li>
</ul>
<p>变量定义之后</p>
<ul>
<li>分配了存储空间</li>
<li>赋予了初值（也可不）</li>
<li>创建了变量名，可以获知变量的地址和类型</li>
</ul>
<h3 id="八位字节变量定义"><a href="#八位字节变量定义" class="headerlink" title="八位字节变量定义"></a>八位字节变量定义</h3><ul>
<li>8位无符号整数0~255</li>
<li>8位补码表示有符号整数：-128~+127</li>
<li>一个字符（ASCII）</li>
<li>压缩BCD：0~99</li>
<li>非压缩：0~9</li>
</ul>
<p><strong>定义字符串要使用字节变量定义BYTE</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg byte &#39;Hello&#39;,13,10,0</span><br><span class="line">const1 byte 100,64h,&#39;d&#39;</span><br><span class="line">const6 byte 4*4,34h+24</span><br><span class="line">bvar byte ?;表示初值不定，一般用0填充</span><br><span class="line">bvar1 byte 5 dup(&#39;$&#39;);重复五个</span><br></pre></td></tr></table></figure>

<p>可以用变量名来访问首元素，然后偏移地址来访问后面的元素</p>
<h3 id="十六位字变量定义"><a href="#十六位字变量定义" class="headerlink" title="十六位字变量定义"></a>十六位字变量定义</h3><ul>
<li>16位无符号整数：0~65535</li>
<li>16位补码表示的有符号整数：-32768~+32767</li>
<li>16位段地址</li>
<li>16位偏移地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wvar1 word 0,-32768,65535;每一个值都是字类型，两个字节</span><br><span class="line">wvar2 word ?</span><br><span class="line">minint &#x3D; 10</span><br><span class="line">wvar3 word 5 dup(minint)</span><br></pre></td></tr></table></figure>

<ul>
<li>16位变量定义，使用word伪指令，每个数据是一个字量，占用两个存储单元</li>
<li>变量定义的参数可以是有符号数，也可是无符号数</li>
</ul>
<h3 id="三十二位双字变量定义"><a href="#三十二位双字变量定义" class="headerlink" title="三十二位双字变量定义"></a>三十二位双字变量定义</h3><p>除了一些数字的表达，还有就是32位逻辑地址（含十六位段地址和十六位偏移地址）</p>
<h4 id="多字节数据的存储顺序"><a href="#多字节数据的存储顺序" class="headerlink" title="多字节数据的存储顺序"></a>多字节数据的存储顺序</h4><p>字节编址的主存储器</p>
<p>最小的存储单位：二进制位（比特bit）</p>
<p>8个二进制位是一个字节</p>
<p>一个存储单元保存一个字节量数据</p>
<p>一个存储单元对应一个存储器地址</p>
<p>都有一个唯一的物理地址与之对应</p>
<p>多个字节数据顺序逐个存放在主存相邻单元</p>
<p>从低地址到高地址开始存储</p>
<p>8086最低字节的数据放在最低的地址</p>
<h3 id="定位伪指令"><a href="#定位伪指令" class="headerlink" title="定位伪指令"></a>定位伪指令</h3><p>定位伪指令控制数据的偏移地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORG 参数</span><br></pre></td></tr></table></figure>

<p>ORG伪指令是将当前偏移地址指针指向参数表达的偏移地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ORG 100h ;从100h处安排数据或程序</span><br><span class="line">ORG $+10 ;使偏移地址加10，即跳过10个字节空间</span><br><span class="line">; $ 表示当前偏移地址值</span><br></pre></td></tr></table></figure>



<p>地址操作符实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		org $+10</span><br><span class="line">array db 45,45h</span><br><span class="line">		.code</span><br><span class="line">		mov ax,seg array</span><br><span class="line">		mov ds,ax</span><br><span class="line">		mov bx,offset array ; 等价于lea bx,array</span><br><span class="line">		mov cl,array+4 ; 等价于mov cl,array[4]</span><br><span class="line">		mov ax,es:[2000h]</span><br></pre></td></tr></table></figure>



<h3 id="变量的地址属性"><a href="#变量的地址属性" class="headerlink" title="变量的地址属性"></a>变量的地址属性</h3><p>变量的定义可以：</p>
<ul>
<li>分配存储空间</li>
<li>赋初值</li>
<li>创建变量名</li>
</ul>
<p>定义后的变量名具有两类属性</p>
<ul>
<li>地址属性：首个变量所在存储单元的逻辑地址</li>
<li>类型属性：变量定义的数据单位</li>
</ul>
<h4 id="变量的地址属性及地址操作符"><a href="#变量的地址属性及地址操作符" class="headerlink" title="变量的地址属性及地址操作符"></a>变量的地址属性及地址操作符</h4><p>变量的地址属性指所在存储单元的逻辑地址，含有段基地址和偏移地址</p>
<p>通过地址操作符获得变量的地址属性值</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>[ ]</td>
<td>括起来的表达式作为存储器地址指针</td>
<td></td>
</tr>
<tr>
<td>$</td>
<td>返回当前偏移地址</td>
<td></td>
</tr>
<tr>
<td>OFFSET 名字/标号</td>
<td>返回变量名所在段的偏移地址</td>
<td></td>
</tr>
<tr>
<td>SEG 名字/标号</td>
<td>返回段基地址（实地址存储模型）</td>
<td></td>
</tr>
<tr>
<td>:</td>
<td>采用指定的段地址寄存器</td>
<td></td>
</tr>
</tbody></table>
<p>数据段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bvar byte 12h, 34h</span><br><span class="line">		org $ + 10 ;org指定变量存放位置的指令</span><br><span class="line">		;当前地址(00000002H)+10,等于0000000CH</span><br><span class="line">array word 1,2,3,4,5,6,7,8,9,10</span><br><span class="line">;从0000000C开始存储</span><br><span class="line">wvar word 5678h</span><br><span class="line">		arr_size &#x3D; $-array;计算出从当前到ARRAY变量所占存储空间，array代表一组变量的首地址，数据段中使用变量名代表其偏移地址</span><br><span class="line">		arr_len &#x3D; arr_size&#x2F;2;计算变量个数</span><br><span class="line">dvar dword 9abcdef0h</span><br></pre></td></tr></table></figure>



<p>代码段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov al, bvar ;al&#x3D;12h</span><br><span class="line">; bvar 等同于[bvar]，把bvar所指的第一个数据赋值给al</span><br><span class="line">mov ah, bavr+1 ;ah&#x3D;34h</span><br><span class="line">;代码段中使用变量名，代表其首个数据（变量值），变量名加减常量指向首个数据的前后单元</span><br><span class="line">mov bx, wvar[2] ;变量名[n]&#x3D;变量名+n，n表示n个存储单元，指向首个数据的前后单元</span><br><span class="line">; 取出wvar首地址后两个单元后的数据赋值给bx</span><br><span class="line">mov ex, arr_len ;变量个数</span><br><span class="line">mov dx, $ ;在代码段中出现依然表示当前的偏移地址，表示当前这条指令所在的偏移地址</span><br><span class="line">mov si, offset dvar ;获得变量所在的偏移地址</span><br><span class="line">mov di, [si] ;通过地址获得变量值，si作为地址的</span><br><span class="line">mov bp, dvar ;直接获得变量</span><br></pre></td></tr></table></figure>

<h4 id="变量的类型属性"><a href="#变量的类型属性" class="headerlink" title="变量的类型属性"></a>变量的类型属性</h4><p>数据单位，字节数</p>
<p>类型操作符使用变量名的类型属性</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>类型名 PTR 名字/标号</td>
<td>将变量名按照指定的类型使用，具有指定的类型</td>
</tr>
<tr>
<td>THIS 类型名</td>
<td>操作数具有汇编时的当前逻辑地址，但具有指定的类型</td>
</tr>
<tr>
<td>TYPE 名字/标号</td>
<td>返回占有字节空间的字量数值</td>
</tr>
<tr>
<td>LENGTHOF 变量名</td>
<td>返回整个变量的数据项数</td>
</tr>
<tr>
<td>SIZEOF 变量名</td>
<td>返回整个变量占用的字节数</td>
</tr>
</tbody></table>
<p>PTR</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov al,byte ptr w_var ;w_var是一个字面量</span><br><span class="line">jmp far ptr n_label ;n_label是一个标号</span><br><span class="line">;可以临时改变名字或标号的类型</span><br></pre></td></tr></table></figure>



<p>THIS类型名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b_var equ THIS byte ; 按字节访问变量b_var,但与W_var的地址相同</span><br><span class="line">w_var dw 10 dup(0) ;按字访问变量w_var</span><br></pre></td></tr></table></figure>



<p>数据段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bvar byte 12h, 34h</span><br><span class="line">		org $ + 10 ;org指定变量存放位置的指令</span><br><span class="line">		;当前地址(00000002H)+10,等于0000000CH</span><br><span class="line">array word 1,2,3,4,5,6,7,8,9,10</span><br><span class="line">;从0000000C开始存储</span><br><span class="line">wvar word 5678h</span><br><span class="line">		arr_size &#x3D; $-array;计算出从当前到ARRAY变量所占存储空间，array代表一组变量的首地址，数据段中使用变量名代表其偏移地址</span><br><span class="line">		arr_len &#x3D; arr_size&#x2F;2;计算变量个数</span><br><span class="line">dvar dword 9abcdef0h</span><br></pre></td></tr></table></figure>

<p>代码段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov eax, dword ptr array ;定义为字类型的array，但是以双字类型访问，这里使用的是eax32位寄存器</span><br><span class="line">mov bx, type bvar ;获得字节变量类型值，返回1，如果是word，2；dword，4</span><br><span class="line">mov si, lengthof array ;获得变量数据个数</span><br><span class="line">mov di, sizeof array ;获得变量所占的存储空间个数</span><br><span class="line">mov bp, arr_size ;</span><br><span class="line">call disprd ;显示寄存器内容</span><br></pre></td></tr></table></figure>



<h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><h3 id="指令及其操作数"><a href="#指令及其操作数" class="headerlink" title="指令及其操作数"></a>指令及其操作数</h3><p>指令有两部分：操作码和操作数</p>
<p>操作码：处理器要执行的操作</p>
<p>不可缺少，助记符表示</p>
<p>操作数：指令执行的参与者</p>
<p>各种操作的对象，需要通过地址指示</p>
<h3 id="寻址方式详解"><a href="#寻址方式详解" class="headerlink" title="寻址方式详解"></a>寻址方式详解</h3><p>通过地址访问数据或指令</p>
<p>数据寻址：</p>
<ul>
<li>指令执行过程中，访问所需要操作的数据（操作数）</li>
</ul>
<p>指令寻址：</p>
<ul>
<li>一条指令执行后，确定执行的下一条指令的位置</li>
</ul>
<h3 id="数据寻址方式"><a href="#数据寻址方式" class="headerlink" title="数据寻址方式"></a>数据寻址方式</h3><p>数据来自主存储器 –&gt; <strong>存储器寻址</strong></p>
<p>存储器是专门用于存放数据和指令的</p>
<p>通过数据所在的单元地址，找到存储器中的数据</p>
<p>数据已经保存在指令代码中 –&gt; <strong>立即数寻址</strong></p>
<p>某些指令当中已经包含了它所需的操作数</p>
<p>这样的操作数，把指令代码取出来，就已经把所需的操作数取出来了</p>
<p>从寄存器中获得所需的操作数 –&gt; <strong>寄存器寻址</strong></p>
<p>sumup</p>
<ul>
<li>立即数寻址——数据在指令代码中，用<strong>常量</strong>表示</li>
<li>寄存器寻址——数据在寄存器中，用<strong>寄存器名</strong>表示</li>
<li>存储器寻址——数据在主存中，用<strong>存储器地址</strong>代表</li>
</ul>
<h3 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h3><p>操作数从指令代码中得到，立即数imm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax, 33221100H ;imm,直接写出</span><br><span class="line"></span><br><span class="line">const &#x3D; 64</span><br><span class="line">bvar byte 87h, 49h</span><br><span class="line">dvar dword 12345678H, 12</span><br><span class="line">.code</span><br><span class="line">mov al, 12h ;十六进制常数</span><br><span class="line">mov ah, &#39;d&#39; ;字符</span><br><span class="line">labl: mov bx, -1 ;十进制补码</span><br><span class="line">mov cx, const ;符号常量</span><br><span class="line">mov dx, const*4&#x2F;type dvar ;表达式</span><br><span class="line">mov si, offset bvar ;变量的偏移地址</span><br><span class="line">mov di, labl ;标号的偏移地址；；代码段使用标号名代表其偏移地址</span><br><span class="line">mov bvar, 01001100b ;立即数本身没有类型，看dest的类型</span><br><span class="line">mov dvar+4, 12h ; 12h就是个双字类型</span><br></pre></td></tr></table></figure>

<p>立即数寻址：</p>
<ul>
<li>操作数紧跟操作码，是机器代码的一部分</li>
<li>操作数从指令代码中得到，即立即数imm</li>
</ul>
<p>立即数寻址方式只用于源操作数src</p>
<ul>
<li>常用来给寄存器和存储单元赋值</li>
<li>用常量形式直接表达</li>
</ul>
<h3 id="寄存器寻址reg"><a href="#寄存器寻址reg" class="headerlink" title="寄存器寻址reg"></a>寄存器寻址reg</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov bx, ax ;dest和src都是寄存器</span><br><span class="line">mov al, 12</span><br><span class="line">mov bvar, cl</span><br><span class="line">mov edi, si ;必须是同样类型的寄存器</span><br></pre></td></tr></table></figure>



<p>寄存器寻址：</p>
<ul>
<li>操作数存放在处理器的内部寄存器中</li>
<li>用寄存器名表示它的内容</li>
</ul>
<p>寄存器寻址方式简单快捷，最常使用</p>
<ul>
<li>绝大多是指令采用通用寄存器</li>
<li>部分指令支持专用寄存器（如段寄存器）</li>
</ul>
<p>执行速度很快</p>
<h3 id="存储器寻址"><a href="#存储器寻址" class="headerlink" title="存储器寻址"></a>存储器寻址</h3><p>操作数在主存中，通过存储器覅之指示</p>
<ul>
<li><p>指令代码表达形式地址</p>
</li>
<li><p>由形式地址结合规则经过计算得到有效地址EA（Effective Address）</p>
<p>处理器将有效地址转换为物理地址访问存储单元</p>
<p>操作码    寻址方式    形式地址</p>
<p>​                             ||</p>
</li>
</ul>
<p>​                                有效地址</p>
<p>​                                      ||</p>
<p>​                                  操作数</p>
<p>重点，获得有效地址</p>
<h4 id="存储器的逻辑地址"><a href="#存储器的逻辑地址" class="headerlink" title="存储器的逻辑地址"></a>存储器的逻辑地址</h4><p>存储器使用逻辑地址</p>
<ul>
<li>段寄存器指示段基地址<ul>
<li>绝大部分情况使用默认规定吗，无需表达</li>
<li>有时候需要显式说明（成为段超越）</li>
</ul>
</li>
<li>偏移地址由各种存储器寻址方式计算<ul>
<li>称为有效地址EA</li>
</ul>
</li>
</ul>
<p>逻辑地址 = 段基地址 : 偏移地址</p>
<h4 id="段寄存器指示段基地址"><a href="#段寄存器指示段基地址" class="headerlink" title="段寄存器指示段基地址"></a>段寄存器指示段基地址</h4><p>绝大多是默认规定</p>
<ul>
<li>读取指令，一定是代码段CS</li>
<li>堆栈操作，针对堆栈段SS</li>
<li>读写数据，默认在数据段DS</li>
</ul>
<p>有时候需要显式说明（段超越）</p>
<ul>
<li>使用段超越指令前缀（段寄存器后跟冒号）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CS: DS: SS: ES:</span><br></pre></td></tr></table></figure>



<p>段寄存器的默认和超越</p>
<table>
<thead>
<tr>
<th align="center">访问存储器方式</th>
<th align="center">默认</th>
<th align="center">可超越</th>
<th align="center">偏移地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">读取指令</td>
<td align="center">CS</td>
<td align="center">无</td>
<td align="center">IP</td>
</tr>
<tr>
<td align="center">堆栈操作</td>
<td align="center">SS</td>
<td align="center">无</td>
<td align="center">SP</td>
</tr>
<tr>
<td align="center">一般访问数据</td>
<td align="center">DS</td>
<td align="center">CS ES SS FS GS</td>
<td align="center">有效地址EA</td>
</tr>
<tr>
<td align="center">BP/SP基址的数据访问</td>
<td align="center">SS</td>
<td align="center">CS ES DS FS GS</td>
<td align="center">有效地址EA</td>
</tr>
<tr>
<td align="center">串指令的src</td>
<td align="center">DS</td>
<td align="center">CS ES SS FS GS</td>
<td align="center">SI</td>
</tr>
<tr>
<td align="center">串指令的dest</td>
<td align="center">ES</td>
<td align="center">无</td>
<td align="center">DI</td>
</tr>
</tbody></table>
<p>16位有效地址的组成</p>
<p>基址寄存器+变址寄存器+位移量</p>
<p>​       ||                   ||              ||</p>
<p> BX或BP         SI或DI     8或16位有符号值</p>
<p> B：Base        I：Index</p>
<p>BX+SI+80h</p>
<h4 id="直接寻址方式"><a href="#直接寻址方式" class="headerlink" title="直接寻址方式"></a>直接寻址方式</h4><p>直接寻址：有效地址只有位移量部分，直接包含在指令代码中</p>
<p>有效地址在指令中直接给出，默认的段地址在DS段寄存器，可用段超越前缀表示</p>
<ul>
<li>用变量名（或加[ ]）表示偏移地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[2000h] ; AX&lt;-DS:[2000h]</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count word 4050h</span><br><span class="line">mov cx, count</span><br><span class="line">mov cx, [count]</span><br><span class="line">mov cx, ds:[4050h];count这个数据是在代码段中的</span><br><span class="line">;有效地址4050h，操作完成获得单元存储的数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bvar byte 87h,49h</span><br><span class="line">wvar word 1234h,12</span><br><span class="line">mov cl, bvar ;取出偏移量为0的地址的数据</span><br><span class="line">mov dx, dvar</span><br><span class="line">mov bvar+1, dh ;将dh中的内容推送到bvar+1地址所指的单元</span><br><span class="line"></span><br><span class="line">mov dvar+4, dvar ;非法操作，不可主存到主存</span><br></pre></td></tr></table></figure>



<p>sumup</p>
<p>存储器的直接寻址</p>
<ul>
<li>指令代码中直接给出有效地址</li>
</ul>
<p>直接寻址常用于存取变量</p>
<ul>
<li>直接使用变量名表达：变量名</li>
<li>变量名加减一个常量：变量名+n    变量名-n</li>
<li>用中括号：[变量名]     变量名[n]</li>
</ul>
<p>直接寻址的操作数具有变量定义的类型</p>
<ul>
<li>又是需要要ptr操作符进行类型转换</li>
</ul>
<p>用于存取变量，比立即数寻址要慢</p>
<h4 id="寄存器间接寻址方式"><a href="#寄存器间接寻址方式" class="headerlink" title="寄存器间接寻址方式"></a>寄存器间接寻址方式</h4><p>有效地址存放在基址寄存器BX或变址寄存器SI、DI中</p>
<p>默认的段地址是DS段寄存器，可使用段超越前缀改变</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[si] ; ax&lt;-DS:[SI]</span><br></pre></td></tr></table></figure>

<p>操作数来自主存</p>
<p>有效地址放在寄存器中</p>
<p>寄存器内容=偏移地址=有效地址</p>
<ul>
<li>用[寄存器]表达</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov dx,[bx] ;字量传送 </span><br><span class="line">;bx中的内容不是操作数，而是操作数的有效地址，把这个地址给处理器，让处理器按照这个有效地址来找到内存单元，把单元中的数据取出，送达给dx</span><br><span class="line">mov cx,[si] </span><br><span class="line">mov [edi],al ;字节量 </span><br><span class="line">;把al中的数据送到edi所指的存储单元中，edi中的内容是作为有效地址的</span><br></pre></td></tr></table></figure>

<p>寄存器间接寻址的数据</p>
<p>由另一个操作数的存储器或变量类型决定</p>
<p>只能表明要从寄存器所指的内存单元中去访问数据，但是并不决定这次访问的数据量</p>
<p>数据量大小由另一个操作数决定</p>
<p>即由没有比括起来的寄存器决定</p>
<h5 id="寄存器间接寻址未说明数据类型"><a href="#寄存器间接寻址未说明数据类型" class="headerlink" title="寄存器间接寻址未说明数据类型"></a>寄存器间接寻址未说明数据类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov [bx], 100 ;错误，数据类型不明确</span><br><span class="line">mov byte ptr [bx],100</span><br><span class="line">;立即数没有类型，需要显式说明</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;字符串复制</span><br><span class="line">srcmsg byte &#39;Try your best&#39;,0</span><br><span class="line">dstmsg byte sizeof srcmsg dup(?) ;定义了一样的长度,单元个数</span><br><span class="line">mov cx, lengthof srcmsg ;获取字符的长度</span><br><span class="line">mov si, offset srcmsg ;获取当前偏移地址</span><br><span class="line">mov di, offset dstmsg</span><br><span class="line">mov al, [si] ; 去源串一个字符给al</span><br><span class="line">mov [di], al ; 将al传送给目的串位置</span><br><span class="line">add si, 1</span><br><span class="line">add di, 1</span><br><span class="line">again: mov al, [si]</span><br><span class="line">		;...</span><br><span class="line">		loop again</span><br></pre></td></tr></table></figure>

<p>有点类似指针的操作     </p>
<p>存储器的寄存器间接寻址</p>
<ul>
<li>有效地址通过寄存器提供</li>
</ul>
<p>方便对数组的元素或字符串的字符进行操作</p>
<ul>
<li>数组（字符串）的地址赋值给寄存器</li>
<li>增减寄存器值指向不同的元素</li>
</ul>
<p>寄存器间接寻址的操作数没有类型</p>
<ul>
<li>其类型由另一个操作数的寄存器或变量类型决定</li>
<li>若另一个操作数也无类型，需要显式说明</li>
</ul>
<p>与寄存器寻址的不同，寄存器寻址，寄存器中放的就已经是我们需要的操作数了，而间接是，寄存器中放的仅仅是操作数的有效地址，需要通过它来指向，存储单元，找到操作数</p>
<h4 id="寄存器相对寻址方式"><a href="#寄存器相对寻址方式" class="headerlink" title="寄存器相对寻址方式"></a>寄存器相对寻址方式</h4><p>有效地址是寄存器内容与位移量之和，寄存器可以是BX/BP或SI/DI</p>
<ul>
<li>寄存器要用中括号括起来</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;无类型</span><br><span class="line">mov si, [bx+4] ;位移量：4</span><br><span class="line">mov di, [bp-08h] ;-08h</span><br><span class="line">;count定义的类型</span><br><span class="line">mov ax, count[si] ;等价于[si+count],[count][si] 位移量：count</span><br><span class="line">;表示变量所在的偏移地址用作相对寻址的位移量</span><br></pre></td></tr></table></figure>

<p>主存采用字节编址</p>
<p>地址的加减以主存字节单元为单位</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srcmsg byte &#39;Try your best&#39;,0</span><br><span class="line">dstmsg byte sizeof srcmsg dup(?)</span><br><span class="line">mov cx, lengthof srcmsg ;控制循环次数</span><br><span class="line">mov bx, 0 ;初值为0 </span><br><span class="line">mov al, srcmsg[bx];</span><br><span class="line">mov dstmsg[bx], al;</span><br><span class="line">add bx, 1</span><br><span class="line">again: mov al, srcmsg[bx] ;传送一个字符</span><br><span class="line">		;..</span><br><span class="line">		loop again</span><br></pre></td></tr></table></figure>

<p>sumup</p>
<p>存储器的寄存器相对寻址</p>
<ul>
<li>有效地址通过寄存器内容与位移量相加获得</li>
</ul>
<p>方便对数组元素进行操作，</p>
<ul>
<li>数组的首地址作为位移量</li>
<li>寄存器赋值0，或元素个数</li>
<li>增减寄存器值指向不同的元素</li>
</ul>
<p>位移量是数字常量，寄存器相对寻址的操作数没有类型</p>
<ul>
<li>位移量用变量名表示，具有变量的类型</li>
</ul>
<h4 id="基址变址寻址方式"><a href="#基址变址寻址方式" class="headerlink" title="基址变址寻址方式"></a>基址变址寻址方式</h4><p>有效地址由基址寄存器（BX或BP）的内容加上变址寄存器（SI或DI）的内容构成：</p>
<p>有效地址=BX/BP+SI/DI</p>
<p>段地址对应BX基址寄存器默认是DS，对应BP基址寄存器默认是SS；可用段超越前缀</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,[bp+di]</span><br><span class="line">mov ax,ds:[bp+di]</span><br></pre></td></tr></table></figure>



<h4 id="相对基址变址寻址方式"><a href="#相对基址变址寻址方式" class="headerlink" title="相对基址变址寻址方式"></a>相对基址变址寻址方式</h4><p>有效地址是基址寄存器(BX/BP),变址寄存器(SI/DI)与一个8位或16位位移量之和</p>
<p>有效地址=BX/BP+SI/DI+8/16位位移量</p>
<p>段地址对应BX基址寄存器默认是DS,对应BP基址寄存器默认是SS;可用段超越前缀</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax,[bx+si+06h]</span><br></pre></td></tr></table></figure>



<img src="/2020/01/08/assembly/image-20191118181235109.png" alt="image-20191118181235109" style="zoom: 50%;">



<h2 id="数据传送类指令"><a href="#数据传送类指令" class="headerlink" title="数据传送类指令"></a>数据传送类指令</h2><p>数据传送</p>
<ul>
<li>把数据从一个位置传送到另一个位置</li>
</ul>
<p>除标志寄存器传送指令外，均不影响状态标志</p>
<p><code>MOV</code> <code>XCHG</code> <code>PUSH</code> <code>POP</code> <code>LEA</code></p>
<h3 id="MOV-1"><a href="#MOV-1" class="headerlink" title="MOV"></a>MOV</h3><p>传送是拷贝传送</p>
<p>把一个字节、字或双字的操作数从源位置传送至目的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov reg&#x2F;mem,imm</span><br><span class="line">mov reg&#x2F;mem&#x2F;seg,reg</span><br><span class="line">mov reg&#x2F;seg,mem</span><br><span class="line">mov r16&#x2F;m16,seg</span><br></pre></td></tr></table></figure>

<p>禁止主存到主存的数据传送</p>
<h4 id="立即数传送"><a href="#立即数传送" class="headerlink" title="立即数传送"></a>立即数传送</h4><p><code>mov reg/mem,imm</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;寄存器reg为dest</span><br><span class="line">mov al,200 ;i8</span><br><span class="line">mov ax,200 ;i16</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;存储器mem为目的操作数</span><br><span class="line">mov bvar,byte ptr 200 ;i8</span><br><span class="line">mov [bx],word ptr 200 ;i16,寄存器间接寻址，没有明确操作类型</span><br></pre></td></tr></table></figure>

<hr>
#### 寄存器传送

<p><code>mov reg/mem/seg,reg</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;寄存器reg为目的操作数</span><br><span class="line">mov al,ah ;r8</span><br><span class="line">mov ax,bx ;r16</span><br><span class="line">;要求操作数类型一致</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;存储器mem为dest</span><br><span class="line">mov bvar, cl ;r8</span><br><span class="line">mov [bx], cx ;r16</span><br><span class="line">;寄存器本身决定了传送的数据类型</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;段寄存器seg为dest</span><br><span class="line">mov ds, bx</span><br></pre></td></tr></table></figure>



<h4 id="存储器传送"><a href="#存储器传送" class="headerlink" title="存储器传送"></a>存储器传送</h4><p><code>mov reg/seg, mem</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;寄存器reg为dest</span><br><span class="line">mov dl ,bvar ;m8</span><br><span class="line">mov dx ,[bx] ;m16</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;段寄存器seg为dest</span><br><span class="line">mov ds ,wvar ;m16</span><br><span class="line">mov es ,[bx] ;m16</span><br><span class="line">mov ss ,[bp+8] ;m16</span><br><span class="line">;由于16位的段寄存器决定的</span><br></pre></td></tr></table></figure>

<h4 id="段寄存器传送"><a href="#段寄存器传送" class="headerlink" title="段寄存器传送"></a>段寄存器传送</h4><p><code>mov r16/m16 ,seg</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;寄存器r16为目的操作数</span><br><span class="line">mov ax,ds</span><br><span class="line">mov dx,es</span><br><span class="line">mov si,fs</span><br><span class="line">mov di,gs</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;存储器m16为dest</span><br><span class="line">mov wvar,ds</span><br><span class="line">mov [bx],ss</span><br><span class="line">mov [si-8],cs</span><br><span class="line">mov [bp+8],cs</span><br></pre></td></tr></table></figure>



<h4 id="非法传送"><a href="#非法传送" class="headerlink" title="非法传送"></a>非法传送</h4><ol>
<li><p>两个操作数的类型不一致</p>
<p>源操作数是字节,而目的操作数是字</p>
</li>
<li><p>两个操作数不能都是存储器</p>
<p>主存之间的直接传送是不允许的</p>
</li>
<li><p>段寄存器的操作有一些限制</p>
<p>段寄存器属专用寄存器,操作能力有限</p>
</li>
</ol>
<h3 id="PUSH和POP"><a href="#PUSH和POP" class="headerlink" title="PUSH和POP"></a>PUSH和POP</h3><p>堆栈操作指令</p>
<p>堆栈一个特殊的存储区域</p>
<ul>
<li>存取原则：先进后出FILO</li>
</ul>
<p>基本操作入栈出栈</p>
<p><strong>处理器的堆栈向下生长</strong></p>
<p><img src="/2020/01/08/assembly/img%5Cimage-20191029190910107.png" alt="image-20191029190910107"></p>
<p>数据压入堆栈、SP逐渐减小</p>
<p>数据弹出堆栈、SP逐渐增大</p>
<h4 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUSH r16&#x2F;m16&#x2F;i16&#x2F;seg</span><br><span class="line">;SP&#x3D;SP-2</span><br><span class="line">;SS:[SP]&#x3D;r16&#x2F;m16&#x2F;i16&#x2F;seg</span><br></pre></td></tr></table></figure>

<ul>
<li>先将SP减小作为当前栈顶</li>
<li>后将src送到当前栈顶</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;进栈指令</span><br><span class="line">push ax</span><br><span class="line">;等价于</span><br><span class="line">sub sp,2</span><br><span class="line">mov [sp],ax</span><br></pre></td></tr></table></figure>



<h4 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POP r16&#x2F;m16&#x2F;seg</span><br><span class="line">;r16&#x2F;m16&#x2F;seg&#x3D;SS:[SP]</span><br><span class="line">;SP&#x3D;SP+2</span><br></pre></td></tr></table></figure>

<ul>
<li>先将栈顶数据传送到目的操作数</li>
<li>后将SP增加作为当前栈顶</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;出栈指令</span><br><span class="line">POP ax</span><br><span class="line">;等价于</span><br><span class="line">mov ax,[sp]</span><br><span class="line">add sp,2</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.data</span><br><span class="line">ten &#x3D; 10</span><br><span class="line">wvar word 6776h, 1234h</span><br><span class="line">.code</span><br><span class="line">mov ax,wvar+2</span><br><span class="line">push ax</span><br><span class="line">push word ptr ten</span><br><span class="line">push wvar</span><br><span class="line">pop ax ;栈顶数据弹出到ax</span><br><span class="line">pop wvar+2</span><br><span class="line">mov bx,wvar+2 ;栈顶数据弹到wvar+2</span><br><span class="line">pop cx ;栈顶数据弹出到cx</span><br></pre></td></tr></table></figure>



<h2 id="地址传送指令"><a href="#地址传送指令" class="headerlink" title="地址传送指令"></a>地址传送指令</h2><h3 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h3><p>装入有效地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lea dx,mem;把偏移地址存入dx</span><br></pre></td></tr></table></figure>

<p>地址传送指定LEA（Load Effective Address）</p>
<p>地址传送指令获取存储器操作数的地址</p>
<p><code>LEA r16/r32,mem</code></p>
<p>r16 &lt;– mem的有效地址EA（不需要类型一致）</p>
<p>把有效地址传送给寄存器</p>
<h4 id="LEA指令类似地址操作符OFFSET的作用"><a href="#LEA指令类似地址操作符OFFSET的作用" class="headerlink" title="LEA指令类似地址操作符OFFSET的作用"></a>LEA指令类似地址操作符OFFSET的作用</h4><p>LEA指令在执行时计算出偏移地址</p>
<p>OFFSET操作符在汇编阶段取得变量的偏移地址</p>
<p>OFFSET无需再执行时计算、指令执行速度更快</p>
<p>LEA指令能获取汇编阶段无法确定的偏移地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lea di,var</span><br><span class="line">mov di,offset var</span><br><span class="line">;功能相似</span><br></pre></td></tr></table></figure>



<h4 id="地址传送程序"><a href="#地址传送程序" class="headerlink" title="地址传送程序"></a>地址传送程序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wvar word 4142h;</span><br><span class="line">mov ax , wvar ; ax获得了wvar的值</span><br><span class="line">lea si , wvar ; si获得了wvar的地址</span><br><span class="line">mov bx , [si] ;寄存器间接寻址，根据si指向的地址，bx获得了wvar的值</span><br><span class="line">mov di , offset dvar ;di获得了wvar的地址</span><br><span class="line">mov cx , [di]</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lea dx , [si+di*4+100h]</span><br><span class="line">;lea指令在计算地址时，可进行加和位移操作，而offset不可</span><br></pre></td></tr></table></figure>



<p>sumup</p>
<ul>
<li><code>LEA</code>指令获得存储器操作数的有效地址<ul>
<li>在<code>LEA</code>指令执行时计算地址</li>
<li>对任何存储器寻址方式都可用</li>
</ul>
</li>
<li>对存储器的直接寻址<ul>
<li>建议使用<code>OFFSET</code>操作符在汇编阶段获得地址</li>
</ul>
</li>
<li>对存储器的其他寻址<ul>
<li>只能使用<code>LEA</code>指令获得地址</li>
</ul>
</li>
</ul>
<h2 id="算术类指令"><a href="#算术类指令" class="headerlink" title="算术类指令"></a>算术类指令</h2><h3 id="进位和溢出标志"><a href="#进位和溢出标志" class="headerlink" title="进位和溢出标志"></a>进位和溢出标志</h3><p>状态标志是处理器最基本的标志</p>
<ol>
<li>作为加减运算和逻辑运算的辅助结果</li>
<li>构成各种条件，实现程序分支</li>
</ol>
<table>
<thead>
<tr>
<th>11</th>
<th>10</th>
<th>9</th>
<th>8</th>
<th>7</th>
<th>6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody><tr>
<td>OF</td>
<td>DF</td>
<td>IF</td>
<td>TF</td>
<td>SF</td>
<td>ZF</td>
<td>0</td>
<td>AF</td>
<td>0</td>
<td>PF</td>
<td>1</td>
<td>CF</td>
</tr>
</tbody></table>
<h4 id="进位标志CF-Carry-Flag"><a href="#进位标志CF-Carry-Flag" class="headerlink" title="进位标志CF(Carry Flag)"></a>进位标志CF(Carry Flag)</h4><ul>
<li><p>当加减运算结果的最高有效位有进位（加法）或借位（减法）时，进位标志置1，即CF=1；否则CF=0</p>
</li>
<li><p>针对无符号整数，判断加减结果是否超出表达范围</p>
</li>
</ul>
<h4 id="溢出标志OF-Overflow-Flag"><a href="#溢出标志OF-Overflow-Flag" class="headerlink" title="溢出标志OF(Overflow Flag)"></a>溢出标志OF(Overflow Flag)</h4><ul>
<li>有符号数加减结果有溢出，则OF=1；否则OF=0</li>
<li>针对有符号整数，判断加减结果是否超出表达范围</li>
</ul>
<p>溢出会导致错误结果</p>
<p>判断：</p>
<ul>
<li>只用当两个相同符号数相加(含有两个不同符号数相减)</li>
<li>运算结果的符号与原数据相反时，产生溢出</li>
</ul>
<h4 id="进位和溢出的区别"><a href="#进位和溢出的区别" class="headerlink" title="进位和溢出的区别"></a>进位和溢出的区别</h4><p>进位标志反映无符号整数运算结果是否超出范围</p>
<ul>
<li>有进位，加上进位或借位后运算结果仍然正确</li>
</ul>
<p>溢出标志反映有符号整数运算结果是否超出范围</p>
<ul>
<li>有溢出，运算结果已经不正确</li>
</ul>
<p>处理器按照无符号整数求得结果</p>
<ul>
<li>设置进位标志CF</li>
<li>设置溢出标志OF</li>
</ul>
<p>有符号数，注意溢出</p>
<p>无符号数，注意进位</p>
<h3 id="零标志，符号标志和奇偶标志"><a href="#零标志，符号标志和奇偶标志" class="headerlink" title="零标志，符号标志和奇偶标志"></a>零标志，符号标志和奇偶标志</h3><h4 id="零标志ZF-Zero-Flag"><a href="#零标志ZF-Zero-Flag" class="headerlink" title="零标志ZF(Zero Flag)"></a>零标志ZF(Zero Flag)</h4><p>运算结果为0，则ZF=1，否则ZF=0</p>
<p>八位运算输出八位结果</p>
<h4 id="符号标志SF-Sign-Flag"><a href="#符号标志SF-Sign-Flag" class="headerlink" title="符号标志SF(Sign Flag)"></a>符号标志SF(Sign Flag)</h4><p>运算结果最高位为1，则SF=1；否则SF=0</p>
<p>看的是八位的运算结果而不是进位</p>
<h3 id="奇偶标志PF-Parity-Flag"><a href="#奇偶标志PF-Parity-Flag" class="headerlink" title="奇偶标志PF(Parity Flag)"></a>奇偶标志PF(Parity Flag)</h3><p>当运算结果最低字节中”1”的个数为<strong>0或偶数</strong>时，PF=1；否则PF=0</p>
<p>(仅最低8位”1”的个数)</p>
<p>eg:</p>
<table>
<thead>
<tr>
<th>8位加法运算及结果</th>
<th>CF</th>
<th>OF</th>
<th>ZF</th>
<th>SF</th>
<th>PF</th>
</tr>
</thead>
<tbody><tr>
<td>00111010+01111100=[0]10110110</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>10101010+01111100=[1]00100110</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>10000100+01111100=[1]00000000</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<h3 id="影响状态标志的指令"><a href="#影响状态标志的指令" class="headerlink" title="影响状态标志的指令"></a>影响状态标志的指令</h3><p>需要关注对标志影响的主要指令：</p>
<ul>
<li>加减运算指令</li>
<li>逻辑运算指令</li>
<li>移位运算指令·</li>
</ul>
<p>只用于影响标志的特殊指令1：比较指令<code>CMP</code></p>
<ul>
<li>进行减法运算</li>
<li>用于判断两个数据大小、是否相等</li>
</ul>
<p>只用于影响标志的特殊指令2：测试指令<code>TEST</code></p>
<ul>
<li>进行逻辑与运算</li>
<li>用于判断某位为0或为1等</li>
</ul>
<p>利用状态标志来判断转移分支和循环</p>
<h3 id="ADD指令"><a href="#ADD指令" class="headerlink" title="ADD指令"></a><code>ADD</code>指令</h3><p>加法指令</p>
<p>加减指令除了和差结果，进借位、溢出等状态标志、也是结果的一部分</p>
<ul>
<li>加法指令<code>ADD</code></li>
<li>带进位加法指令<code>ADC</code></li>
<li>增量指令<code>INC</code><ul>
<li>除了<code>INC</code>不影响进位标志<code>CF</code>外</li>
<li>其他指令按照定义影响全部状态标志位</li>
<li>按照运算结果相应设置各个状态标志位0/1</li>
</ul>
</li>
</ul>
<p><code>ADD</code></p>
<p>目的操作数加上源操作数，并送到目的操作数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ADD reg, imm&#x2F;reg&#x2F;mem ;reg &lt;- reg+imm&#x2F;reg&#x2F;mem</span><br><span class="line">ADD mem, imm&#x2F;reg ;mem &lt;- mem+imm&#x2F;reg</span><br></pre></td></tr></table></figure>

<ul>
<li>按照定义影响状态标志位</li>
<li>支持字节、字、双字数据的运算</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax, 0aafh ;</span><br><span class="line">add al, 27h ;8位加法，最高位是D7</span><br></pre></td></tr></table></figure>

<p><code>PF</code>标志只利用低8位结果</p>
<h4 id="大小写字母的转换"><a href="#大小写字母的转换" class="headerlink" title="大小写字母的转换"></a>大小写字母的转换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;确认是大写字母。+20h为小写字母</span><br><span class="line">add al, 20h; 20h &#x3D; &#39;a&#39; - &#39;A&#39;</span><br></pre></td></tr></table></figure>



<h3 id="SUB减法指令"><a href="#SUB减法指令" class="headerlink" title="SUB减法指令"></a><code>SUB</code>减法指令</h3><ul>
<li>减法指令<code>SUB</code></li>
<li>带借位减法指令<code>SBB</code></li>
<li>减量指令<code>DEC</code></li>
<li>求补指令<code>NEG</code></li>
<li>比较指令<code>CMP</code></li>
</ul>
<p><strong>除了<code>DEC</code>不影响CF标志外，其他按定义影响全部状态标志位</strong></p>
<h4 id="减法指令SUB"><a href="#减法指令SUB" class="headerlink" title="减法指令SUB"></a>减法指令<code>SUB</code></h4><p>目的操作数减去源操作数，所得差送到目的操作数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUB reg, imm&#x2F;reg&#x2F;mem </span><br><span class="line">SUB mem, imm&#x2F;reg</span><br></pre></td></tr></table></figure>

<p>按照定义影响状态标志位</p>
<p>支持一些数据运算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ax, aaffh;</span><br><span class="line">sub al, 27h;</span><br></pre></td></tr></table></figure>

<p>用<code>al</code>中的内容减去<code>27h</code>，再存在<code>al</code>中</p>
<h3 id="INC-DEC-NEG指令"><a href="#INC-DEC-NEG指令" class="headerlink" title="INC DEC NEG指令"></a><code>INC</code> <code>DEC</code> <code>NEG</code>指令</h3><h4 id="增量指令INC-increment"><a href="#增量指令INC-increment" class="headerlink" title="增量指令INC(increment)"></a>增量指令<code>INC</code>(increment)</h4><ul>
<li>只有一个操作数：寄存器或存储单元</li>
<li>对操作数+1，再将结果返回原处</li>
<li>用于计数器和地址指针的调整<ul>
<li>不影响进位CF标志，影响其他状态标志位</li>
</ul>
</li>
</ul>
<p>操作类似于<code>i++</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inc cx ;内容+1放回原寄存器</span><br><span class="line">inc word ptr[si] ;所指内容+1</span><br><span class="line">inc wvar ;mem</span><br><span class="line">inc wvar[di] ;wvar+id所指单元内容+1放回原位</span><br></pre></td></tr></table></figure>



<h4 id="减量指令DEC-decrement"><a href="#减量指令DEC-decrement" class="headerlink" title="减量指令DEC(decrement)"></a>减量指令<code>DEC</code>(decrement)</h4><ul>
<li>只有一个操作数：寄存器或存储单元</li>
<li>对操作数-1，再将结果返回原处</li>
<li>用于计数器和地址指针的调整<ul>
<li>不影响进位CF标志，影响其他状态标志位</li>
</ul>
</li>
</ul>
<p>操作类似于<code>i--</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dec cx ;内容-1放回原寄存器</span><br><span class="line">dec word ptr[si] ;所指内容-1</span><br><span class="line">dec wvar ;mem</span><br><span class="line">dec wvar[di] ;wvar-di所指单元内容-1放回原位</span><br></pre></td></tr></table></figure>



<p>配合操作可用作字符串的扫描</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg byte &quot;welcome&quot;,0 ;数据段</span><br><span class="line">mov cx, (lengthof msg)-1 ;保存字符个数，减去末尾的0</span><br><span class="line">dec cx;</span><br><span class="line">inc cx</span><br></pre></td></tr></table></figure>



<h4 id="求补指令NEG-negative"><a href="#求补指令NEG-negative" class="headerlink" title="求补指令NEG(negative)"></a>求补指令<code>NEG</code>(negative)</h4><ul>
<li>对操作数执行求补运算，即用0-操作数</li>
<li>对标志的影响和用零作减法的SUB指令一样</li>
<li>可用于对负数求补码或由补码求其绝对值</li>
</ul>
<p>操作类似<code>0-i</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">neg al</span><br><span class="line">neg byte ptr [bx]</span><br><span class="line">neg wvar [si]</span><br></pre></td></tr></table></figure>



<p>sumup</p>
<ul>
<li><code>INC</code>、<code>DEC</code>、<code>NEG</code>是加减运算的辅助指令<ul>
<li><code>INC</code>实现指针+1、不影响CF</li>
<li><code>DEC</code>实现指针-1、不影响CF</li>
<li><code>NEG</code>进行数据求补</li>
</ul>
</li>
<li>这些指令给出一个操作数的位置，既是源操作数也是目的操作数</li>
</ul>
<h3 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h3><p>针对二进制位进行操作、实现位控制的指令</p>
<ul>
<li>逻辑运算指令</li>
<li>移位指令</li>
<li>循环移位指令</li>
<li>······</li>
</ul>
<p>进行一位或若干位处理，采用位操作类指令</p>
<table>
<thead>
<tr>
<th>AND</th>
<th>OR</th>
<th>NOT</th>
<th>XOR</th>
<th>TEST</th>
</tr>
</thead>
<tbody><tr>
<td>与</td>
<td>或</td>
<td>非</td>
<td>异或</td>
<td>测试</td>
</tr>
</tbody></table>
<p>除了<code>NOT</code>指令不影响标志位，其他指令</p>
<ul>
<li>使<code>OF=CF=0</code></li>
<li>根据结果按定义影响<code>ZF</code>、<code>SF</code>和<code>PF</code></li>
</ul>
<p>都是按照二进制的位来进行与或非</p>
<h4 id="逻辑运算的屏蔽作用"><a href="#逻辑运算的屏蔽作用" class="headerlink" title="逻辑运算的屏蔽作用"></a>逻辑运算的屏蔽作用</h4><ul>
<li>AND复位0某些位（与0），不影响其他</li>
<li>OR置位1某些位（或1），不影响其他</li>
<li>XOR囚犯某些位（异或1），不影响其他</li>
</ul>
<p>同样也可用于大小写转换</p>
<p>大写字母的ASCII值第五位为0，小写字母为1</p>
<p>大写　=　小写　AND　DFH</p>
<p>小写　＝　大写　OR　20h</p>
<p>逻辑运算还可以用于清零</p>
<h3 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h3><ul>
<li>逻辑左移指令<code>SHL</code></li>
<li>逻辑右移指令<code>SHR</code></li>
<li>算术左移指令<code>SAL</code></li>
<li>算术右移指令<code>SAR</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHL reg&#x2F;mem, 1&#x2F;cl ;移位数据和移位位数</span><br><span class="line">SAL reg&#x2F;mem, 1&#x2F;cl</span><br><span class="line">;每位同时左移，最低为补0，最高位进入CF</span><br></pre></td></tr></table></figure>

<p>完成的操作是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AL &#x3D; 11110101B</span><br><span class="line">SHL AL ,1</span><br><span class="line">;执行后AL&#x3D;11101010B，CF&#x3D;1</span><br></pre></td></tr></table></figure>

<hr>
逻辑右移

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHR reg&#x2F;mem, 1&#x2F;cl</span><br><span class="line">;每位同时右移，最高位补0，最低位进入CF</span><br></pre></td></tr></table></figure>

<p>算术右移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SAR reg&#x2F;mem, 1&#x2F;cl</span><br><span class="line">;每位同时右移，最高位不变，最低位进入CF</span><br></pre></td></tr></table></figure>



<p>移位是以位为单位将数据向左或向右的移动</p>
<ul>
<li>左移指令<code>SHL</code>、<code>SAL</code>，两者相同</li>
<li>右移指令<code>SHR</code>、<code>SAR</code>，两者不同</li>
</ul>
<p>算术右移针对有符号数（补码）移位、以便保持最高位不变、即数据符号不变</p>
<h3 id="循环移位指令"><a href="#循环移位指令" class="headerlink" title="循环移位指令"></a>循环移位指令</h3><ul>
<li><p>不带进位循环左移指令<code>ROL</code>    </p>
</li>
<li><p>不带进位循环右移指令<code>ROR</code></p>
</li>
<li><p>带进位循环左移指令<code>RCL</code></p>
</li>
<li><p>带进位循环右移指令<code>RCR</code></p>
<p>R:Rotate    L:Left    R:Right    C:Carry flag</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROL reg&#x2F;mem, 1&#x2F;cl</span><br><span class="line">;同时左移，最高位循环进入最低位和CF</span><br><span class="line">;执行前AL&#x3D;11100101B</span><br><span class="line">ROL AL, 1</span><br><span class="line">;执行后AL&#x3D;11001011B，CF&#x3D;1，不带进位的循环左移</span><br><span class="line"></span><br><span class="line">ROR reg&#x2F;mem, 1&#x2F;cl</span><br><span class="line">;同时右移，最低为进入最高位和CF</span><br><span class="line"></span><br><span class="line">RCL reg&#x2F;mem, 1&#x2F;cl</span><br><span class="line">;CF作为附加位，各位同时左移，CF进入最低位，CF原来的值形成环，所以要知道CF的值</span><br><span class="line"></span><br><span class="line">RCR reg&#x2F;mem, 1&#x2F;CL</span><br><span class="line">;CF作为附加位，各位同时右移，最低位进入CF，CF原来的值形成环，所以要知道CF的值</span><br></pre></td></tr></table></figure>



<h3 id="中断指令INT"><a href="#中断指令INT" class="headerlink" title="中断指令INT"></a>中断指令INT</h3><h2 id="顺序程序结构"><a href="#顺序程序结构" class="headerlink" title="顺序程序结构"></a>顺序程序结构</h2><h3 id="移位实现乘法程序"><a href="#移位实现乘法程序" class="headerlink" title="移位实现乘法程序"></a>移位实现乘法程序</h3><ul>
<li>左移一位相当于数值乘以2</li>
<li>右移一位相当于数值除以2（余数在CF中）<ul>
<li>逻辑右移一位是无符号数除以2</li>
<li>算数右移一位是有符号数除以2</li>
</ul>
</li>
</ul>
<p>可以提高操作的速度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;data</span><br><span class="line">wvar word 34000</span><br><span class="line">;code</span><br><span class="line">xor eax,eax ;eax&#x3D;0</span><br><span class="line">mov ax,wvar ;ax&#x3D;要乘以10的无符号数</span><br><span class="line">shl eax,1 ;左移一位</span><br><span class="line">mov ebx,eax ;ebx&#x3D;eax*2</span><br><span class="line">shl eax,2 ;左移；两位</span><br><span class="line">add eax,ebx ;得到了一个乘以10</span><br></pre></td></tr></table></figure>

<p><code>mul eax,10</code></p>
<h2 id="分支程序结构"><a href="#分支程序结构" class="headerlink" title="分支程序结构"></a>分支程序结构</h2><h3 id="指令寻址方式"><a href="#指令寻址方式" class="headerlink" title="指令寻址方式"></a>指令寻址方式</h3><p>通过地址访问数据或指令</p>
<ul>
<li>数据寻址：指令执行过程中，访问所需要操作的数据（操作数）</li>
<li>指令寻址：一条指令执行后，确定执行的下一条指令的位置</li>
</ul>
<ul>
<li>顺序寻址：IP自动增量指向下一条指令，顺序执行接着的下一条指令</li>
<li>跳转寻址：控制流程跳转（转移）到指定指令位置，实现程序分支、循环、调用等结构</li>
</ul>
<h4 id="顺序寻址：IP自动增量指向下一条指令"><a href="#顺序寻址：IP自动增量指向下一条指令" class="headerlink" title="顺序寻址：IP自动增量指向下一条指令"></a>顺序寻址：IP自动增量指向下一条指令</h4><p>顺序指向接着的下一条指令，CPU自己会</p>
<h4 id="跳转寻址"><a href="#跳转寻址" class="headerlink" title="跳转寻址"></a>跳转寻址</h4><h5 id="指令的相对寻址"><a href="#指令的相对寻址" class="headerlink" title="指令的相对寻址"></a>指令的相对寻址</h5><p>提供目标地址相对于当前指令指针IP的位移量</p>
<p>目标地址（转移后的IP）=当前IP+位移量</p>
<p>相对寻址都是段内转移</p>
<p>目标地址=目的地址=转移地址</p>
<h5 id="指令的直接寻址"><a href="#指令的直接寻址" class="headerlink" title="指令的直接寻址"></a>指令的直接寻址</h5><p>目标地址=指令操作数</p>
<p>理论上是可以段内或段间转移</p>
<h5 id="指令的间接寻址"><a href="#指令的间接寻址" class="headerlink" title="指令的间接寻址"></a>指令的间接寻址</h5><p>指示寄存器或存储单元</p>
<p>目标地址来自寄存器或存储单元、间接获得</p>
<ul>
<li>寄存器间接寻址：用寄存器来保存目标地址，找到寄存器的内容作为目标地址</li>
<li>存储器间接寻址：用存储单元保存目标地址</li>
</ul>
<h4 id="程序流程的控制转移"><a href="#程序流程的控制转移" class="headerlink" title="程序流程的控制转移"></a>程序流程的控制转移</h4><p>程序代码在代码段</p>
<ul>
<li>CS：指明代码段在主存中的段基地址</li>
<li>IP：给出将要执行指令的偏移地址</li>
</ul>
<p>指令顺序寻址，程序顺序执行，处理器自动增量</p>
<p>指令跳转寻址，程序控制转移，IP（CS）随之改变</p>
<p>控制转移类指令</p>
<p><code>JMP</code> jump指令</p>
<p><code>Jcc</code> 条件转移指令</p>
<p><code>LOOP</code>循环指令</p>
<h5 id="段内转移"><a href="#段内转移" class="headerlink" title="段内转移"></a>段内转移</h5><p>在当前代码段范围内的程序转移</p>
<ul>
<li>不需要更改CS，只需要改变IP（偏移地址）</li>
</ul>
<p>程序只有一个代码段，或者只在段内跳转</p>
<p>被称为“近转移”，类型属性使用”NEAR”关键字</p>
<p>转移范围在127~-128字节之间，又称为“短转移” SHORT</p>
<h5 id="段间转移"><a href="#段间转移" class="headerlink" title="段间转移"></a>段间转移</h5><p>从当前代码段跳转到另一个代码段</p>
<ul>
<li>需要更改CS和IP</li>
</ul>
<p>被称为远转移 “FAR”</p>
<h4 id="JMP指令"><a href="#JMP指令" class="headerlink" title="JMP指令"></a>JMP指令</h4><h5 id="无条件转移指令（JMP）"><a href="#无条件转移指令（JMP）" class="headerlink" title="无条件转移指令（JMP）"></a>无条件转移指令（JMP）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JMP label ;程序转向label标号指定的地址</span><br><span class="line">;段内相对寻址，段间直接寻址</span><br><span class="line">JMP reg32&#x2F;reg16 ;程序转向寄存器指定的地址</span><br><span class="line">;寄存器间接寻址</span><br><span class="line">JMP mem32&#x2F;mem16 ;程序转向存储单元指定的地址</span><br><span class="line">;存储器间接寻址</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;data</span><br><span class="line">nvar dword ?</span><br><span class="line"></span><br><span class="line">;code</span><br><span class="line">	jmp labl1 ;跳转到labl1指令，跨过了一条指令，位移量1个字节、相对寻址短转移</span><br><span class="line">	nop</span><br><span class="line"></span><br><span class="line">labl1: jmp near ptr labl2 ;跳转到labl2，位移量4个字节、相对寻址、近转移</span><br><span class="line">			 nop ;一个空操作指令</span><br><span class="line">			 </span><br><span class="line">labl2: mov eax,offset labl3 ;获得了labl3的地址</span><br><span class="line">			 jmp eax ;跳转到eax内容所指定的位置，跳转到labl3，这是一个寄存器的间接寻址</span><br><span class="line">			 nop</span><br><span class="line">		</span><br><span class="line">labl3: mov eax,offset labl4</span><br><span class="line">			 mov nvar,eax ;数据的存储器直接寻址</span><br><span class="line">			 jmp nvar ;存储器间接寻址</span><br><span class="line">			 nop</span><br><span class="line">			 </span><br><span class="line">			 ;也可写作</span><br><span class="line">			 mov ebx,offset nvar</span><br><span class="line">			 jmp near ptr[ebx] ;数据的寄存器间接寻址</span><br><span class="line">			</span><br><span class="line">labl4:...</span><br></pre></td></tr></table></figure>



<p>实现无条件的程序流程转移</p>
<p>对应着C语言的goto语句</p>
<p>处理器中必不可少的指令</p>
<h4 id="Jcc指令"><a href="#Jcc指令" class="headerlink" title="Jcc指令"></a>Jcc指令</h4><h5 id="条件转移指令（Jcc）"><a href="#条件转移指令（Jcc）" class="headerlink" title="条件转移指令（Jcc）"></a>条件转移指令（Jcc）</h5><p>jump with condition</p>
<p>根据指定的条件确定程序是否发生转移</p>
<p><code>Jcc label</code></p>
<p>；条件满足，发生转移</p>
<p>；否则，顺序执行下一条指令</p>
<p>label表示目标地址</p>
<p>采用段内相对寻址</p>
<h5 id="判断的标志条件cc"><a href="#判断的标志条件cc" class="headerlink" title="判断的标志条件cc"></a>判断的标志条件cc</h5><p>共16条指令，分为两类</p>
<ul>
<li><p>单个标准状态作为条件</p>
<p>五个标志状态<code>ZF</code> <code>CF</code> <code>SF</code> <code>OF</code> <code>PF</code>的十种状态</p>
</li>
<li><p>两数大小关系作为条件</p>
<p>比较无符号整数大小</p>
<p>4种情况：低于、不低于、低于等于、高于</p>
<p>比较有符号整数大小</p>
<p>4种情况：小于、不小于、小于等于、大于</p>
</li>
</ul>
<h6 id="利用零为标志ZF的条件转移指令"><a href="#利用零为标志ZF的条件转移指令" class="headerlink" title="利用零为标志ZF的条件转移指令"></a>利用零为标志ZF的条件转移指令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;判断条件：运算结果为0、两数相等（标志ZF&#x3D;1）</span><br><span class="line">JZ label ;jump if zero</span><br><span class="line">JE label ;jump if equal</span><br><span class="line">;判断条件：结果不为0、不相等（标志ZF&#x3D;0）</span><br><span class="line">JNZ label ;jump if not zero</span><br><span class="line">JNE label ;jump if not equal</span><br></pre></td></tr></table></figure>



<h6 id="利用进位标志CF的条件转移指令"><a href="#利用进位标志CF的条件转移指令" class="headerlink" title="利用进位标志CF的条件转移指令"></a>利用进位标志CF的条件转移指令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;判断条件：运算结果有进位（借位）（标志CF&#x3D;1）</span><br><span class="line">JC label ;jump if carry</span><br><span class="line">;判断条件：如果没有进位（借位）（标志CF&#x3D;0）</span><br><span class="line">JNC label ;jump if not carry</span><br></pre></td></tr></table></figure>



<h6 id="利用溢出标志OF的条件转移指令"><a href="#利用溢出标志OF的条件转移指令" class="headerlink" title="利用溢出标志OF的条件转移指令"></a>利用溢出标志OF的条件转移指令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;判断条件：运算结果有溢出（标志OF&#x3D;1）</span><br><span class="line">JO label ;jump if overflow</span><br><span class="line">;判断条件：结果没有溢出（标志OF&#x3D;0）</span><br><span class="line">JNO label ;jump if not overflow</span><br></pre></td></tr></table></figure>

<ul>
<li>溢出标志OF针对有符号整数加减运算</li>
<li>进位标志CF针对无符号整数加减运算</li>
</ul>
<h6 id="利用符号标志SF的条件转移指令"><a href="#利用符号标志SF的条件转移指令" class="headerlink" title="利用符号标志SF的条件转移指令"></a>利用符号标志SF的条件转移指令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;判断条件：运算结果是负、最高位为1（标志SF&#x3D;1）</span><br><span class="line">JS label ;jump if sign</span><br><span class="line">;判断条件：结果为正、最高位为0（标志SF&#x3D;0）</span><br><span class="line">JNS label ;jump if not sign</span><br></pre></td></tr></table></figure>

<ul>
<li>有符号整数采用补码，最高位是符号位</li>
<li>符号位为1，表示负数；符号位为0，表示正数</li>
</ul>
<h6 id="利用奇偶标志PF的条件转移指令"><a href="#利用奇偶标志PF的条件转移指令" class="headerlink" title="利用奇偶标志PF的条件转移指令"></a>利用奇偶标志PF的条件转移指令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;判断条件：低8位结果中1的个数位偶或0（标志PF&#x3D;1）</span><br><span class="line">JP label ;jump if parity</span><br><span class="line">JPE label ;jump if parity even</span><br><span class="line">;判断条件：低8位结果中1的个数为奇（标志PF&#x3D;0）</span><br><span class="line">JNP label ;jump if not parity</span><br><span class="line">JPO label ;jump if parity odd</span><br></pre></td></tr></table></figure>



<h6 id="两个无符号整数大小关系的条件转移指令"><a href="#两个无符号整数大小关系的条件转移指令" class="headerlink" title="两个无符号整数大小关系的条件转移指令"></a>两个无符号整数大小关系的条件转移指令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;判断条件：低于、不高于等于（标志CF&#x3D;1）</span><br><span class="line">JB ;jump if below</span><br><span class="line">JNAE ;jump if not above or equal</span><br><span class="line">;判断条件：不低于、高于等于（标志CF&#x3D;0）</span><br><span class="line">JNB ;jump if not below</span><br><span class="line">JAE ;jump if above or equal</span><br></pre></td></tr></table></figure>



<h6 id="两个有符号整数大小关系的条件转移指令"><a href="#两个有符号整数大小关系的条件转移指令" class="headerlink" title="两个有符号整数大小关系的条件转移指令"></a>两个有符号整数大小关系的条件转移指令</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;判断条件：大于、不大于等于（标志SF不等于OF）</span><br><span class="line">JL ;jump if less</span><br><span class="line">JNGE ;jump if not greater or equal</span><br><span class="line">;判断条件：不小于、大于等于（标志SF&#x3D;OF）</span><br><span class="line">JNL ;jump if not less</span><br><span class="line">JGE ;jump if greater or equal</span><br></pre></td></tr></table></figure>



<h5 id="产生条件的指令"><a href="#产生条件的指令" class="headerlink" title="产生条件的指令"></a>产生条件的指令</h5><p>常用指令1：比较指令CMP</p>
<ul>
<li>进行减法运算</li>
<li>用于判断两个数据大小、是否相等</li>
</ul>
<p>常用指令2：测试指令TEST</p>
<ul>
<li>进行逻辑与运算</li>
<li>用于判断某位为0或为1等</li>
</ul>
<p>其他指令：能够影响状态标志的指令</p>
<ul>
<li>加减运算指令</li>
<li>逻辑运算指令</li>
<li>移位指令</li>
</ul>
<h6 id="比较指令CMP（compare）"><a href="#比较指令CMP（compare）" class="headerlink" title="比较指令CMP（compare）"></a>比较指令CMP（compare）</h6><p>CMP与SUB</p>
<p>将目的操作数减去源操作数</p>
<ul>
<li>差值不送回目的操作数</li>
<li>按照减法结果影响状态标志</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMP reg,imm&#x2F;reg&#x2F;mem ;reg-imm&#x2F;reg&#x2F;mem</span><br><span class="line">CMP mem,imm&#x2F;reg ;mem-imm&#x2F;reg</span><br></pre></td></tr></table></figure>

<p>根据标志状态获取两个操作数的大小关系</p>
<p>给条件转移等指令使用其形成的状态标志</p>
<h6 id="测试指令TEST"><a href="#测试指令TEST" class="headerlink" title="测试指令TEST"></a>测试指令TEST</h6><p>AND与TEST</p>
<p>按位进行逻辑与运算，不返回逻辑与结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TEST reg,imm&#x2F;reg&#x2F;mem ;reg 与 imm&#x2F;reg&#x2F;mem</span><br><span class="line">TEST mem,imm&#x2F;reg ;mem 与 imm&#x2F;reg</span><br></pre></td></tr></table></figure>

<p>TEST指令像AND指令一样设置状态标志</p>
<p>常用于检测一些条件是否满足，一般后接条件转移指令</p>
<p>目的是利用测试条件转向不同的分支</p>
<p><strong>利用Jcc指令实现分支、循环程序结构</strong></p>
<h4 id="个数折半程序"><a href="#个数折半程序" class="headerlink" title="个数折半程序"></a>个数折半程序</h4><p>对一个无符号整数折半</p>
<ul>
<li>对数据除以2</li>
<li>数据右移移位实现除以2</li>
</ul>
<p>如果是偶数、完成</p>
<p>如果是奇数、+1</p>
<p>显示结果</p>
<p>偶数判断</p>
<p>（SHR指令）右移1位对整数折半</p>
<p>如果是偶数、最低位是0</p>
<p>移入CF标志的位为0，完成</p>
<p>如果是奇数、需要加1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	mov ax,885</span><br><span class="line">	shr ax,1 ;右移1位</span><br><span class="line">	jnc goeven ;CF&#x3D;0条件成立，转移</span><br><span class="line">  add ax,1 ;条件不成立 +1</span><br><span class="line">goeven: call dispuid ;显示结果</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	mov ax,885</span><br><span class="line">	shr ax,1 ;右移1位</span><br><span class="line">	jc goodd ;CF&#x3D;1条件成立，转移</span><br><span class="line">  jmp goeven ;CF&#x3D;0,转移到显示...这一句很重要，没有jmp就会顺序执行还是会+1</span><br><span class="line">goodd: add ax,1 ;+1</span><br><span class="line">goeven: call dispuid ;显示结果</span><br></pre></td></tr></table></figure>



<h3 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h3><h4 id="分支程序结构-1"><a href="#分支程序结构-1" class="headerlink" title="分支程序结构"></a>分支程序结构</h4><p>由条件产生和条件判断两部分组成</p>
<ul>
<li><p>首先，利用比较CMP、测试TEST，或者加减运算、逻辑运算等影响状态标志的指令形成条件</p>
</li>
<li><p>然后，利用条件转移指令判断由标志表达的条件并根据标志状态控制程序转移到不同的程序段</p>
</li>
</ul>
<p>只有一个分支的程序，类似于if-then语句</p>
<p>当条件满足，发生转移，跳过分支体</p>
<p>当条件不满足，顺序向下执行分支体</p>
<p>如求绝对值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    call readsid;读入数据的子程序</span><br><span class="line">    cmp ax, 0</span><br><span class="line">    jge nonneg ; 满足条件 &gt;0 跳转显示</span><br><span class="line">    neg ax ；求补</span><br><span class="line">nonneg: call dispuid ;</span><br></pre></td></tr></table></figure>

<p>与高级语言不同，满足则跳转</p>
<h3 id="双分支结构"><a href="#双分支结构" class="headerlink" title="双分支结构"></a>双分支结构</h3><p> 双分支程序结构有两个分支</p>
<ul>
<li>条件为真，转移：执行分支体2</li>
<li>条件为假，顺序：执行分支体1</li>
</ul>
<p><strong>分支体1最后一定要有JMP指令跳过分支体2</strong>，没有指令就会顺序执行就不太对</p>
<p>显示数据最高位程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov bx,wvar ;数据来自变量</span><br><span class="line">shl bx,1 ;bx最高位移入CF标志</span><br><span class="line">jc one ;cf&#x3D;1，最高位为1，转移</span><br><span class="line">mov al, &#39;0&#39; ;cf&#x3D;0，最高位为0</span><br><span class="line">jmp two ;一定要跳过另一个分支</span><br><span class="line">one: mov al,&quot;1&quot; ;al&#x3D;1</span><br><span class="line">two: call dispc ;显示</span><br></pre></td></tr></table></figure>



<h2 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h2><h3 id="LOOP指令"><a href="#LOOP指令" class="headerlink" title="LOOP指令"></a><code>LOOP</code>指令</h3><p><code>LOOP label</code></p>
<p>功能1：cx &lt;-cx-1    相当于<code>DEC CX</code></p>
<p>功能2：若cx$\neq$0，转移到LABEL    相当于<code>JNZ label</code></p>
<p>否则顺序执行</p>
<blockquote>
<p>寄存器cx是默认的计数器，目标地址采用相对短转移  </p>
</blockquote>
<p>loop指令就相当于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dec cx</span><br><span class="line">jnz label</span><br></pre></td></tr></table></figure>



<h3 id="LOOP指令的应用"><a href="#LOOP指令的应用" class="headerlink" title="LOOP指令的应用"></a>LOOP指令的应用</h3><p>循环指令，用于实现减量计数的循环控制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			mov cx, num ;设置循环的计数初值num</span><br><span class="line">label: ... ;循环体</span><br><span class="line">			loop label ;cx--,未到0继续循环，到0循环结束，顺序执行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">op1&#x3D;&gt;operation: 设置cx</span><br><span class="line">cond1&#x3D;&gt;condition: loop</span><br><span class="line">op2&#x3D;&gt;operation: 循环体</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">op1-&gt;op2-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;op2</span><br><span class="line">cond1(no)-&gt;e</span><br></pre></td></tr></table></figure>



<blockquote>
<p>LOOP指令是先减1后判断</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		mov cx,0 ;设置循环的计数初值</span><br><span class="line">label: loop label ;ex-1,未到0继续循环</span><br></pre></td></tr></table></figure>

<p>这里要知道的是，这是个先减1，后继续循环</p>
<p>这里的循环次数是 $2^{32}$次</p>
<h3 id="JECXZ指令"><a href="#JECXZ指令" class="headerlink" title="JECXZ指令"></a>JECXZ指令</h3><p>未避免计数初值为0可能导致的程序错误</p>
<p>设计理JECXZ指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JECXZ label</span><br><span class="line">;cx&#x3D;0,转移到label，否则顺序执行</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op1&#x3D;&gt;operation: 设置cx</span><br><span class="line">cond1&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">cond2&#x3D;&gt;condition: loop</span><br><span class="line">op2&#x3D;&gt;operation: 循环体</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op1-&gt;cond1(no)-&gt;op2-&gt;cond2(no)-&gt;e</span><br><span class="line">cond2(yes)(botton)-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;e</span><br></pre></td></tr></table></figure>

<h3 id="数组求和程序"><a href="#数组求和程序" class="headerlink" title="数组求和程序"></a>数组求和程序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        .data</span><br><span class="line">        array word 136,-138,133,120,-161 ;数组</span><br><span class="line">        sum word ?</span><br><span class="line">        ;元素逐个相加，作为循环体</span><br><span class="line">        ;数组个数已知，可用LOOP指令控制计数</span><br><span class="line">        mov cx, lengthof array ;cx&#x3D;array元素个数</span><br><span class="line">        xor ax, ax ;求和初值为0</span><br><span class="line">        mov bx, offset array;指向首个元素</span><br><span class="line">again:  add ax,[bx];求和</span><br><span class="line">        add bx, 2;指向下一个数组元素</span><br><span class="line">        loop again</span><br><span class="line">        mov sum, ax;保存结果</span><br></pre></td></tr></table></figure>



<h4 id="逐个寻址数组元素"><a href="#逐个寻址数组元素" class="headerlink" title="逐个寻址数组元素"></a>逐个寻址数组元素</h4><ul>
<li>寻址存储器内的操作实，使用存储器寻址</li>
<li>存储器的直接寻址使用于访问单个变量<ul>
<li>但不方便改变地址，所以不适合访问数组元素</li>
</ul>
</li>
<li>存储器的寄存器间接、相对、变址都使用寄存器<ul>
<li>通过修改寄存器内容改变地址，可方便访问数组元素</li>
</ul>
</li>
</ul>
<p>寄存器的变址寻址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        mov bx,0;指向首个元素</span><br><span class="line">again:  add ax, array[bx*(type array)];求和，带比例的变址</span><br><span class="line">        add bx,1 ;指向下一个数组元素</span><br></pre></td></tr></table></figure>



<h3 id="循环程序结构"><a href="#循环程序结构" class="headerlink" title="循环程序结构"></a>循环程序结构</h3><ol>
<li><p>循环初始——为开始循环准备必要条件</p>
<p>设置循环次数、循环体需要的初始值等</p>
</li>
<li><p>循环体——重复执行的程序代码</p>
<p>其中包括对循环条件的修改等</p>
</li>
<li><p>循环控制——判断循条件是否成立</p>
<p>决定是否继续循环</p>
</li>
</ol>
<blockquote>
<p>计数控制循环</p>
<p>通过次数控制循环</p>
<ul>
<li>计数可以减量进行</li>
<li>也可增量</li>
<li>类似于for</li>
</ul>
<p>利用loop减量进行循环，对应do</p>
</blockquote>
<blockquote>
<p>条件控制循环</p>
<p>根据条件决定是否进行循环</p>
<ul>
<li>使用比较测试等指令设置状态标志、产生条件</li>
<li>使用条件转移指令实现循环空</li>
<li>常需要使用无条件转移指令配合实现循环</li>
</ul>
<p>先判断后循环</p>
<ul>
<li>类似while</li>
</ul>
</blockquote>
<h3 id="计数控制循环"><a href="#计数控制循环" class="headerlink" title="计数控制循环"></a>计数控制循环</h3><p>通过次数来控制循环</p>
<p>常见的是先循环后判断的循环结构</p>
<p>求最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.data</span><br><span class="line">array word -3,0,20,900,-56</span><br><span class="line">count &#x3D; lengthof array ;数据元素个数</span><br><span class="line">max word ? ;存放最大值</span><br><span class="line">;从第一个元素开始逐个比较，保留最大值</span><br><span class="line">.code</span><br><span class="line">mov cx,count-1 ;元素个数-1就是循环次数</span><br><span class="line">mov si,offset array</span><br><span class="line">mov ax,[si] ;第一个元素暂时存为最大值</span><br><span class="line"></span><br><span class="line">again: add si, 2</span><br><span class="line">			 cmp ax, [si] ;比较</span><br><span class="line">			 jpe next ;已经是则继续</span><br><span class="line">			 ;循环体包含了一个分支程序</span><br><span class="line">			 mov ax, [si] ;不是，顺序执行，取得更大的数据</span><br><span class="line">next: loop again ;计数循环</span><br><span class="line">			mov max, ax;保存最大值</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        ;改成一个相对寻址</span><br><span class="line">        mov cx,count-1 ;循环次数</span><br><span class="line">        xor si,si</span><br><span class="line">        mov ax,array[si];</span><br><span class="line">again: add si,2</span><br><span class="line">        cmp ax,array[si];</span><br><span class="line">        jge next</span><br><span class="line">        mov ax,array[si];</span><br><span class="line">next: loop again</span><br><span class="line">        mov max,ax</span><br></pre></td></tr></table></figure>





<h3 id="条件控制循环"><a href="#条件控制循环" class="headerlink" title="条件控制循环"></a>条件控制循环</h3><p>根据条件决定是否进行循环</p>
<ul>
<li>使用比较、测试等指令设置状态标志、产生条件</li>
<li>使用条件转移指令实现循环控制</li>
<li>常需要使用无条件转移指令配合实现循环</li>
</ul>
<p>常见的是“先判断，后循环”结构</p>
<h4 id="统计以0结尾的字符串的个数"><a href="#统计以0结尾的字符串的个数" class="headerlink" title="统计以0结尾的字符串的个数"></a>统计以0结尾的字符串的个数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.data</span><br><span class="line">string byte &quot;Do you have fun?&quot;,0 ;以0结尾的字符串</span><br><span class="line">.code</span><br><span class="line">xor bx,bx ;记录字符个数，也用作指向字符的指针</span><br><span class="line">;字符不为0，个数+1，字符是0，字符串结束</span><br><span class="line">again: mov al, string[bx];</span><br><span class="line">      cmp al,0</span><br><span class="line">      jz done ;满足则跳转</span><br><span class="line">      inc bx ;个数+1</span><br><span class="line">      jmp again ;继续循环</span><br><span class="line">done: mov ax,bx ;显示个数</span><br><span class="line">      call dispuid</span><br></pre></td></tr></table></figure>



<h4 id="先行判断的条件控制循环类似双分支结构"><a href="#先行判断的条件控制循环类似双分支结构" class="headerlink" title="先行判断的条件控制循环类似双分支结构"></a>先行判断的条件控制循环类似双分支结构</h4><p>顺序执行的分支 $\Rightarrow$ 需要重复执行多次的循环体</p>
<p>另一个分支 $\Rightarrow$ 用于跳出循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">again: cmp string[bx],0</span><br><span class="line">        jz done</span><br><span class="line">        inc bx</span><br><span class="line">        jmp again</span><br><span class="line">done:</span><br></pre></td></tr></table></figure>



<p>双分支结构与“先判断后循环”结构</p>
<p>双分支：条件判断，yes跳转到分支体2，no顺序执行到分支体1</p>
<p>循环：满足条件跳转，不满足条件顺序执行循环体，在循环体中跳转到条件的判断</p>
<h4 id="先行循环的条件控制循环类似单分支结构"><a href="#先行循环的条件控制循环类似单分支结构" class="headerlink" title="先行循环的条件控制循环类似单分支结构"></a>先行循环的条件控制循环类似单分支结构</h4><p>分支体 $\Rightarrow$ 就是循环体</p>
<p>顺序执行 $\Rightarrow$ 就跳出循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">again: inc bx</span><br><span class="line">			 cmp string[bx],0</span><br><span class="line">			 jnz again</span><br><span class="line">			 ...;退出循环</span><br></pre></td></tr></table></figure>

<p>这是一个先循环后判断，满足条件则继续循环，不满足则退出</p>
<h2 id="子程序的调用"><a href="#子程序的调用" class="headerlink" title="子程序的调用"></a>子程序的调用</h2><h3 id="子程序指令"><a href="#子程序指令" class="headerlink" title="子程序指令"></a>子程序指令</h3><ul>
<li><p>主程序（调用程序）</p>
<p>执行调用指令<code>CALL</code></p>
<p>调用子程序</p>
</li>
<li><p>子程序（被调用程序）</p>
<p>执行返回指令<code>RET</code></p>
<p>返回主程序</p>
<p>返回到CALL指令的下一条指令处</p>
</li>
</ul>
<h4 id="子程序调用指令CALL"><a href="#子程序调用指令CALL" class="headerlink" title="子程序调用指令CALL"></a>子程序调用指令CALL</h4><p>CALL指令用在主程序中，实现子程序的调用</p>
<ol>
<li>将下一条指令的地址压入堆栈（顶部）</li>
<li>转移到目标地址</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CALL label ;调用标号指定的子程序</span><br><span class="line">CALL reg16 ;调用寄存器指定地址的子程序</span><br><span class="line">CALL mem48&#x2F;mem32&#x2F;mem16 ;调用存储单元指定地址的子程序</span><br></pre></td></tr></table></figure>

<blockquote>
<p>CALL分成段内调用（近调用）和段间调用（远调用）</p>
<p>目标地址支持相对寻址、直接寻址或间接寻址</p>
</blockquote>
<h4 id="段内CALL和RET指令"><a href="#段内CALL和RET指令" class="headerlink" title="段内CALL和RET指令"></a>段内CALL和RET指令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CALL label</span><br><span class="line">next:...</span><br><span class="line">;相当于</span><br><span class="line">push next ;入栈返回地址sp&#x3D;sp-4，ss:[sp]&#x3D;ip</span><br><span class="line">jmp label ;转移目标地址：ip&#x3D;ip+偏移量</span><br><span class="line"></span><br><span class="line">RET ;栈顶数据出栈到指令指针寄存器ip</span><br><span class="line">;ip&#x3D;ss:[sp],sp&#x3D;sp+4</span><br><span class="line">;数据进入ip，就作为下一条要执行指令的地址</span><br></pre></td></tr></table></figure>



<h3 id="子程序调用"><a href="#子程序调用" class="headerlink" title="子程序调用"></a>子程序调用</h3><p>主程序遇到CALL name 跳转到名字为name的子程序，在子程序执行到最后遇到RET转回到主程序，进行下一条指令 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;代码段，主程序</span><br><span class="line">mov ax,1</span><br><span class="line">mov bp,5  </span><br><span class="line">call subp</span><br><span class="line">retp1: mov cx,3</span><br><span class="line">retp2: mov dx,3</span><br><span class="line">call disprd</span><br><span class="line"></span><br><span class="line">;子程序</span><br><span class="line">subp proc ;过程定义，过程名为subp</span><br><span class="line">      push bp</span><br><span class="line">      mov bp,sp</span><br><span class="line">      mov si,[bp+4] ;si&#x3D;CALL下条指令的偏移地址</span><br><span class="line">      mov di,offset retp2</span><br><span class="line">      mov bx,2</span><br><span class="line">      pop bp</span><br><span class="line">      ret</span><br><span class="line">subp endp ；过程结束</span><br></pre></td></tr></table></figure>



<h3 id="子程序设计"><a href="#子程序设计" class="headerlink" title="子程序设计"></a>子程序设计</h3><p>同主程序</p>
<ul>
<li>RET指令返回主程序，CALL指令调用子程序</li>
<li>利用过程定义，获得子程序名和调用属性</li>
<li>压入和弹出操作要成对使用，保持堆栈平衡</li>
<li>子程序开始保护寄存器，返回前相应恢复</li>
<li>安排在代码段的主程序之外</li>
<li>子程序允许嵌套和递归</li>
</ul>
<h4 id="过程定义伪指令"><a href="#过程定义伪指令" class="headerlink" title="过程定义伪指令"></a>过程定义伪指令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过程名 PROC</span><br><span class="line">			....;过程体</span><br><span class="line">过程名 ENDP</span><br><span class="line">;过程名为符合语法的标识符</span><br></pre></td></tr></table></figure>

<p>MASM会根据存储模型等信息确定子程序的远近调用，并相应产生调用、返回指令</p>
<h4 id="子程序框架"><a href="#子程序框架" class="headerlink" title="子程序框架"></a>子程序框架</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标识符 proc ;过程定义（子程序开始）</span><br><span class="line">			push ...1 ;保护寄存器</span><br><span class="line">			push ...2</span><br><span class="line">			...				;子程序体</span><br><span class="line">			pop ...2 ;恢复寄存器</span><br><span class="line">			pop ...1</span><br><span class="line">			ret	;子程序返回</span><br><span class="line">标识符 endp ;过程（子程序结束）</span><br></pre></td></tr></table></figure>

<p>子程序和主程序共用一套处理器，可能会冲掉主程序的内容，为了保证主程序的状态，寄存器的内容不改变，子程序需要做一些处理，保护寄存器，把它放入堆栈，有push指令，pop成对出现用于保护，恢复寄存器的时候，是一个相反的顺序，堆栈先进后出</p>
<p>回车换行功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov al,0dh ;输出回车字符</span><br><span class="line">call dispc</span><br><span class="line">mov al,0ah ;输出换行字符</span><br><span class="line">call dispc</span><br><span class="line">;子程序中调用子程序，实现子程序嵌套</span><br></pre></td></tr></table></figure>



<p>来写成一个子程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpcrlf proc ;回城换行子程序</span><br><span class="line">      push ax;保护寄存器</span><br><span class="line">      mov al,0dh;</span><br><span class="line">      call dispc</span><br><span class="line">      mov al,0ah ;输出换行字符</span><br><span class="line">      call dispc</span><br><span class="line">      pop ax;恢复寄存器</span><br><span class="line">      ret;子程序返回</span><br><span class="line">dpcrlf endp;子程序结束</span><br></pre></td></tr></table></figure>



<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>主程序与子程序之间通过参数传递建立联系</p>
<ul>
<li>入口参数(输入参数)：主程序——&gt;子程序</li>
<li>出口参数(输出参数)：子程序——&gt;主程序</li>
</ul>
<p>参数的具体内容</p>
<ul>
<li>数据本身(传递数值)</li>
<li>数据的存储地址(传递地址，传递引用)</li>
</ul>
<p>参数传递的方法</p>
<ul>
<li>通用寄存器</li>
<li>共享变量</li>
<li>堆栈</li>
</ul>
<h4 id="寄存器传递参数"><a href="#寄存器传递参数" class="headerlink" title="寄存器传递参数"></a>寄存器传递参数</h4><p>最简单和常用的参数传递方法</p>
<p>把参数存于约定的寄存器</p>
<ul>
<li>少量数据直接传递数值</li>
<li>大量数据只能传递地址</li>
</ul>
<p>带有出口参数的寄存器不能保护和恢复（因为子程序处理完会有结果返回的，如果保护恢复就无法再传递参数了）</p>
<p>带有入口参数的寄存器可以保护，也可以不保护，但最好能保持一致</p>
<p>十六进制显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      ;code main</span><br><span class="line">      mov eax, 1234abcdh ;假设一个数据</span><br><span class="line">      xor ebx, ebx;相对寻址访问字符串</span><br><span class="line">      mov ecx, 8;8位十六进制数</span><br><span class="line">again: rol eax, 4;高4位循环移位进入低4位，AL低四位传递入口参数</span><br><span class="line">      push eax;也可 mov edx, eax， AL传递出口参数，主程序进行保护</span><br><span class="line">      call htoasc ;调用子程序htoasc</span><br><span class="line">      mov regd+4[ebx], al;保存转换后的ASCII码</span><br><span class="line">      pop eax;保护，也可 mov eax,edx;</span><br><span class="line">      inc ebx;</span><br><span class="line">      loop again;</span><br><span class="line">      mov eax, offset regd;</span><br><span class="line">      call dispmsg;显示</span><br><span class="line">      </span><br><span class="line">      ;子程序</span><br><span class="line">htoasc proc ;开始</span><br><span class="line">			and al,0fh ;只取AL的低4位</span><br><span class="line">			or al,30h ;AL高4位变成3</span><br><span class="line">			cmp al, 39h ;是0~9，还是A~F</span><br><span class="line">			jbe htoend</span><br><span class="line">			add al,7 ;是A~F，ASCII码+7</span><br><span class="line">htoend: ret ;子程序返回</span><br><span class="line">htoasc endp ;结束</span><br></pre></td></tr></table></figure>



<h3 id="共享变量传递参数"><a href="#共享变量传递参数" class="headerlink" title="共享变量传递参数"></a>共享变量传递参数</h3><p>类似于高级语言中的全局变量</p>
<p>子程序和主程序使用同一个变量名存取数据</p>
<p>如果变量定义和使用不在同一个程序模块中，需要利用PUBLIC、EXTERN声明</p>
<p>共享变量传递参数，子程序的通用性较差</p>
<p>特别适合再多个程序断间、尤其在不同的程序模块间传递数据</p>
<p>二进制输入主程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        ;data</span><br><span class="line">        count &#x3D; 5</span><br><span class="line">        array dword count dup(0)</span><br><span class="line">        temp dword ? ;共享变量</span><br><span class="line">        ;code main</span><br><span class="line">        mov ecx,count ;输入count个数据</span><br><span class="line">        mov ebx,offset array;ebx间接寻址访问数组</span><br><span class="line">again: call rdbd ;调用子程序，输入一个数据</span><br><span class="line">        mov eax,temp ;获得出口参数（共享变量）</span><br><span class="line">        mov [ebx],eax;存放到数据缓存区</span><br><span class="line">        add ebx,4 </span><br><span class="line">        loop again</span><br><span class="line"></span><br><span class="line">        ;使用共享变量直接传递返回值</span><br><span class="line">        ;子程序</span><br><span class="line">        rdbd proc ;出口参数：共享变量TEMP</span><br><span class="line">        push eax ;寄存器保护</span><br><span class="line">        push ebx</span><br><span class="line">        push ecx</span><br><span class="line">rdbd1: xor ebx,ebx ;ebx用于存放二进制结果</span><br><span class="line">        mov ecx,32;限制输入字符的个数</span><br><span class="line"></span><br><span class="line">rdbd2: call readc ;输入一个字符</span><br><span class="line">        cmp al,&quot;0&quot;;检测键入字符是否合法</span><br><span class="line">        jb rderr ;不合法则转到出错处理</span><br><span class="line">        cmp al,&quot;1&quot;</span><br><span class="line">        ja rderr</span><br><span class="line">        sub al,&quot;0&quot;;对输入的字符进行转化</span><br><span class="line">        shl ebx,1;ebx的值乘以2（左移一位）</span><br><span class="line">        or bl,al;BL和AL相加（或）</span><br><span class="line">        loop rdbd2;循环输入字符</span><br><span class="line">        mov temp,ebx;把二进制结果存放TEMP返回</span><br><span class="line">        call dispcrlf;分行</span><br><span class="line">        pop ecx</span><br><span class="line">        pop ebx</span><br><span class="line">        pop eax</span><br><span class="line">        ret</span><br><span class="line">        </span><br><span class="line">rderr: mov eax,offset errmsg ;显示错误信息</span><br><span class="line">        call dispmsg</span><br><span class="line">        jmp rdbd1 ;重新输入</span><br><span class="line">        errmsg byte 0dh,0ah,&quot;Input error,enter agagin:&quot;,0</span><br><span class="line">        rdbd endp</span><br></pre></td></tr></table></figure>



<p>通过共享变量temp传递参数</p>
<p>整个处理过程，不需要考虑参数传递的问题，处理完了，将要返回的值放在约定的共享变量中就可以了</p>
<h3 id="堆栈传递参数"><a href="#堆栈传递参数" class="headerlink" title="堆栈传递参数"></a>堆栈传递参数</h3><p>主程序将入口参数压入堆栈</p>
<ul>
<li>子程序从堆栈中取出参数</li>
</ul>
<p>采用堆栈传递参数常常是程式化的</p>
<ul>
<li>子程序设置ebp等于当前esp</li>
<li>利用esp相对寻址访问堆栈中的参数</li>
</ul>
<p>出口参数通常不使用堆栈传递</p>
<p>高级语言函数调用的参数是指是堆栈传递参数</p>
<h4 id="有符号的平均值"><a href="#有符号的平均值" class="headerlink" title="有符号的平均值"></a>有符号的平均值</h4><p>要求：将数组元素求和，除以元素个数，求得平均值；</p>
<ul>
<li>主程序：提供数组地址和元素个数，显示结果</li>
<li>子程序：求平均值，返回结果</li>
</ul>
<p>堆栈传递入口参数</p>
<ul>
<li>压入堆栈元素个数（传数值）</li>
<li>压入堆栈数组地址（传地址）</li>
</ul>
<p>寄存器传递出口参数</p>
<ul>
<li>EAX=平均值（传数值）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;data</span><br><span class="line">array dword 675,354,-34,198,267,0,9,2371,-67,4257</span><br><span class="line">;code main</span><br><span class="line">push lengthof array;压入数据个数</span><br><span class="line">push offset array;压入数组地址</span><br><span class="line">call mean;调用求平均值子程序</span><br><span class="line">add esp,8;主程序平衡堆栈，弹出8个字节</span><br><span class="line">call dispsid;显示平均值EAX（出口参数）</span><br><span class="line">;代码段，子程序</span><br><span class="line">mean proc; 入口参数：顺序压入个数和地址</span><br><span class="line">push ebp;出口参数：EAX&#x3D;平均值</span><br><span class="line">mov ebp,esp;</span><br><span class="line">push ebx;保护寄存器</span><br><span class="line">push ecx</span><br><span class="line">push edx</span><br><span class="line">;堆栈传递参数可以程式化，子程序设置bp等于当前sp，利用bp相对寻址访问堆栈中的参数</span><br><span class="line">mov ebx,[ebp+8];ebx&#x3D;取出的数组地址</span><br><span class="line">mov ecx,[ebp+12];ecx&#x3D;取出的数据个数</span><br><span class="line">xor eax, eax ;eax保存和值</span><br><span class="line">xor edx，edx ;edx&#x3D;指向数组元素</span><br><span class="line">mean1: add eax,[ebx+edx*4];求和</span><br><span class="line">add adx,1;指向下一个数据</span><br><span class="line">cmp edx,ecx;比较个数</span><br><span class="line">jb mean1;增量计数循环</span><br><span class="line">cdq ;将累加和eax符号扩展到edx，将eax最高位填入edx所有位</span><br><span class="line">;等同于 mov edx,eax  sar edx,31</span><br><span class="line">idiv ecx;有符号数除法，eax&#x3D;平均值</span><br><span class="line">pop edx ;恢复寄存器</span><br><span class="line">pop ecx</span><br><span class="line">pop ebx</span><br><span class="line">pop ebp</span><br><span class="line">ret</span><br><span class="line">mean endp</span><br></pre></td></tr></table></figure>



<h3 id="源文件包含和模块连接"><a href="#源文件包含和模块连接" class="headerlink" title="源文件包含和模块连接"></a>源文件包含和模块连接</h3><h4 id="多模块程序结构"><a href="#多模块程序结构" class="headerlink" title="多模块程序结构"></a>多模块程序结构</h4><p>程序分段、子程序等实现了程序模块化</p>
<p>开发大型应用程序时常使用</p>
<ul>
<li>多个源程序文件</li>
<li>目标代码模块等</li>
</ul>
<p>组成完整的程序，形成多模块程序结构</p>
<blockquote>
<p>MASM支持的多模块方法</p>
<ol>
<li>源文件包含</li>
<li>模块连接</li>
<li>子程序库</li>
<li>库文件包含</li>
</ol>
</blockquote>
<h4 id="源文件包含"><a href="#源文件包含" class="headerlink" title="源文件包含"></a>源文件包含</h4><p>大型源程序可以合理的分放在若干个文本文件中</p>
<ul>
<li>各种常量定义、声明语句等组织在包含文件(*.INC)</li>
<li>常用的或有价值的宏定义存放在宏定义文件(*.MAC)</li>
<li>常用的子程序形成汇编语言源文件(*.ASM)</li>
<li>任何文本文件</li>
</ul>
<p>使用源文件包含伪指令INCLUDE</p>
<p><code>include 文件名</code></p>
<p>将指定文件内容插入主题源程序文件</p>
<h5 id="源文件包含的使用"><a href="#源文件包含的使用" class="headerlink" title="源文件包含的使用"></a>源文件包含的使用</h5><p>被包含文件</p>
<ul>
<li>文件名要符合操作系统规范</li>
<li>只能是文本文件</li>
<li>内容被插入源文件包含include语句所在的位置</li>
</ul>
<p>实质仍然是一个源程序</p>
<ul>
<li>只是分开在若干个文件中</li>
<li>只需针对主题源程序文件进行汇编、连接</li>
</ul>
<h5 id="模块连接"><a href="#模块连接" class="headerlink" title="模块连接"></a>模块连接</h5><p>子程序单独编写成一个源程序文件</p>
<ul>
<li>使用共用伪指令PUBLIC和外部伪指令EXTERN声明</li>
<li>子程序在代码段，与主程序文件采用相同的存储模型</li>
<li>没有开始执行和结束执行点，但有汇编结束语句</li>
<li>处理好子程序与主程序之间的参数传递问题</li>
</ul>
<p>子程序源文件汇编形成目标模块OBJ文件</p>
<p>连接时输入子程序目标模块文件名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;定义标识符的模块使用</span><br><span class="line">public 标识符[,标识符...]</span><br><span class="line">;调用标识符的模块使用</span><br><span class="line">extern 标识符:类型[,标识符:类型...]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;文件名：eg.asm,主程序</span><br><span class="line">...</span><br><span class="line">temp dword ? ;共享变量定义</span><br><span class="line">extern rdhd:near,dphd:near,write:near ;外部子程序</span><br><span class="line">public temp ;变量共用</span><br><span class="line">	.code ;代码段，组程序</span><br><span class="line">	...</span><br><span class="line">	end start</span><br></pre></td></tr></table></figure>



<h3 id="子程序库和库文件包含"><a href="#子程序库和库文件包含" class="headerlink" title="子程序库和库文件包含"></a>子程序库和库文件包含</h3><p>子程序库是子程序模块的集合，便于统一管理子程序</p>
<h2 id="宏汇编"><a href="#宏汇编" class="headerlink" title="宏汇编"></a>宏汇编</h2><p>宏是具有宏名的一段汇编语句序列</p>
<p>宏需要先使用MACRO/ENDM伪指令进行定义</p>
<p>然后在程序中使用宏名（带参数）进行宏调用</p>
<p>源程序进行汇编时候</p>
<ul>
<li>宏名被汇编程序用宏定义的</li>
<li>代码序列替代，实现宏展开</li>
</ul>
<blockquote>
<p>宏定义</p>
<p>宏名 macro [形参表]</p>
<p>​        … ;宏定义体</p>
<p>​        endm</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;宏定义</span><br><span class="line">WirteString macro msg</span><br><span class="line">						push eax</span><br><span class="line">						lea eax,msg</span><br><span class="line">						call dispmsg</span><br><span class="line">						pop eax</span><br><span class="line">						endm</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;宏调用（宏指令）</span><br><span class="line">;写上宏名，和它所需要的参数</span><br><span class="line">WriteString msg1;可以一样也可以不一样msg</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;宏展开</span><br><span class="line">push eax</span><br><span class="line">lea eax,msg1</span><br><span class="line">call dispmsg</span><br><span class="line">pop eax</span><br></pre></td></tr></table></figure>

<h3 id="宏汇编的特点"><a href="#宏汇编的特点" class="headerlink" title="宏汇编的特点"></a>宏汇编的特点</h3><p>宏需要先定义后使用，且不必在任何段中</p>
<ul>
<li>常书写于源程序开始位置</li>
<li>常用的宏定义可以单独写成一个宏定义文件</li>
</ul>
<p>宏定义中更改了寄存器内容，最好进行保护和恢复</p>
<p>宏定义的参数灵活，宏定义允许嵌套和递归调用</p>
<p>宏调用不需要控制的转移与返回</p>
<ul>
<li>宏调用将相应的语句序列复制到宏指令的位置</li>
<li>宏展开被嵌入源程序，成为一体</li>
</ul>
<p>类似于子程序</p>
<h3 id="宏与子程序：简化程序"><a href="#宏与子程序：简化程序" class="headerlink" title="宏与子程序：简化程序"></a>宏与子程序：简化程序</h3><p>宏仅是源程序级的简化</p>
<ul>
<li>宏调用在汇编时进行程序语句的展开，不需要返回</li>
<li>不减小目标程序，执行速度不变</li>
</ul>
<p>子程序不仅简化源程序，还是目标程序级的简化</p>
<ul>
<li>子程序调用在执行时由CALL指令转向、RET指令返回</li>
<li>形成的目标代码较短，执行速度减慢</li>
</ul>
<h1 id="一些实例"><a href="#一些实例" class="headerlink" title="一些实例"></a>一些实例</h1><h2 id="数据定义综合应用"><a href="#数据定义综合应用" class="headerlink" title="数据定义综合应用"></a>数据定义综合应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;数据段</span><br><span class="line">bvar DB 16</span><br><span class="line">wvar DW 4*3</span><br><span class="line">dvar DD 4294967295 ;&#x3D;2^32-1</span><br><span class="line">qvar DQ ?</span><br><span class="line">		 DB 1,2,3,4,5</span><br><span class="line">tvar DT 2345</span><br><span class="line">abc  DB &#39;a&#39;,&#39;b&#39;,&#39;c&#39;</span><br><span class="line">msg  DB &#39;Hello&#39;,13,10,&#39;$&#39;</span><br><span class="line">bbuf DB 12 DUP(&#39;month&#39;)</span><br><span class="line">dbuf DD 25 DUP(?)</span><br><span class="line">CALLDOS EQU &lt;int 21h&gt;</span><br><span class="line">;代码段</span><br><span class="line">mov bl,bvar</span><br><span class="line">mov ax,word ptr dvar[0]</span><br><span class="line">mov dx,word ptr dvar[2] ;取双字到DX.AX</span><br><span class="line">mov dx,offset msg</span><br><span class="line">mov ah,09h</span><br><span class="line">CALLDOS</span><br></pre></td></tr></table></figure>



<h2 id="数据复制和显示"><a href="#数据复制和显示" class="headerlink" title="数据复制和显示"></a>数据复制和显示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      ;数据段</span><br><span class="line">      source db 33h,34h,35h,36h ;定义4个字符数据</span><br><span class="line">      target db 80 dup(?) ;分配数据空间4x20&#x3D;80</span><br><span class="line">      ;代码段</span><br><span class="line">      mov si, offset source ;SI-&gt;源缓冲区</span><br><span class="line">      mov di, offset target ;DI-&gt;目的缓冲区</span><br><span class="line">      mov cx, 80 ;CX-&gt;字符个数</span><br><span class="line">again1: mov al,[si] ;从原缓冲区取一个字符</span><br><span class="line">				mov [di],al ;传送到目的缓冲区</span><br><span class="line">				inc si ;指向下一个字符位置</span><br><span class="line">				inc di</span><br><span class="line">				loop again2 ;重复传送80次</span><br><span class="line">				mov di,0</span><br><span class="line">again2: mov dl,target[di] ;从目的缓冲区取字符</span><br><span class="line">				mov ah,2</span><br><span class="line">				int 21h ;显示</span><br><span class="line">				inc di</span><br><span class="line">				cmp di,80</span><br><span class="line">				jb again2</span><br></pre></td></tr></table></figure>



<h2 id="一些结构的实例"><a href="#一些结构的实例" class="headerlink" title="一些结构的实例"></a>一些结构的实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;查表法，实现十六进制数转换为ASCII码显示</span><br><span class="line">;数据段</span><br><span class="line">HEX db 4bh</span><br><span class="line">ASCII db 30h,31h,32h,33h,34h,35h</span><br><span class="line">			db 36h,37h,38h,39h ;0~9的ASCII码</span><br><span class="line">			db 41h,42h,43h,44h,45h,46h ;A~F的ASCII码</span><br><span class="line">			;任一设定了一个待转换的一位16进制数</span><br><span class="line">			;代码段</span><br><span class="line">			mov bx,offset ASCII ;BX指向ASCII码表</span><br><span class="line">			mov al,HEX ;AL取得一位16进制数，正是ASCII码表中位移</span><br><span class="line">			mov cl,4 ;什么操作</span><br><span class="line">			sar al,cl ;高4位移入低4位</span><br><span class="line">			xlat ;换码：AL &lt;- DS:[BX+AL]</span><br><span class="line">			mov dl,al ;入口参数：DL &lt;- AL</span><br><span class="line">			mov ah,2 ;02号DOS功能调用</span><br><span class="line">			int 21h ;显示数据高位</span><br><span class="line">			mov al,HEX ;取数据，显示低4位</span><br><span class="line">			and al,0fh ;只有低4位有效，高4位清0</span><br><span class="line">			xlat ;换码：AL &lt;- DS:[BX+AL]</span><br><span class="line">			mov dl,al ;入口参数：DL &lt;- AL</span><br><span class="line">			mov ah,2 ;02号DOS功能调用</span><br><span class="line">			int 21h</span><br></pre></td></tr></table></figure>



<h3 id="单分支程序设计"><a href="#单分支程序设计" class="headerlink" title="单分支程序设计"></a>单分支程序设计</h3><p>条件成立跳转，否则顺序执行分支与具体；注意选择正确的条件转移指令和转移目标地址</p>
<h4 id="求绝对值"><a href="#求绝对值" class="headerlink" title="求绝对值"></a>求绝对值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		cmp ax,0 ;cmp指令影响的符号位</span><br><span class="line">		jns nonneg ;分支条件：AX&gt;&#x3D;0</span><br><span class="line">		neg ax ;条件不满足，求补</span><br><span class="line">nonneg:mov result,ax ;条件满足</span><br></pre></td></tr></table></figure>

<h4 id="无符号数除以2"><a href="#无符号数除以2" class="headerlink" title="无符号数除以2"></a>无符号数除以2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		test ax,01h ;测试AX最低位</span><br><span class="line">		jz even ;最低位为0：AX为偶数</span><br><span class="line">		add ax,1 ;最低位为1：AX为奇数，需要加1</span><br><span class="line">even: rcr ax,1 ;AX &lt;- AX&#x2F;2</span><br><span class="line">;如果采用SHR指令，无法处理AX&#x3D;FFFFH的特殊情况，那时候CF&#x3D;1</span><br></pre></td></tr></table></figure>

<h3 id="双分支程序结构"><a href="#双分支程序结构" class="headerlink" title="双分支程序结构"></a>双分支程序结构</h3><p>条件成立跳转执行第二个分支语句体，否则顺序执行第一个分支语句体</p>
<p>第一个分支语句体后一定要有一个JMP跳转到第二个之后</p>
<h4 id="显示BX最高位"><a href="#显示BX最高位" class="headerlink" title="显示BX最高位"></a>显示BX最高位</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		shl bx,1 ;BX最高位移入CF</span><br><span class="line">		jc one ;CF&#x3D;1，即最高位为1，转移</span><br><span class="line">		mov dl,&quot;0&quot; ;CF &#x3D; 1，最高位为0，DL&lt;-&#39;0&#39;</span><br><span class="line">		jmp two ;一定要跳</span><br><span class="line">one: mov dl ,&#39;1&#39;;DL &lt;- &#39;1&#39;</span><br><span class="line">two: mov ah ,2</span><br><span class="line">		int 21h ;显示</span><br></pre></td></tr></table></figure>

<p>也可以改成单分支程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		mov dl,&#39;0&#39; ;DL &lt;- &#39;0&#39;</span><br><span class="line">		shl bx,1 ;bx最高位移入CF</span><br><span class="line">		jnc two ;CF&#x3D;0，最高位为0，转移</span><br><span class="line">		mov dl,&#39;1&#39;;CF&#x3D;1,最高位为1，DL&lt;-&#39;1&#39;</span><br><span class="line">two: mov ah,2</span><br><span class="line">		 int 21 ;显示</span><br></pre></td></tr></table></figure>

<h4 id="判断有无实根"><a href="#判断有无实根" class="headerlink" title="判断有无实根"></a>判断有无实根</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;data segment</span><br><span class="line">_a db ?</span><br><span class="line">_b db ?</span><br><span class="line">_c db ?</span><br><span class="line">tag db ?</span><br><span class="line">		mov al,_b</span><br><span class="line">		imul al</span><br><span class="line">		mov bx,ax ;bx中为b^2</span><br><span class="line">		mov al,_a</span><br><span class="line">		cmp bx,ax ;比较两者大小</span><br><span class="line">		jge yes ;条件满足?</span><br><span class="line">		mov tag,0 ;第一分支体：条件不满足。tag &lt;- 0</span><br><span class="line">		jmp done ;跳过第二个分支体</span><br><span class="line">yes:mov tag,1 ;第二个分支体：条件满足，tag &lt;- 1</span><br><span class="line">done:</span><br></pre></td></tr></table></figure>



<h3 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or ah,ah ;cmp ah,0</span><br><span class="line">jz function0 ;ah&#x3D;0,转向function0</span><br><span class="line">dec ah ;cmp ah,1</span><br><span class="line">jz function1 ;ah&#x3D;1,转向function1</span><br><span class="line">dec ah ;cmp ah,2</span><br><span class="line">jz function2 ;aj&#x3D;2,转向function2</span><br></pre></td></tr></table></figure>

<h4 id="地址表形成多分支"><a href="#地址表形成多分支" class="headerlink" title="地址表形成多分支"></a>地址表形成多分支</h4><p>需要在数据段事先安排一个按顺序排列的转移地址表</p>
<p>输入的数字作为偏移量</p>
<p>关键是间接寻址方式JMP指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;data segment</span><br><span class="line">msg db &quot;Input number(1~8):&quot;,0dh,0ah,&#39;$&#39;</span><br><span class="line">msg1 db &quot;Chapter 1 : ...&quot;,0dh,0ah,&#39;$&#39;</span><br><span class="line">msg2 db &quot;Chapter 2 : ...&quot;,0dh,0ah,&#39;$&#39;</span><br><span class="line">			...</span><br><span class="line">msg8 db &quot;Chapter 8 : ...&quot;,0dh,0ah,&#39;$&#39;</span><br><span class="line">table dw disp1,disp2,disp3,disp4 ;disp1等同于 offset disp1</span><br><span class="line">			dw disp5,disp6,disp7,disp8 ;取得各个标号的偏移地址</span><br><span class="line">start1: mov dx,offset msg ;提示输入数字</span><br><span class="line">			  mov ah,9</span><br><span class="line">			  int 21h</span><br><span class="line">			  mov ah,1 ;等待按键</span><br><span class="line">			  int 21h</span><br><span class="line">			  cmp al,&quot;1&quot; ;数字小于1?</span><br><span class="line">			  jb start1</span><br><span class="line">			  cmp al,&quot;8&quot; ;数字大于8?</span><br><span class="line">			  ja start1</span><br><span class="line">			  and ax,000fh ;将ASCII码转换成数值</span><br><span class="line">			  dec ax</span><br><span class="line">			  shl ax,1 ;why ax &lt;- ax+ax?</span><br><span class="line">			  mov bx,ax</span><br><span class="line">			  jmp table[bx];也可call table[bx]</span><br><span class="line">start2: mov ah,9</span><br><span class="line">				int 21h</span><br><span class="line">				.exit 0</span><br><span class="line">disp1: mov dx, offset msg1;处理程序1</span><br><span class="line">			 jmp start2 ;对应修改为ret</span><br><span class="line">			 ...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Assembly</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>study in school</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器缓存的实现</title>
    <url>/2020/01/07/Task/</url>
    <content><![CDATA[<h1 id="浏览器缓存的实现"><a href="#浏览器缓存的实现" class="headerlink" title="浏览器缓存的实现"></a>浏览器缓存的实现</h1><p>网站的性能就是看网站打开的速度</p>
<p>其中提高网页反应速度的一个方式就是使用缓存</p>
<p>缩短网页请求资源的距离，减少延迟</p>
<p>缓存文件可以重复利用，可以减少带宽，降低网络负荷</p>
<p>缓存的目标，尽快返回请求数据，减少延迟</p>
<h2 id="认识浏览器缓存"><a href="#认识浏览器缓存" class="headerlink" title="认识浏览器缓存"></a>认识浏览器缓存</h2><p>当浏览器请求一个网站，会加载很多资源，对于一些不经常变动的内容，会保存在本地文件中，下次访问就会快速加载</p>
<blockquote>
<p>被浏览器保存的文件就被称为缓存（不是 Cookie 或者 Localstorage）</p>
</blockquote>
<a id="more"></a>

<p><img src="/2020/01/07/Task/image-20191105234029395.png" alt></p>
<p>第一次进网站后刷新一次，可见文件来自缓存</p>
<p>但是让我把浏览器关闭，再次打开网站，又不是来自缓存了</p>
<p>该资源从本地硬盘或者浏览器内存读取</p>
<p>缓存的好处：</p>
<ul>
<li>减少页面加载时间</li>
<li>减少服务器负载</li>
</ul>
<p>浏览器是否使用缓存、缓存时间、是由服务器控制</p>
<p>浏览器请求资源时，服务器发回的响应的[响应头]部分的某些字段指明了有关缓存的关键信息</p>
<p>HTTP 报文中与缓存相关的首部字段</p>
<ol>
<li>通用首部字段</li>
</ol>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Cache-Control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Pragma</td>
<td>http1.0 时代，值为”no-cache”时禁用</td>
</tr>
</tbody></table>
<ol start="2">
<li>请求首部字段</li>
<li>响应手补字段</li>
<li>实体首部字段</li>
</ol>
<h3 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h3><p>有四种缓存位置，有各自的优先级，当依次查找缓存且都没有命中时候，才会去请求网络</p>
<ul>
<li>Service Worker</li>
<li>Memory Cache</li>
<li>Disk Cache</li>
<li>Push Cache</li>
</ul>
<h4 id="1-Service-Worker"><a href="#1-Service-Worker" class="headerlink" title="1. Service Worker"></a>1. Service Worker</h4><p>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能</p>
<p>传输协议必须是<code>HTTPS</code></p>
<p>Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全</p>
<p>与浏览器其他内建的缓存机制不同，它可以让用户自由控制缓存哪些文件，如何匹配、读取缓存，并且缓存时连续性的</p>
<hr>
**实现缓存**

<ol>
<li>注册 Service Worker</li>
<li>然后监听到 install 事件后就可以缓存需要的文件</li>
<li>用户再次访问，通过拦截请求的方式查询是否存在缓存，存在则读取，反之请求</li>
</ol>
<hr>
如果没有命中缓存，就需要调用`fetch()`获取数据。

<p>没用命中会根据缓存查找优先级去查找数据，无论是从 Memory Cache 还是从网络请求中获取的数据，都会显示是从 Service Worker 中获取</p>
<h4 id="2-Memory-Cache"><a href="#2-Memory-Cache" class="headerlink" title="2. Memory Cache"></a>2. Memory Cache</h4><p>Memory Cache 是内存中的缓存，主要包含的是当前页面中已经抓取到的资源，从页面上下载的样式、脚本、图片等，读取内存的数据比磁盘快，内存缓存读取高效，但是缓存持续性很短，会随着进程的释放而释放，<strong>比如一旦关闭页面，内存中的缓存就释放了</strong></p>
<p>内存缓存中有一块重要的缓存资源是<code>preloader</code>相关指令(eg: <code>&lt;link rel=&quot;prefetch&quot;&gt;</code>)下载的资源，preloader 相关指令是页面优化的常见手段之一，可以一边解析 js/css 文件，一边网络请求下一个资源</p>
<p><strong>内存缓存在缓存资源时不关心返回资源的 HTTP 缓存头 Cache-Control 的值，同时资源的匹配也并非仅仅对 URL 匹配，还可能会对 Content-Type，CORS 等其他特征做校验</strong></p>
<h4 id="3-Disk-Cache"><a href="#3-Disk-Cache" class="headerlink" title="3. Disk Cache"></a>3. Disk Cache</h4><p>Disk Cache 时存储在硬盘中的缓存，读取数据慢一点，但是都可以存储到硬盘中，比 Memory Cache 胜在容量和存储时效性上</p>
<p>Disk Cache 覆盖面最大，根据 HTTP Header 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源过期了需要重新请求。即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再去请求数据。</p>
<p>浏览器把文件存入内存 or 硬盘</p>
<ul>
<li>对于大文件，大概率不存在内存，反之优先</li>
<li>当前系统内存使用率高的话，文件优先存入硬盘</li>
</ul>
<h4 id="4-Push-Cache"><a href="#4-Push-Cache" class="headerlink" title="4. Push Cache"></a>4. Push Cache</h4><p>Push Cache（推送缓存）时 HTTP/2 中的内容，上面三种缓存都没有命中时，才会被使用，它只在会话（Session）中存在，一旦会话结束就被释放，缓存时间也很短暂，同时它严格执行 HTTP 头中的缓存指令</p>
<ul>
<li>所有资源都能被推送，并且能够被缓存</li>
<li>可以推送 no-cache 和 no-store 的资源</li>
<li>一旦连接被关闭，Push Cache 就会被释放</li>
<li>多个页面可以使用同一个 HTTP/2 的连接，也就可以使用同一个 Push Cache。这主要是依赖浏览器的实现而定，有的浏览器会对相同域名但不跳 tab 标签使用同一个 HTTP 连接</li>
<li>Push Cache 中的韩村只能被使用一次</li>
<li>浏览器可以拒绝接受已经存在的资源推送</li>
<li>可以给其他域名推送资源</li>
</ul>
<blockquote>
<p>当这四种缓存都没有命重，那么只能发起请求来获取资源</p>
<p>为了性能的考虑，大部分接口都应该选择好缓存策略</p>
<p>通常有 <strong>强缓存和协商缓存，而且缓存策略都是通过设置 HTTP Header 来实现的</strong></p>
</blockquote>
<h2 id="缓存过程分析"><a href="#缓存过程分析" class="headerlink" title="缓存过程分析"></a>缓存过程分析</h2><p>浏览器和服务器通信的方式为应答模式</p>
<p>浏览器发起 HTTP 请求 —— 服务器响应该请求</p>
<p>浏览器如何确定一个资源是否应该缓存，以及如何缓存？</p>
<p>浏览器第一次向服务器发起请求后拿到请求结果后，将请求结果哈缓存标志存入浏览器缓存，<strong>浏览器对于缓存的处理时根据第一次请求资源时返回的响应头来确定的</strong></p>
<ul>
<li>浏览器每次发起请求，都会在浏览器缓存中查找该请求的结果以及缓存标识</li>
<li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</li>
</ul>
<p>这就是浏览器缓存机制的关键，它确保了每个请求的缓存存入和读取</p>
<h2 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h2><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><blockquote>
<p>不会向服务器发送请求，直接从缓存中读取资源，在 chrome 控制台的 Network 选项中可以看到该请求返回 200 的状态码。Size 显示 from disk cache 或 from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control</p>
</blockquote>
<ol>
<li><p>Expires</p>
<p>缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点</p>
<p>Expires = max-age + 请求时间，需要和 Last-modified 结合使用</p>
<p>Expires 是 Web 服务器响应消息头字段，在响应 http 请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存读取数据，无需再次请求</p>
<p>但是它受限于本地时间，如果修改了本地时间，可能会造成缓存失败</p>
<p>对于服务器而言的时间</p>
</li>
<li><p>Cache-Control</p>
<p>Cache-Control 在 HTTP/1.1 中是最重要的规则，主要用于控制网页缓存。</p>
<p>当<code>Cache-Control:max-age=300</code>时，则代表这个请求正确返回时间（浏览器也会记录）的 5 分钟内再次加载资源，就会命中强缓存，对本地时间</p>
<p>Cache-Control 可以在请求头或者响应头中设置，并且可以组合多种指令：</p>
<hr>
**public:所有内容都将被缓存(客户端和代理服务器都可缓存)**。具体表现为，响应可被任何中间节点缓存。Browser $\Leftarrow$ proxy1 $\Leftarrow$ proxy2 $\Leftarrow$ Server，中间的proxy可以缓存资源，比如下一次再请求同一资源proxy1直接把自己缓存的东西给Browser而不在向proxy2请求

</li>
</ol>
<hr>
   **private:所有内容只有客户端可以缓存**，Cache-Control的默认取值。具体是，表示中间节点不允许缓存，对于Browser $\Leftarrow$ proxy1 $\Leftarrow$ proxy2 $\Leftarrow$ Server，proxy会把Server返回的数据发送给proxy1，自己不缓存任何数据。下一次请求时proxy会做好请求转发而不是擅自给自己缓存的数据

   <hr>
**no-cache:客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定。**表示不使用Cache-Control的缓存控制方式做前置验证，使用Etag或者Last-Modified字段来控制。**设置no-cache后，不是浏览器不缓存数据，而是浏览器在使用缓存数据时，需要先确认一下数据是否还和服务器保持一致**

<hr>
   no-store:所有内容都不会被缓存，既不使用强制缓存，也不使用协商缓存

   <hr>
3. Expires和Cache-Control两者对比

<p>如果两者同时存在，Cache-Control 优先级高于 Expires</p>
<p>强缓存判断是否缓存的依据来自于是否超出某个时间或者时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务端最新的内容，需要到协商缓存策略来判断服务端内容是否已经发生了更新</p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>协商缓存就是在强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标志决定是否使用缓存的过程</p>
<ul>
<li>协商缓存生效，返回 304 和 Not Modified</li>
<li>协商缓存失效，返回 200 和请求结果</li>
</ul>
<p>协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag</p>
<ol>
<li><p>Last-Modified 和 If-Modified-Since</p>
<p>浏览器在第一次访问资源时，服务器返回资源的同时，在<code>response header</code>中添加<code>Last-Modified</code>的 header，值是资源在服务器上的最后修改时间，浏览器接收后缓存文件和 header</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Last-Modified: Fri, <span class="number">22</span> Jul <span class="number">2016</span> <span class="number">01</span>:<span class="number">47</span>:<span class="number">00</span> GMT</span><br></pre></td></tr></table></figure>

<p>浏览器下一次请求这个资源，浏览器检测到有 Last-Modified 这个 Header，于是添加 If-Modified-Since 这个 header，值就是 Last-Modified 中的值；服务器再次收到这个资源请求，会根据 If-Modified-Since 中的值和服务器中这个资源的最后修改时间对比，如果没有变化，返回 304 和空的响应体，直接从缓存读取，如果 If-Modified-Since 的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和 200</p>
   <hr>
Last-Modified存在一些弊端：
</li>
</ol>
<ul>
<li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源。<ul>
<li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会任务资源还是命中了，不会返回正确的资源</li>
</ul>
</li>
</ul>
<p>这说明根据文件修改时间来决定是否缓存尚有不足</p>
<hr>
2. ETag和If-None-Match

<p><strong>Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识（由服务器生成），只要资源有变化，Etag 就会重新生成。</strong></p>
<p>浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的 Etag 值放到 request header 里的 If-None-Match 里，服务器只需要比较客户端传来的 If-None-Match 跟自己服务器上该资源的 ETag 是否一致，就能很好的判断资源相对客户端而言是否被修改过了。如果服务器发现 ETag 匹配不上，那么直接以常规 GET 200 回包形式将新的资源（当然也包括了新的 ETag）发给客户端；如果 ETag 时一致的，则直接返回 304 知会客户端直接使用本地缓存即可</p>
   <hr>

<ol start="3">
<li><p>对比：</p>
<ul>
<li><p>在精确度上，Etag 要优于 Last-Modified，Last-Modified 的时间单位是秒，如果某个文件在 1s 内改变了多次，那么他们的 Last-Modified 其实并没有体现出修改，但是 Etag 每次都会确保了精度；如果是负载均衡的服务器，各个服务器生成的 Last-Modified 也可能不一致</p>
</li>
<li><p>在性能上，Etag 要逊色于 Last-Modified，Last-Modified 只需要记录时间，而 Etag 需要服务器通过算法来计算出一个 hash 值</p>
</li>
<li><p>优先级上，服务器校验优先考虑 Etag</p>
<p>​</p>
</li>
</ul>
</li>
</ol>
<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><blockquote>
<p>强制缓存优先于协商缓存进行，若强制缓存(Expires 和 Cache-Control)生效则直接使用缓存，若不失效则进行协商缓存(Last-Modified/If-Modified-Since 和 Etag/If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回 200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回 304，继续使用缓存</p>
</blockquote>
<p>如果什么缓存策略都没设置，浏览器会如何处理</p>
<p>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10%作为缓存时间</p>
<h3 id="实际场景应用缓存策略"><a href="#实际场景应用缓存策略" class="headerlink" title="实际场景应用缓存策略"></a>实际场景应用缓存策略</h3><h4 id="频繁变动的资源"><a href="#频繁变动的资源" class="headerlink" title="频繁变动的资源"></a>频繁变动的资源</h4><blockquote>
<p>Cache-Control：no-cache</p>
</blockquote>
<p>对于频繁变动的资源，首先需要使用 Cache-Control：no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样做虽然不能节省请求数量，但是能显著减少响应数据的大小</p>
<h4 id="不常变化的资源"><a href="#不常变化的资源" class="headerlink" title="不常变化的资源"></a>不常变化的资源</h4><blockquote>
<p>Cache-Control：max-age=31536000</p>
</blockquote>
<p>在处理这类资源时，给它们的 Cache-Control 配置了一个很大的 max-age=31536000（一年），这样浏览器之后请求相同的 URL 会命中强制缓存，为了解决更新的问题，就需要在文件名（或路径）中添加 hash，版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效（其实并未立即失效，只是不再使用了而已）</p>
<p>在线提供的类库（jquery 等）均采用这种模式</p>
<h3 id="用户行为对浏览器缓存的影响"><a href="#用户行为对浏览器缓存的影响" class="headerlink" title="用户行为对浏览器缓存的影响"></a>用户行为对浏览器缓存的影响</h3><p>用户在浏览器操作时，会触发什么样的缓存策略</p>
<ul>
<li>打开网页，地址栏输入地址：查找 disk cache 中是否有匹配。如果有则使用；没有则发送网络请求</li>
<li>普通刷新（F5）：因为 Tab 没有关闭，因此 memory cache 时可用的，会被优先使用（如果匹配的话）。其次才是 disk cache</li>
<li>强制刷新（Ctrl+F5）：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control：no-cache（为了兼容，还带了 Pragma：no-cache），服务器直接返回 200 和最新内容</li>
</ul>
<h1 id="前后端数据交互方法和原理"><a href="#前后端数据交互方法和原理" class="headerlink" title="前后端数据交互方法和原理"></a>前后端数据交互方法和原理</h1><h2 id="数据如何发送到后端"><a href="#数据如何发送到后端" class="headerlink" title="数据如何发送到后端"></a>数据如何发送到后端</h2><p>网站数据处理主要分为三层</p>
<blockquote>
<p>第一层：表示层，这一部分可以由 HTML、CSS 和 JavaScript 代码等来实现。通过前端代码可以实现网页的布局和设计。这一层也可以称为显示层。即浏览器打开能看到的网页</p>
<hr>
第二层：业务层，这层是负责处理数据的，常用的代码语言有PHP、JSP、Java等。通过这些后台处理语言的算法来处理前台传回的数据。必要时进行操作数据库，然后把结果返回给前端网页

<hr>
第三层：数据层，这个是数据库，用来存储数据的。通过业务层的操作可以实现增删改数据库的操作
</blockquote>
<p>用户在表示层，即网页端填入数据，点击提交触发后台处理机制。</p>
<p>这时候数据会传到后台的代码进行处理。这部分代码根据不同的网站可以使用不同的编程语言来实现。代码会根据预设的算法将接收到的数据进行处理之后会相应的对数据库进行操作，存储数据等。</p>
<p>成功操作完数据库之后，业务层的代码会再想表示层传回一个指令通知填写成功</p>
<h2 id="客户端服务端交互"><a href="#客户端服务端交互" class="headerlink" title="客户端服务端交互"></a>客户端服务端交互</h2><h3 id="网络服务器和-HTTP"><a href="#网络服务器和-HTTP" class="headerlink" title="网络服务器和 HTTP"></a>网络服务器和 HTTP</h3><p>网络浏览器通过超文本标记语言传输协议(HTTP)和网络服务器(web servers)</p>
<p>当在网页上点击一个链接、提交一个表单，或进行一次搜索时，浏览器发送一个 HTTP 请求给服务器</p>
<p>这个请求包含：</p>
<ul>
<li><p>一个用来识别目标服务器和资源的 URL（如 HTML 文档、存储在服务器上的一个特定数据，或者一个用来运行的工具等）</p>
</li>
<li><p>一个定义了请求行为的方法（获得一个文档或者上传某些数据）</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>获取一份指定的资源（如 HTML 文档）</td>
</tr>
<tr>
<td>POST</td>
<td>创建一份新的资源（添加新的文章，给数据库增加新的节点）</td>
</tr>
<tr>
<td>HEAD</td>
<td>获取相关指定资源的元数据信息，而不会像 GET 的内容部分</td>
</tr>
<tr>
<td>PUT</td>
<td>更新一份已经存在的资源</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除指定的资源</td>
</tr>
</tbody></table>
</li>
<li><p>额外的信息可以和请求一起被编码（eg：HTML 表单数据）信息可以被编码</p>
<ul>
<li><p>URL 参数：GET 请求通过在 URL 末尾增加的键值对，来编码包含在发送给服务器的 URL 中的数据 eg: <code>http://mysite.com?name=Fred&amp;age=11</code></p>
<p>使用<code>?</code>将 URL 剩余部分和 URL 参数分隔开</p>
<p>使用<code>=</code>将名称和与之相关的值分给开</p>
<p>使用<code>&amp;</code>分隔不同的键值对</p>
<p>被用户改变然后提交时，URL 参数是不安全的，一个 URL 参数或者 GET 请求是不会用来在服务器上更新数据的</p>
</li>
<li><p>POST 数据：POST 请求会增加新的资源，这些数据会在请求体中编码</p>
</li>
<li><p>客户端 cookie：cookies 包含与客户相关的会话数据，服务器可以用这些数据来判断用户的登录状态以及用户是否有资源的权限</p>
</li>
</ul>
</li>
</ul>
<p>网络服务器等待来自客户的请求信息，当请求到达时处理，然后发给浏览器 HTTP 响应消息。回应包含一个 HTTP 响应状态码来暗示请求是都成功（200 OK 连接成功，404 Not Found 资源未找到，403 Forbidden 用户没有被授权查看资源）一个成功的响应主体，会包含 GET 请求所有的资源</p>
<h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><p>静态网站是指每当请求一个特定的资源时，会从服务器返回相同的硬编码内容</p>
<p>当你有少量页面时，向每个用户发送相同的内容时，静态网站是最佳选择， 然而随着页面数量的增加，它们的维护成本也会很高。</p>
<p>存在反复添加类似代码的问题</p>
<p><img src="/2020/01/07/Task/image-20191116155614919.png" alt></p>
<p>当用户想要导航到页面时，浏览器会发送一个指定 HTML 页面的 URL 的 HTTP 的 FET 请求</p>
<p>服务器从它的文件系统中检索所请求的文档，并返回包含文档和 HTTP 响应状态码<code>200 OK</code>的 HTTP 响应，</p>
<h1 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h1><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><blockquote>
<p>函数防抖</p>
<p>函数防抖(debounce)：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果在设定的时间到来之前，又一次触发了时间，就重新开始延时。</p>
</blockquote>
<p>比如，持续触发 scroll 事件时，并不执行 handle 函数，当 1000ms 内没有触发 scroll 事件时，才会岩石触发 scroll 事件</p>
<p><img src="/2020/01/07/Task/image-20191114132834533.png" alt></p>
<h3 id="防抖函数是基于定时器来实现的"><a href="#防抖函数是基于定时器来实现的" class="headerlink" title="防抖函数是基于定时器来实现的"></a>防抖函数是基于定时器来实现的</h3><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a><code>setTimeout()</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> timerId = setTimeout(func | code, delay);</span><br></pre></td></tr></table></figure>

<p>接受两个参数，要推迟执行的函数名或一段代码，第二个参数是要推迟执行的毫秒数</p>
<h4 id="setTimeout-传参"><a href="#setTimeout-传参" class="headerlink" title="setTimeout()传参"></a><code>setTimeout()</code>传参</h4><p>还可以添加更多的参数，它们将被传入推迟执行的函数（回调函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">1000</span>,</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//老版本中不支持传入额外参数，所以在匿名函数中调用一个回调函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myFuc(<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bind or apply方法，把参数绑定到回调函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">arg1</span>) </span>&#123;&#125;.bind(undefinded, <span class="number">10</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//undefined绑定到全局作用域</span></span><br></pre></td></tr></table></figure>

<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>回调函数中的 this</p>
<p>推迟执行的回调函数是某个对象的方法，<strong>那么 this 指向全局环境，而不是定义时所在的对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  x: <span class="number">2</span>,</span><br><span class="line">  y: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">setTimeout(o.y, <span class="number">1000</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="执行回调间隔事件长度"><a href="#执行回调间隔事件长度" class="headerlink" title="执行回调间隔事件长度"></a>执行回调间隔事件长度</h4><h3 id="setTimeout运行机制"><a href="#setTimeout运行机制" class="headerlink" title="setTimeout运行机制"></a><code>setTimeout</code>运行机制</h3><p>将指定的代码移出本次执行，等到下一轮 Event Loop 时，再检查是否到了指定时间，如果到了，就执行，反之等待下一轮，所以必须等到本次执行的所有代码都执行完，才会执行</p>
<p>setTimeout(f,0)将第二个参数设为 0，作用是让 f 在现有的任务（脚本的同步任务和“任务队列”中已有的事件）一结束就立刻执行。也就是说，setTimeout(f,0)的作用是，尽可能早地执行指定的任务。</p>
<h2 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a><code>clearTimeout()</code></h2><p>接受返回的计数器编号，取消对应的计时器</p>
<p>如果在延时期限到达之前取消延执行，可以使用 window.clearTimeout(timeoutId)方法，该方法接收一个 id，表示一个定时器。这个 id 是由 setTimeout 方法返回的</p>
<p>一个 clearTimeout 实际应用的例子。有些网站会实时将用户在文本框的输入，通过 Ajax 方法传回服务器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'textarea'</span>).on(<span class="string">'keydown'</span>, ajaxAction);</span><br></pre></td></tr></table></figure>

<p>这样写有一个很大的缺点，就是如果用户连续击键，就会连续触发 keydown 事件，造成大量的 Ajax 通信。这是不必要的，而且很可能会发生性能问题。正确的做法应该是，设置一个门槛值，表示两次 Ajax 通信的最小间隔时间。如果在设定的时间内，发生新的 keydown 事件，则不触发 Ajax 通信，并且重新开始计时。如果过了指定时间，没有发生新的 keydown 事件，将进行 Ajax 通信将数据发送出去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">//声明计时器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="this、apply、call、bind"><a href="#this、apply、call、bind" class="headerlink" title="this、apply、call、bind"></a>this、apply、call、bind</h1><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote>
<p>this 永远指向最后调用它的那个对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'windowsName'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">'Cherry'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">//windowsName</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'inner:'</span> + <span class="keyword">this</span>); <span class="comment">//inner:window</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'outer:'</span> + <span class="keyword">this</span>); <span class="comment">//outer:window</span></span><br></pre></td></tr></table></figure>

<p>最后调用 a 的地方是 a() 前面没有调用的对象就是全局对象 window。相当于是 window.a()</p>
<h3 id="改变-this-的指向"><a href="#改变-this-的指向" class="headerlink" title="改变 this 的指向"></a>改变 this 的指向</h3><ul>
<li>使用箭头函数</li>
<li>函数内部使用<code>_this = this</code></li>
<li>使用 apply、call、bind</li>
<li>new 实例化一个对象</li>
</ul>
<h2 id="call-thisArgs-args…"><a href="#call-thisArgs-args…" class="headerlink" title="call(thisArgs [,args…])"></a>call(thisArgs [,args…])</h2><p>call 方法可以传递一个 thisArgs 参数和一个参数列表，thisArgs 指定了函数在运行期的调用者，也就是函数中的 this 对象。参数列表会被传入调用函数中</p>
<p>thisArgs 取值</p>
<ul>
<li>不传，或者传入 null，undefined，函数中的 this 指向 window 对象</li>
<li>传递另一个函数的函数名，函数中的 this 指向这个函数的引用</li>
<li>传递字符串、数值或布尔类型等基础类型，函数中的 this 指向其对应的包装对象，如 String、Number、Boolean</li>
<li>传递一个对象，函数中的 this 指向这个对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//输出函数a中的this对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">//定义函数b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'object'</span> &#125;; <span class="comment">//定义对象obj</span></span><br><span class="line"></span><br><span class="line">a.call(); <span class="comment">//window</span></span><br><span class="line">a.call(<span class="literal">null</span>); <span class="comment">//window</span></span><br><span class="line">a.call(<span class="number">1</span>); <span class="comment">//Number</span></span><br><span class="line">a.call(<span class="string">''</span>); <span class="comment">//String</span></span><br><span class="line">a.call(<span class="literal">true</span>); <span class="comment">//Boolean</span></span><br><span class="line">a.call(b); <span class="comment">//function b()&#123;&#125;</span></span><br><span class="line">a.call(obj); <span class="comment">//Object</span></span><br></pre></td></tr></table></figure>

<p>call 的核心功能，允许在对象上调用该对象没有定义的方法，并且这个方法可以访问该对象中的属性</p>
<p>使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p>
<p><code>call()</code> 允许为不同的对象分配和调用属于一个对象的函数/方法。</p>
<p><code>call()</code> 提供新的 <strong>this</strong> 值给当前调用的函数/方法。你可以使用 <code>call</code> 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。</p>
<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p><code>bind()</code>方法会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体。当目标函数被调用时，this 值绑定到<code>bind()</code>的第一个参数，该参数不能被重写，绑定函数被调用时，<code>bind()</code>也接受预设的参数提供给原函数。一个绑定函数也能使用 new 操作符创建对象：这种行为就像把原函数当成构造器。提供的<code>this</code>值被忽略，同时调用时的参数被提供给模拟函数</p>
<p>bind 函数的两个要点</p>
<ol>
<li>返回一个函数</li>
<li>可以传入参数</li>
</ol>
<blockquote>
<p>语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.bind(thisArg[,arg1[,arg2[,...]]])</span><br></pre></td></tr></table></figure>
</blockquote>
<p>参数含义</p>
<p><code>thisArg</code>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向，当使用[new 操作符]，调用绑定函数时，该参数无效</p>
<p><code>arg1,arg2,...</code>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法</p>
<p>返回值：返回由指定的 this 值和初始化参数改造的原函数拷贝</p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol>
<li><p>bind 方法不会立即执行函数，所以可以返回一个待执行函数</p>
<p><code>return function(){}</code></p>
</li>
<li><p>作用域绑定，可以使用 apply 或者 call 来实现</p>
</li>
<li><p>参数不确定可以用数组</p>
</li>
</ol>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="最简单的用法是创建一个无论怎么调用都有同样-this-值的函数"><a href="#最简单的用法是创建一个无论怎么调用都有同样-this-值的函数" class="headerlink" title="最简单的用法是创建一个无论怎么调用都有同样 this 值的函数"></a>最简单的用法是创建一个无论怎么调用都有同样 this 值的函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure>

<h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><p>使一个函数拥有预设的初值参数，这些参数作为第二个参数跟在 this 或其他对象后面，之后它们会被插入到目标函数的参数列表中的开始位置，传递给绑定函数的参数会跟在它们后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list1 = list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a function with a preset leading argument</span></span><br><span class="line"><span class="keyword">var</span> leadingThirtysevenList = list.bind(<span class="literal">undefined</span>, <span class="number">37</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list2 = leadingThirtysevenList(); <span class="comment">// [37]</span></span><br><span class="line"><span class="keyword">var</span> list3 = leadingThirtysevenList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [37, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><blockquote>
<p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数内置对象类型之一</p>
</blockquote>
<h3 id="new-做了什么"><a href="#new-做了什么" class="headerlink" title="new 做了什么"></a>new 做了什么</h3><ol>
<li>创建了一个全新的对象</li>
<li>这个对象会被执行[[Prototype]](也就是_proto_)链接</li>
<li>生成的新对象会绑定到函数调用的 this</li>
<li>通过 new 创建的每个对象将最终被[[Prototype]]链接到这个函数的 prototype 对象上</li>
<li>如果函数没有返回对象类型 Object（包括 Function，Array，Date，RegExg，Error），那么 new 表达式中的函数调用机会自动返回这个新的对象</li>
</ol>
<p>创建一个空对象，并使得该空对象继承 Func.prototype</p>
<p>执行构造函数，并将 this 指向刚刚创建的新对象</p>
<p>返回新对象</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全（XSS&amp;CSRF）</title>
    <url>/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&amp;CSRF)/</url>
    <content><![CDATA[<h1 id="前端安全-XSS-amp-CSRF"><a href="#前端安全-XSS-amp-CSRF" class="headerlink" title="前端安全(XSS&amp;CSRF)"></a>前端安全(XSS&amp;CSRF)</h1><h2 id="XSS-篇"><a href="#XSS-篇" class="headerlink" title="XSS 篇"></a>XSS 篇</h2><p>Cross-Site Scripting(跨站脚本攻击)，是一种代码注入攻击。</p>
<p>攻击者通过在目标网站注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可以获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全</p>
<ol>
<li>XSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨那些脚本是可信的，导致恶意脚本被执行</li>
<li>由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求</li>
<li>在部分情况下，由于输入的限制，注入的恶意脚本比较短。但可以通过引入外部的脚本，并由浏览器执行，来完成比较复杂的攻击策略</li>
</ol>
<a id="more"></a>

<h3 id="反射型-XSS（非持久型）"><a href="#反射型-XSS（非持久型）" class="headerlink" title="反射型 XSS（非持久型）"></a>反射型 XSS（非持久型）</h3><p>经过后端，不经过数据库，攻击方式仅具有一次性</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<hr>
 反射型 XSS 的数据流向是：浏览器 -> 后端 -> 浏览器。

<ol>
<li>反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等</li>
<li>由于需要用户主动打开恶意的 URL 才会生效，攻击者会结合多种手段诱导用户点击（社会工程学）</li>
<li>POST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表带提交页面，并引导用户点击），不常见</li>
</ol>
<hr>
#### 攻击演示

<h5 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h5><p>查看 php 源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;Hello '</span> . $_GET[ <span class="string">'name'</span> ] . <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里直接把 name 作为参数，直接引用，没有进行任何的过滤</p>
<p>直接就可以简单的注入&lt;script&gt;脚本</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117102338139.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117102507967.png" alt></p>
<p>这里可以直接在 input 框注入脚本</p>
<h5 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里会过滤掉&lt;script&gt;，但是它不区分大小写，而且是过滤掉整个标签的内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Script</span>&gt;</span><span class="actionscript">alert(<span class="string">"大写就可了"</span>)</span><span class="tag">&lt;/<span class="name">Script</span>&gt;</span></span><br><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert("双写绕过")&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117103159011.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117103334509.png" alt></p>
<h5 id="High"><a href="#High" class="headerlink" title="High"></a>High</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">"X-XSS-Protection: 0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里使用了正则表达式来过滤 script，也就是说不能用&lt;script&gt;来注入触发攻击</p>
<p>但是可以用其他的参数来触发，比如&lt;img src=”errorURL”&gt;，插入图片地址，或者&lt;a&gt;也可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"errorURL"</span> <span class="attr">onerror</span>=<span class="string">alert(</span>"触发错误以绕过")&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span> = <span class="string">alert(</span>"直接触发")&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117104411270.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117104612118.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117104804465.png" alt></p>
<h5 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">`Hello $&#123;name&#125;<span class="string">";&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;`</span></span><br></pre></td></tr></table></figure>

<p>把所有的预定义字符都转化为 HTML 实体</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">"This is some &lt;b&gt;bold&lt;/b&gt; text."</span>;</span><br><span class="line"><span class="keyword">echo</span> htmlspecialchars($str);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    This is some <span class="symbol">&amp;lt;</span>b<span class="symbol">&amp;gt;</span>bold<span class="symbol">&amp;lt;</span>/b<span class="symbol">&amp;gt;</span> text.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is some &lt;b&gt;bold&lt;&#x2F;b&gt; text;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117105630252.png" alt></p>
<p>这里即使是想以标签的形式插入，但是插入的结果，确实以字符串形式填入，不会转义为标签</p>
<h3 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h3><p>不经过后端,DOM—based XSS 漏洞是基于文档对象模型 Document Objeet Model,DOM)的一种漏洞,dom - xss 是通过 url 传入参数去控制触发的。</p>
<ol>
<li>用户打开带有恶意代码的 URL</li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站的接口执行攻击者指定的操作</li>
</ol>
<hr>
DOM-XSS 的数据流向是：URL-->浏览器

<p>DOM 型 XSS 跟前两种 XSS 的区别</p>
<p>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞</p>
<hr>
#### 攻击演示

<h5 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No protections, anything goes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117113237470.png" alt></p>
<p>点击 Select 过后，默认的 default=English</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117113404758.png" alt></p>
<p>当修改 default 的值，就会本地的修改页面的渲染了</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117115234132.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117115557967.png" alt></p>
<h5 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123;</span><br><span class="line">    $default = $_GET[<span class="string">'default'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos ($default, <span class="string">"&lt;script"</span>) !== <span class="keyword">false</span>) &#123;<span class="comment">//这里限制了script</span></span><br><span class="line">        header (<span class="string">"location: ?default=English"</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;&lt;svg%20onload%20&#x3D;%20alert(&quot;直接触发&quot;)&gt;&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117140904220.png" alt></p>
<h5 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">"default"</span>, $_GET ) &amp;&amp; !is_null ($_GET[ <span class="string">'default'</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> ($_GET[<span class="string">'default'</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"French"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"English"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"German"</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Spanish"</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">"location: ?default=English"</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>#注入，绕过白名单</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117150043503.png" alt></p>
<p>绕过了前端验证#如同在后面插入一个注释</p>
<h3 id="存储型-XSS（持久型）"><a href="#存储型-XSS（持久型）" class="headerlink" title="存储型 XSS（持久型）"></a>存储型 XSS（持久型）</h3><p>经过后端，经过数据库</p>
<ol>
<li>攻击者将恶意代码提交到目标网站的数据库中</li>
<li>用户打开目标网站时，网站的服务端将恶意代码从数据库取出，拼接带 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<hr>
 浏览器 -> 后端 -> 数据库 -> 后端 -> 浏览器

<p>这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等</p>
<p>最严重的一类，如留言板，如果有漏洞，恶意代码会存入数据库，别的用户来看留言板，会向后台发一个请求，拿到别人的留言内容，前端就会读取到这个恶意代码</p>
<h4 id="攻击演示"><a href="#攻击演示" class="headerlink" title="攻击演示"></a>攻击演示</h4><h5 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );<span class="comment">//移除一些字符，/n，/t 空格</span></span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = stripslashes( $message ); <span class="comment">//对字符串进行转义，比如删除了\，但是没有对输入的数据进行检查</span></span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117110540915.png" alt></p>
<p>成功注入并弹窗，这里的插入会使得永久保存，并且所有的客户端都可见，说明它已经存储在了服务器中，而且可以发现与反射型相比，它的 URL 并没有发生改变，数据的传输</p>
<h5 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'btnSign'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $message = trim( $_POST[ <span class="string">'mtxMessage'</span> ] );</span><br><span class="line">    $name    = trim( $_POST[ <span class="string">'txtName'</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    $message = strip_tags( addslashes( $message ) );</span><br><span class="line">    $message = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $message ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">    $message = htmlspecialchars( $message );<span class="comment">//！！这里对message进行了编码，但是发现并没有对name参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    $name = str_replace( <span class="string">'&lt;script&gt;'</span>, <span class="string">''</span>, $name );</span><br><span class="line">    $name = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $name ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    $query  = <span class="string">"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );"</span>;</span><br><span class="line">    $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $query ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是可以发现，name 是有字数的限制，但是可以进入控制台修改</p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117111902805.png" alt></p>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117112400329.png" alt></p>
<p>在 name 的 input 框中插入成功</p>
<h5 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h5><p>正则表达式的过滤，其实效果同反射型</p>
<h5 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h5><p>也是，将两个参数都实体化了，无法绕过</p>
<h3 id="可能注入-XSS-的情况"><a href="#可能注入-XSS-的情况" class="headerlink" title="可能注入 XSS 的情况"></a>可能注入 XSS 的情况</h3><ul>
<li>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入</li>
<li>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）</li>
<li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签</li>
<li>在标签的<code>href</code>、<code>src</code>等属性中，包含<code>javascript:</code>等可执行代码</li>
<li>在<code>onload</code>、<code>onerror</code>、<code>onclick</code>等事件中，注入不受控制代码</li>
<li>在<code>style</code>属性和标签中，包含类似<code>background-image:url(&quot;javascript:...&quot;);</code>的代码（浏览器已经可以防范了）</li>
<li>在<code>style</code>属性和标签中，包含类似<code>expression(...)</code>的 CSS 表达式代码（也可以防范）</li>
</ul>
<h3 id="预防存储型和反射性-XSS-攻击"><a href="#预防存储型和反射性-XSS-攻击" class="headerlink" title="预防存储型和反射性 XSS 攻击"></a>预防存储型和反射性 XSS 攻击</h3><h4 id="纯前端渲染"><a href="#纯前端渲染" class="headerlink" title="纯前端渲染"></a>纯前端渲染</h4><p>纯前端渲染的过程</p>
<ol>
<li>浏览器先加载一个静态的 HTML，从 HTML 中不包含任何跟业务相关的数据</li>
<li>然后浏览器执行 HTML 中的 JavaScript</li>
<li>JavaScript 通过 AJAX 加载业务数据，调用 DOM API 更新到页面上</li>
</ol>
<p>在纯前端渲染中，会明确的告诉浏览器：下面要设置的内容是文本（.innerText），还是属性（.setAttribute），还是样式（.style）等等，浏览器不会轻易被欺骗，因而不会执行预期外的代码</p>
<p>纯前端渲染还要注意避免 DOM 型 XSS 漏洞（例如 onload 事件和 href 中的 javascript:xxx 等）</p>
<p>在很多内部、管理系统中，采用纯前端渲染是非常合适的。但对于性能要求高，或有 SEO 需求的页面，仍然需要面对拼接 HTML 的问题</p>
<h4 id="转义-HTML"><a href="#转义-HTML" class="headerlink" title="转义 HTML"></a>转义 HTML</h4><p>如果拼接 HTML 是必要的，就需要采用合适的转义库，对 HTML 模板各处插入点进行充分的转义</p>
<p>常用的模板引擎，如 doT.js，ejs，FreeMarker 等，对于 HTML 转义的规则</p>
<p>把<code>&amp; &lt; &gt; &quot; &#39; /</code>几个字符转义，起到一定的 XSS 防护作用</p>
<h3 id="预防-DOM-型-XSS-攻击"><a href="#预防-DOM-型-XSS-攻击" class="headerlink" title="预防 DOM 型 XSS 攻击"></a>预防 DOM 型 XSS 攻击</h3><p>在使用<code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code>时要小心</p>
<p>不要把不可信的数据作为 HTML 插入到页面，应该尽量使用<code>.textContene</code>、<code>.setAttribute()</code>等</p>
<p>DOM 中的内联事件监听器，location、onclick、onerror、onload、onmouseover 等，&lt;a&gt;标签的 href 属性</p>
<p>JavaScript 中的 eval()、setTimeout()、setInterval()等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，会造成安全隐患。</p>
<h3 id="其他-XSS-防御手段"><a href="#其他-XSS-防御手段" class="headerlink" title="其他 XSS 防御手段"></a>其他 XSS 防御手段</h3><ol>
<li><p>Content Security Policy</p>
</li>
<li><p>输入内容长度控制</p>
<p>对于不受信任的输入，都应该限定一个合理的长度，虽然无法完全防止，但是可以增加 XSS 攻击的难度</p>
</li>
<li><p>HTTP-only Cookie</p>
<p>禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取 Cookie</p>
</li>
<li><p>敏感操作使用验证码，防止脚本冒充用户提交危险操作</p>
</li>
</ol>
<h2 id="CSRF-篇"><a href="#CSRF-篇" class="headerlink" title="CSRF 篇"></a>CSRF 篇</h2><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的</p>
<h3 id="一个常见的攻击过程"><a href="#一个常见的攻击过程" class="headerlink" title="一个常见的攻击过程"></a>一个常见的攻击过程</h3><ul>
<li>受害者登录 a.com，并保留了登录凭证（Cookie）</li>
<li>攻击者引诱受害者访问量 b.com（弹窗什么的）</li>
<li>b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带 a.com 的 Cookie（比如微博，点了一下，多了一些奇奇怪怪的关注）</li>
<li>a.com 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</li>
<li>a.com 以受害者的名义执行了 act=xx</li>
<li>攻击完成。攻击者在受害者不知情的情况下，冒充了受害者，让 a.com 执行了自己定义的操作</li>
</ul>
<p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/sequence_diagram.svg" alt></p>
<h3 id="攻击测试"><a href="#攻击测试" class="headerlink" title="攻击测试"></a>攻击测试</h3><h4 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h4><p><img src="/2020/01/07/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8(XSS&CSRF)/image-20191117153204469.png" alt></p>
<p>在 URL 上面就已经显示了</p>
<p>在 XSS store 类型中就可以进行更改</p>
<h4 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">'HTTP_REFERER'</span> ] ,$_SERVER[ <span class="string">'SERVER_NAME'</span> ]) !== <span class="keyword">false</span> )</span><br></pre></td></tr></table></figure>

<p>多了一层校验，检查 header 中的 referer 域是否含有服务器名（header 中的 host 域的值），若是含有，可以进行更改，反之不行</p>
<p>可以将一个钓鱼网站的名字改成 host 的值，从而改变密码</p>
<h3 id="GET-类型的-CSRF"><a href="#GET-类型的-CSRF" class="headerlink" title="GET 类型的 CSRF"></a>GET 类型的 CSRF</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bank.example/withdraw?amount=100000&amp;for=hacker"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>受害者访问含有这个 img 的页面后，浏览器会主动向<code>http://bank.example/withdraw?account=someone&amp;amount=100000&amp;for=hacker</code>发出一次 HTTP 请求。bank.example 就会收到包含受害者登录信息的一次跨域请求</p>
<h3 id="POST-类型的-CSRF"><a href="#POST-类型的-CSRF" class="headerlink" title="POST 类型的 CSRF"></a>POST 类型的 CSRF</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://bank.example/withdraw"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"account"</span> <span class="attr">value</span>=<span class="string">"someone"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"amount"</span> <span class="attr">value</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"for"</span> <span class="attr">value</span>=<span class="string">"hacker"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>hidden，表单设置为隐藏的</p>
<p>访问该页面后，表单会<strong>自动提交</strong>，相当于模拟用户完成了一次 POST 操作</p>
<h3 id="点击链接类型的-CSRF"><a href="#点击链接类型的-CSRF" class="headerlink" title="点击链接类型的 CSRF"></a>点击链接类型的 CSRF</h3><p>这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户点击</p>
<h3 id="CSRF-攻击特点"><a href="#CSRF-攻击特点" class="headerlink" title="CSRF 攻击特点"></a>CSRF 攻击特点</h3><ul>
<li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生</li>
<li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据</li>
<li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”</li>
<li>跨站请求可以用各种方式：URL、超链接、CORS、Form 提交等等</li>
</ul>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SCSS</title>
    <url>/2020/01/06/SCSS/</url>
    <content><![CDATA[<h1 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h1><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义变量和值</span></span><br><span class="line"><span class="variable">$bgcolor</span>: lightblue;</span><br><span class="line"><span class="variable">$textcolor</span>: darkblue;</span><br><span class="line"><span class="variable">$fontsize</span>: <span class="number">18px</span>;</span><br><span class="line"><span class="comment">// 使用变量</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$bgcolor</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$textcolor</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontsize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="Sass-变量"><a href="#Sass-变量" class="headerlink" title="Sass 变量"></a>Sass 变量</h2><p>变量用于存储一些信息，可以重复使用</p>
<p>可以是，字符串、数字、颜色、布尔值、列表、null 值</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span>: value;</span><br></pre></td></tr></table></figure>

<h2 id="Sass-作用域"><a href="#Sass-作用域" class="headerlink" title="Sass 作用域"></a>Sass 作用域</h2><p>变量的作用域只能在当前的层级上有效果，即，局部作用域</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$myColor</span>: green; <span class="comment">//只在h1里有用，局部作用域</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转化到 css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="global"><a href="#global" class="headerlink" title="!global"></a>!global</h3><p>用来设置全局变量</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$myColor</span>: red;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$myColor</span>: green !global; <span class="comment">//全局作用域</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样 p 标签的样式也是 green，就都改了</p>
<h2 id="Sass-嵌套规则和属性"><a href="#Sass-嵌套规则和属性" class="headerlink" title="Sass 嵌套规则和属性"></a>Sass 嵌套规则和属性</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一种标签类名之类的一些嵌套</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="父选择器的标识符-amp"><a href="#父选择器的标识符-amp" class="headerlink" title="父选择器的标识符&amp;"></a>父选择器的标识符&amp;</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="comment">//这是错误的写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正解</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sass-嵌套属性"><a href="#Sass-嵌套属性" class="headerlink" title="Sass 嵌套属性"></a>Sass 嵌套属性</h3><p>很多 CSS 属性都有相同的前缀</p>
<p>eg：<code>font-family</code>、<code>font-size</code>、<code>font-weight</code>等等等</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过一个:来进行嵌套属性</span></span><br><span class="line"><span class="attribute">font</span>: &#123;</span><br><span class="line">  family: Helvetica, sans-serif;</span><br><span class="line">  size: <span class="number">18px</span>;</span><br><span class="line">  weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">text: &#123;</span><br><span class="line">  align: center;</span><br><span class="line">  <span class="attribute">transform</span>: lowercase;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可以编译成正常的</p>
<h2 id="Sass-import"><a href="#Sass-import" class="headerlink" title="Sass @import"></a>Sass @import</h2><h3 id="Sass-导入文件"><a href="#Sass-导入文件" class="headerlink" title="Sass 导入文件"></a>Sass 导入文件</h3><p>类似 CSS，Sass 支持<code>@import</code>指令</p>
<p>可以导入其他文件等内容</p>
<p><strong><code>CSS @import</code>指令每次调用都会创建一个额外的 HTTP 请求。<code>Sass @import</code>指令将文件包含在 CSS 中，不需要额外的 HTTP 请求</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> filename;</span><br></pre></td></tr></table></figure>

<p>不需要指定后缀</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'variables'</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'colors'</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reset.scss</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//standard.scss</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码转化之后，可以合并到同一个 CSS 文件中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Sass-Partials"><a href="#Sass-Partials" class="headerlink" title="Sass Partials"></a>Sass Partials</h3><p>不要编译到同一个 CSS 文件的方法，在文件名开头加一个下划线</p>
<p>表示不要将其编译到 CSS 文件，但是导入的时候不加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_filename</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//_colors.scss</span></span><br><span class="line"><span class="variable">$myPink</span>: <span class="number">#ee82ee</span>;</span><br><span class="line"><span class="variable">$myBlue</span>: <span class="number">#4169e1</span>;</span><br><span class="line"><span class="variable">$myGreen</span>: <span class="number">#8fbc8f</span>;</span><br></pre></td></tr></table></figure>

<p>导入的时候，不需要下划线</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'colors'</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$myBlue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请不要将带下划线与不带下划线的同名文件放置在同一个目录下，比如，_colors.scss 和 colors.scss 不能同时存在于同一个目录下，否则带下划线的文件将会被忽略。</p>
<h2 id="Sass-mixin-与-include"><a href="#Sass-mixin-与-include" class="headerlink" title="Sass @mixin 与@include"></a>Sass @mixin 与@include</h2><p>@mixin 指令允许定义一个可以在整个样式表中重复使用的样式</p>
<p>@include 指令可以将混入(mixin)引入到文档中</p>
<h3 id="定义一个混入"><a href="#定义一个混入" class="headerlink" title="定义一个混入"></a>定义一个混入</h3><p>混入(mixin)通过@mixin 指令来定义</p>
<p><code>@mixin name{property:value;property:value;...}</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> important-text &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注：<code>-</code>与<code>_</code>是等价的</strong></p>
<h3 id="使用混入"><a href="#使用混入" class="headerlink" title="使用混入"></a>使用混入</h3><p>@include 指令可用于包含一混入：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">selector &#123;</span><br><span class="line">  <span class="keyword">@include</span> mixin-name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>包含 important-text 混入代码</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> important-text &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.danger</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> important-text;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转换后的 CSS 代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.danger</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>混入中可以包含引入的混入</p>
<h3 id="向混入传递变量"><a href="#向混入传递变量" class="headerlink" title="向混入传递变量"></a>向混入传递变量</h3><p>混入可以接收参数</p>
<p>也可以向混入传递变量</p>
<h4 id="定义可以接收参数的混入"><a href="#定义可以接收参数的混入" class="headerlink" title="定义可以接收参数的混入"></a>定义可以接收参数的混入</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//混入接收两个参数</span></span><br><span class="line"><span class="keyword">@mixin</span> bordered(<span class="variable">$color</span>, <span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myAricle</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> bordered(blue, <span class="number">1px</span>); <span class="comment">//调用混入并传参</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myNotes</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> bordered(red, <span class="number">2px</span>); <span class="comment">// 调用混入，并传递两个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="混入的参数可以定义默认值"><a href="#混入的参数可以定义默认值" class="headerlink" title="混入的参数可以定义默认值"></a>混入的参数可以定义默认值</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> bordered(<span class="variable">$color</span>: blue, <span class="variable">$width</span>: <span class="number">1px</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$width</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> sexy-border(<span class="variable">$color</span>, <span class="variable">$width</span>: <span class="number">1in</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    color: <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="selector-tag">style</span>: dashed;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> sexy-border(blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> sexy-border(blue, <span class="number">2in</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>不确定一个混入或者一个函数使用多少参数。可以用<code>...</code>来设置可变参数</p>
<p>创建一个盒阴影</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$shadows</span>...) &#123;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> box-shadow(<span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转码后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.shadows</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="浏览器前缀使用混入"><a href="#浏览器前缀使用混入" class="headerlink" title="浏览器前缀使用混入"></a>浏览器前缀使用混入</h4><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> transform(<span class="variable">$property</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myBox</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> transform(rotate(<span class="number">20deg</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转码为 CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myBox</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">  <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sass-extend-与继承"><a href="#Sass-extend-与继承" class="headerlink" title="Sass @extend 与继承"></a>Sass @extend 与继承</h2><p>@extend 指令告诉 Sass 一个选择器的样式从另一选择器继承</p>
<p>当大量样式一致的时候，继承就很简单了</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-basic</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button-report</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .button-basic;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-submit</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .button-basic;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转码过后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-basic</span>,</span><br><span class="line"><span class="selector-class">.button-report</span>,</span><br><span class="line"><span class="selector-class">.button-submit</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-report</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-submit</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
