<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leyla Sheth</title>
  
  <subtitle>BingYan Studio FED Fox</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-28T06:59:04.397Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lee Yue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Position详解</title>
    <link href="http://yoursite.com/2020/04/28/Position%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/04/28/Position%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-04-28T08:45:50.000Z</published>
    <updated>2020-04-28T06:59:04.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Position-详解"><a href="#Position-详解" class="headerlink" title="Position 详解"></a>Position 详解</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a><code>static</code></h2><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/static.png" alt="image-20200406222800155"></p><a id="more"></a><p>HTML 中所有元素的 position 默认值都是 static</p><p>static 会跟随 HTML 排版的流程（flow）移动</p><p>例如在上方加一行文字，该 div 会向下移动</p><p>随着排版流动，不会脱离文档流</p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/static1.png" alt="image-20200406223000355"></p><p><strong>static 对于 top、left、right、bottom 设定值不会生效</strong></p><h2 id="absolute绝对定位"><a href="#absolute绝对定位" class="headerlink" title="absolute绝对定位"></a><code>absolute</code>绝对定位</h2><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/absolute.png" alt="image-20200406223353397"></p><p>absolute 元素会固定在所设定的位置，不会跟随 HTML 排版的流程移动</p><p>但是如果 absolute 元素所在的容器是有滚动条的，它会随着滚动条滚动而移动</p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/absolute1.png" alt="image-20200406223633389"></p><p>如果将 absolute 元素加入到 absolute 元素里，<strong>是根据父元素来定位的</strong></p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/absolute2.png" alt="image-20200406223841071"></p><h2 id="relative相对定位"><a href="#relative相对定位" class="headerlink" title="relative相对定位"></a><code>relative</code>相对定位</h2><p>relative 与 static 相似，都是会跟随 HTML 的排版流程移动，而它比 static 多了 top、left、right、bottom 的设定。</p><p>即它跟随 HTML 排版流程去定位之余，还可以通过 op、left、right、bottom 去调整位置，<strong>相对于自身去移动的</strong></p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/relative.png" alt="image-20200406224145202"></p><p>除此之外，relative 最重要的一个功能是在它里面的 absolute 元素会根据 relative 的位置去定位</p><p>relative 效果：</p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/relative1.png" alt="image-20200406224610641"></p><p>static 效果：absolute 元素是完全无视 static 的</p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/relative2.png" alt="image-20200406224711242"></p><p>relative 与 static 比较，主要增加了两大功能</p><ol><li>具备 top、left、right、bottom 的设定，相对于自身的移动</li><li>可以让 absolute 子元素根据它的位置去定位</li></ol><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a><code>fixed</code></h2><p>fixed 与 absolute 很相似</p><p>不同的地方有两点</p><ol><li><p>fixed 会定位到屏幕中的固定位置，即使页面滚动，也会一直保持在那个位置</p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/fixed.png" alt="image-20200406225330388"></p></li><li><p>如果 fixed 元素有设定 top、left、right、bottom 的属性，即使放在 relative 里，fixed 也会根据页面，也就是 body 去定位，而不会根据 relative 去定位</p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/fixed1.png" alt="image-20200406225753737"></p><p><br></p><p>fixed 初始默认是在 relative 中（滚动页面时它还是不会滚动的），但是一旦设定了 top、left、right、bottom，它就会脱离 relative 的束缚</p></li></ol><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a><code>sticky</code></h2><p>sticky 在页面滚动过程中，当贴到顶部时，就固定在顶部了，因为<code>top:0</code></p><p>所以当它的 top 与上方相距 0px 时就会触发</p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/sticky.png" alt="image-20200406230224827"></p><p><img src="/2020/04/28/Position%E8%AF%A6%E8%A7%A3/sticky1.png" alt="image-20200406230429363"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Position-详解&quot;&gt;&lt;a href=&quot;#Position-详解&quot; class=&quot;headerlink&quot; title=&quot;Position 详解&quot;&gt;&lt;/a&gt;Position 详解&lt;/h1&gt;&lt;h2 id=&quot;static&quot;&gt;&lt;a href=&quot;#static&quot; class=&quot;headerlink&quot; title=&quot;static&quot;&gt;&lt;/a&gt;&lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/04/28/Position%E8%AF%A6%E8%A7%A3/static.png&quot; alt=&quot;image-20200406222800155&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="布局" scheme="http://yoursite.com/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>React-Redux</title>
    <link href="http://yoursite.com/2020/04/28/React+Redux/"/>
    <id>http://yoursite.com/2020/04/28/React+Redux/</id>
    <published>2020-04-28T08:00:50.000Z</published>
    <updated>2020-04-28T07:09:30.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-回顾"><a href="#React-回顾" class="headerlink" title="React 回顾"></a>React 回顾</h2><h3 id="组件之间传递数据"><a href="#组件之间传递数据" class="headerlink" title="组件之间传递数据"></a>组件之间传递数据</h3><p>组件之间用 props 传递数据</p><ul><li>使用<code>&lt;组件 数据=&quot;值&quot;&gt;</code>的形式传递</li><li>组件里使用<code>this.props</code>获取值</li><li>如果组件只有<code>render</code>函数，还可以用函数的形式写组件</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component&#123;</span><br><span class="line">render()&#123;</span><br><span class="line">    const name &#x3D; &quot;Leyla&quot;;</span><br><span class="line">    return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Peo lastname&#x3D;&quot;Lee&quot;&gt;&lt;&#x2F;Peo&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Peo extends React.Component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return &lt;div&gt;&#123;this.props.lastname&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Peo(props)&#123;</span><br><span class="line">  return &lt;div&gt;&#123;this.props.lastname&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redux-开始"><a href="#Redux-开始" class="headerlink" title="Redux 开始"></a>Redux 开始</h2><h3 id="Redux-基础知识"><a href="#Redux-基础知识" class="headerlink" title="Redux 基础知识"></a>Redux 基础知识</h3><p>Redux 专注于状态管理</p><p>单一状态，单向数据流</p><p>核心概念：store、state、action、reducer</p><p>React 在数据量不大的时候，啥玩意都 setState</p><p>当数据量多了的时候，所有的状态归 redux 管理，react 只负责 view（显示）</p><p>redux 中有一个 store，所有组件的状态，都在那里有记录（state）</p><p>需要改变的时候，就告诉 dispatch 要做什么（action）</p><p>处理变化的 reducer 拿到 state 和 action，生成新的 state</p><p>首先通过 reducer 新建 store，随时通过 store.getState 获取状态</p><p>需要状态变更，store.dispatch(action)来修改状态</p><p>Reducer 函数接受 state 和 action，返回新的 state，可以用 store.subscribe 监听每次修改</p><h4 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h4><p>整个应用的<code>state</code>被储存在一棵 object tree 中，这个 tree 只存在于唯一一个 store 中</p><h4 id="state是只读的"><a href="#state是只读的" class="headerlink" title="state是只读的"></a><code>state</code>是只读的</h4><p>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象</p><h4 id="使用纯函数来执行修改"><a href="#使用纯函数来执行修改" class="headerlink" title="使用纯函数来执行修改"></a>使用纯函数来执行修改</h4><p>为了描述 action 是如何 state tree，需要编写 reduer</p><h3 id="Redux-有全局唯一-Store"><a href="#Redux-有全局唯一-Store" class="headerlink" title="Redux 有全局唯一 Store"></a>Redux 有全局唯一 Store</h3><p>在独立的 store 中保存应用的 state，state 是数据，store 是保存数据的地方</p><h4 id="创建-Redux-Store"><a href="#创建-Redux-Store" class="headerlink" title="创建 Redux Store"></a>创建 Redux Store</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from &#39;redux&#39;;</span><br><span class="line"></span><br><span class="line">const store &#x3D; createStore();</span><br><span class="line"></span><br><span class="line">const App &#x3D; () &#x3D;&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Counter&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样子会报错</p><p><img src="/2020/04/28/React+Redux/error.png" alt="Error: Expected the reducer to be a function."></p><p><strong>Store 需要一个 Reducer</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import Counter from &#39;.&#x2F;Counter&#39;;</span><br><span class="line">import &#39;.&#x2F;App.css&#39;;</span><br><span class="line">import &#123; createStore &#125; from &#39;redux&#39;;</span><br><span class="line"></span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  console.log(&#39;reducer&#39;, state, action);</span><br><span class="line">  return state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store &#x3D; createStore(reducer);</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className&#x3D;&quot;App&quot;&gt;</span><br><span class="line">      &lt;Counter &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h3 id="Redux-Reducer"><a href="#Redux-Reducer" class="headerlink" title="Redux Reducer"></a>Redux Reducer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(state, action) =&gt; newState;</span><br></pre></td></tr></table></figure><p>接收当前的 state 和一个 action，然后返回 newState</p><h4 id="给-Reducer-一个初始状态"><a href="#给-Reducer-一个初始状态" class="headerlink" title="给 Reducer 一个初始状态"></a>给 Reducer 一个初始状态</h4><p>reducer 的职责是接收当前 state 和一个 action，然后返回新的 state</p><p>首次调用时应该返回初始 state</p><p>惯用方式</p><p>定义一个<code>initialState</code>变量然后使用 ES6 默认参数给 state 赋初始值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  count: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'reducer'</span>, state, action);</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化成功</p><p><img src="/2020/04/28/React+Redux/success.png" alt="image-20200327165453055"></p><p><strong>Reducers 重要规则：reducer 绝不能返回 undefined</strong></p><h3 id="Dispatch-Actions-改变-State"><a href="#Dispatch-Actions-改变-State" class="headerlink" title="Dispatch Actions 改变 State"></a>Dispatch Actions 改变 State</h3><h4 id="Redux-Action"><a href="#Redux-Action" class="headerlink" title="Redux Action"></a>Redux Action</h4><p>Redux 中，具有<code>type</code>属性的普通对象就被称为 action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">"add an item"</span>,</span><br><span class="line">  item: <span class="string">"Apple"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="number">7008</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  type: <span class="string">"INCREMENT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>actions 的<code>type</code>属性一般是大写字符串，表示常量且表意</p><p>Action 对象描述想要做出的改变（如“counter+1”）或者将触发的事件（如“请求服务失败并显示错误信息”）</p><p>其实它啥也不做。。。</p><p>要让 action 做事，需要 diapatch</p><h4 id="Redux-Dispatch-工作机制"><a href="#Redux-Dispatch-工作机制" class="headerlink" title="Redux Dispatch 工作机制"></a>Redux Dispatch 工作机制</h4><p>store 有一个内置函数<code>dispatch</code>。调用时携带<code>action</code></p><p>Redux 调用 reducer 时就会携带 action（然后 reducer 的返回值就会更新 state）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const initialState &#x3D; &#123;</span><br><span class="line">  count: 0</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function reducer(state &#x3D; initialState, action) &#123;</span><br><span class="line">  console.log(&#39;reducer&#39;, state, action);</span><br><span class="line">  return state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store &#x3D; createStore(reducer);</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123; type: &#39;INCREMENT&#39; &#125;);</span><br><span class="line">store.dispatch(&#123; type: &#39;DECREMENT&#39; &#125;);</span><br><span class="line">store.dispatch(&#123; type: &#39;RESET&#39; &#125;);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/28/React+Redux/success1.png" alt="image-20200327172656912"></p><p>每一次调用 dispatch 最终都会调用 reducer，现在 action 里啥也没做，所以 state 不变</p><h3 id="在-Redux-Reducer-中处理-Actions"><a href="#在-Redux-Reducer-中处理-Actions" class="headerlink" title="在 Redux Reducer 中处理 Actions"></a>在 Redux Reducer 中处理 Actions</h3><p>为了让 actions 做点啥，需要在 reducer 里写一些业务逻辑代码，即根据 action 的 type 来选择执行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function reducer(state &#x3D; initialState, action) &#123;</span><br><span class="line">  console.log(&#39;reducer&#39;, state, action);</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &#39;INCREMENT&#39;:</span><br><span class="line">      return &#123;</span><br><span class="line">        count: state.count + 1</span><br><span class="line">      &#125;;</span><br><span class="line">    case &#39;DECREMENT&#39;:</span><br><span class="line">      return &#123;</span><br><span class="line">        count: state.count - 1</span><br><span class="line">      &#125;;</span><br><span class="line">    case &#39;RESET&#39;:</span><br><span class="line">      return &#123;</span><br><span class="line">        count: 0</span><br><span class="line">      &#125;;</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store &#x3D; createStore(reducer);</span><br><span class="line"></span><br><span class="line">store.dispatch(&#123; type: &#39;INCREMENT&#39; &#125;);</span><br><span class="line">store.dispatch(&#123; type: &#39;DECREMENT&#39; &#125;);</span><br><span class="line">store.dispatch(&#123; type: &#39;RESET&#39; &#125;);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/28/React+Redux/suc.png" alt="image-20200327173257333"></p><h3 id="保持纯-Reducers"><a href="#保持纯-Reducers" class="headerlink" title="保持纯 Reducers"></a>保持纯 Reducers</h3><p>reducers 的规则是，必须是纯函数，不能修改它们的参数，不能有副作用</p><p><strong>最重要的是，不能改变 state 参数</strong></p><p>不能执行 <code>state.count = 0</code>、<code>state.items.push(newItem)</code>、<code>state.count++</code> 及其他类型的变动 —— 不要改变 <code>state</code> 本身，及其任何子属性。</p><p>就是只能 return</p><ul><li>State 是只读的，唯一修改它的方式是 actions。</li><li>更新的唯一方式：dispatch(action) -&gt; reducer -&gt; new state。</li><li>Reducer 函数必须是“纯”的 —— 不能修改它的参数，也不能有副作用（side effect）。</li></ul><h2 id="在-React-中使用-Redux"><a href="#在-React-中使用-Redux" class="headerlink" title="在 React 中使用 Redux"></a>在 React 中使用 Redux</h2><p>在<code>react-redux</code>库里：<code>Provider</code>组件和<code>connect</code>函数</p><p>通过用<code>Provider</code>组件包裹整个应用，使得应用树中的每一个组件都可以访问 Redux store</p><p>在 App 中引入 Provider，store 会以 prop 形式传递</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Provider store&#x3D;&#123;store&#125;&gt;</span><br><span class="line">      &lt;Counter &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子元素都可以访问 Redux store 了</p><p>组件中使用<code>connect</code>函数来访问 store</p><p>修改组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Counter extends React.Component &#123;</span><br><span class="line">  &#x2F;&#x2F; state &#x3D; &#123; count: 0 &#125;; &#x2F;&#x2F; 删除</span><br><span class="line"></span><br><span class="line">  increment &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    &#x2F;&#x2F; 删除</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      count: this.state.count + 1</span><br><span class="line">    &#125;);</span><br><span class="line">    *&#x2F;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  decrement &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    &#x2F;&#x2F; 同样删除</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      count: this.state.count - 1</span><br><span class="line">    &#125;);</span><br><span class="line">    *&#x2F;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className&#x3D;&quot;counter&quot;&gt;</span><br><span class="line">        &lt;h2&gt;Counter&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;this.decrement&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">          &lt;span className&#x3D;&quot;count&quot;&gt;&#123;</span><br><span class="line">            &#x2F;&#x2F; 把 state:</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F; this.state.count</span><br><span class="line">            &#x2F;&#x2F; 替换成:</span><br><span class="line">            this.props.count</span><br><span class="line">          &#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;this.increment&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接组件"><a href="#连接组件" class="headerlink" title="连接组件"></a>连接组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &#39;react-redux&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加这个函数:</span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    count: state.count</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Counter extends React.Component&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 然后把:</span><br><span class="line">&#x2F;&#x2F; export default Counter;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 替换成:</span><br><span class="line">export default connect(mapStateToProps)(Counter);</span><br></pre></td></tr></table></figure><h4 id="如何使用connect"><a href="#如何使用connect" class="headerlink" title="如何使用connect"></a>如何使用<code>connect</code></h4><p>connect 是一个高阶函数，调用时会返回一个函数，然后调用返回的函数传入一个组件</p><p>connect 做的是在 Redux 内部 hook，去除整个 state，然后传入提供的<code>mapStateToProps</code>函数</p><p>这是个自定义函数，由开发者设置</p><h4 id="mapStateToProps工作机制"><a href="#mapStateToProps工作机制" class="headerlink" title="mapStateToProps工作机制"></a><code>mapStateToProps</code>工作机制</h4><p>connect 把整个 state 传给<code>mapStateToProps</code>函数</p><p><code>mapStateToProps</code>返回的对象以 props 形式传递给组件，</p><p><strong>定义从 state 到 props 的映射</strong></p><h3 id="从-React-组件-Dispatch-Redux-Actions"><a href="#从-React-组件-Dispatch-Redux-Actions" class="headerlink" title="从 React 组件 Dispatch Redux Actions"></a>从 React 组件 Dispatch Redux Actions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">increment &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  this.props.dispatch(&#123; type: &quot;INCREMENT&quot; &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">decrement &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  this.props.dispatch(&#123; type: &quot;DECREMENT&quot; &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Action-常量"><a href="#Action-常量" class="headerlink" title="Action 常量"></a>Action 常量</h4><p>在大部分 Redux 应用中，你可以看到 action 常量都是一些简单字符串。这是一个额外的抽象级别，从长远来看可以为你节省不少时间。</p><p>Action 常量帮你避免错别字，action 命名的错别字会是一个巨大的痛苦：没有报错，没有哪里坏掉的明显标志，并且你的 action 没有做任何事情？那就可能是个错别字。</p><p>Action 常量很容易编写：用变量保存你的 action 字符串。</p><p>把这些变量放在一个 <code>actions.js</code> 文件里是个好办法（当你的应用很小时）。</p><p>actions.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'INCREMENT'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'DECREMENT'</span>;</span><br></pre></td></tr></table></figure><p>counter.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; INCREMENT, DECREMENT &#125; from &#39;.&#x2F;actions&#39;;</span><br><span class="line"></span><br><span class="line">class Counter extends React.Component &#123;</span><br><span class="line">  state &#x3D; &#123; count: 0 &#125;;</span><br><span class="line"></span><br><span class="line">  increment &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.props.dispatch(&#123; type: INCREMENT &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  decrement &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.props.dispatch(&#123; type: DECREMENT &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Redux-Action-生成器"><a href="#Redux-Action-生成器" class="headerlink" title="Redux Action 生成器"></a>Redux Action 生成器</h4><p>编写函数，防止误写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export const INCREMENT &#x3D; &quot;INCREMENT&quot;;</span><br><span class="line">export const DECREMENT &#x3D; &quot;DECREMENT&quot;;</span><br><span class="line"></span><br><span class="line">export function increment() &#123;</span><br><span class="line">  return &#123; type: INCREMENT &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export const decrement &#x3D; () &#x3D;&gt; (&#123; type: DECREMENT &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; connect &#125; from &#39;react-redux&#39;;</span><br><span class="line">import &#123; increment, decrement &#125; from &#39;.&#x2F;actions&#39;;</span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    count: state.count</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Counter extends React.Component &#123;</span><br><span class="line">  state &#x3D; &#123; count: 0 &#125;;</span><br><span class="line"></span><br><span class="line">  increment &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.props.dispatch(increment());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  decrement &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.props.dispatch(decrement());</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Counter&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;this.decrement&#125;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">          &#123;&#x2F;* &lt;span&gt;&#123;this.state.count&#125;&lt;&#x2F;span&gt; *&#x2F;&#125;</span><br><span class="line">          &lt;span&gt;&#123;this.props.count&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;button onClick&#x3D;&#123;this.increment&#125;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps)(Counter);</span><br></pre></td></tr></table></figure><p>action 生成器是一个平凡无奇的函数。Dispatch 需要 action 是一个<strong>对象</strong>，而不是函数。</p><p>而且：你肯定会在这里出错并且非常困惑。至少一次，或许很多次。那很正常。我有时也<strong>依旧</strong>会忘记。</p><h4 id="使用-React-Redux-mapDispatchToProps"><a href="#使用-React-Redux-mapDispatchToProps" class="headerlink" title="使用 React Redux mapDispatchToProps"></a>使用 React Redux mapDispatchToProps</h4><p>connect 传递 dispatch</p><p>写一个<code>mapDispatchToProps</code>对象，然后传递给要包装组件的<code>connect</code>函数，将会收到这些 action 生成器作为 <strong>可调用 props</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; connect &#125; from &#39;react-redux&#39;;</span><br><span class="line">import &#123; increment, decrement &#125; from &#39;.&#x2F;actions&#39;;</span><br><span class="line"></span><br><span class="line">class Counter extends React.Component &#123;</span><br><span class="line">  increment &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F; 我们可以调用 &#96;increment&#96; prop,</span><br><span class="line">    &#x2F;&#x2F; 它会 dispatch action:</span><br><span class="line">    this.props.increment();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  decrement &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.props.decrement();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    count: state.count</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在这个对象中, 属性名会成为 prop 的 names,</span><br><span class="line">&#x2F;&#x2F; 属性值应该是 action 生成器函数.</span><br><span class="line">&#x2F;&#x2F; 它们跟 &#96;dispatch&#96; 绑定起来.</span><br><span class="line">const mapDispatchToProps &#x3D; &#123;</span><br><span class="line">  increment,</span><br><span class="line">  decrement</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(Counter);</span><br></pre></td></tr></table></figure><h3 id="使用-Redux-Thunk-获取数据"><a href="#使用-Redux-Thunk-获取数据" class="headerlink" title="使用 Redux Thunk 获取数据"></a>使用 Redux Thunk 获取数据</h3><p>action 生成器不可以做一些工作函数</p><p>而<code>redux-thunk</code>是一个中间件，是 Redux 的一个插件，可以处理工作函数</p><h4 id="thunk是什么"><a href="#thunk是什么" class="headerlink" title="thunk是什么"></a><code>thunk</code>是什么</h4><p>thunk 是指被其他函数作为返回值的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function doStuff()&#123;</span><br><span class="line">  return function(dispatch,getState)&#123;</span><br><span class="line">    &#x2F;&#x2F;在这里dispatch actions</span><br><span class="line">    &#x2F;&#x2F;或者获取数据</span><br><span class="line">    &#x2F;&#x2F;或者。。。</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被返回的函数就是“thunk”，把它作为返回值的就是“action 生成器”</p><p>安装<code>npm install --save redux-thunk</code></p><p>在 App.jsx 中，引入<code>redux-thunk</code></p><p>通过<code>applyMiddleware</code>函数把它应用到 store 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import thunk from &#39;redux-thunk&#39;;</span><br><span class="line">import &#123; createStore, applyMiddleware &#125; from &#39;redux&#39;;</span><br><span class="line"></span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store &#x3D; createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(thunk)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>确保<code>thunk</code>包装在<code>applyMiddleware</code>里调用</p><h3 id="结合-Redux-请求数据"><a href="#结合-Redux-请求数据" class="headerlink" title="结合 Redux 请求数据"></a>结合 Redux 请求数据</h3><p>你已经获得了后端 API 可以响应 <code>GET /products</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export function fetchProducts()&#123;</span><br><span class="line">  return dispatch &#x3D;&gt;&#123;</span><br><span class="line">    dispatch(fetchProductsBegin());</span><br><span class="line">    return fetch(&quot;&#x2F;products&quot;)</span><br><span class="line">    .then(res&#x3D;&gt;res.json())</span><br><span class="line">    .then(json&#x3D;&gt;&#123;</span><br><span class="line">      dispatch(fetchProductsSuccess(json.products));</span><br><span class="line">      return json.products;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(error&#x3D;&gt;dispatch(fetchProductsFailure(error)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fetch(“/products”)是实际上请求数据的部分，然后在前后做 dispatch 的调用</p><h3 id="Dispatch-Action-获取数据"><a href="#Dispatch-Action-获取数据" class="headerlink" title="Dispatch Action 获取数据"></a>Dispatch Action 获取数据</h3><p>在<code>componentDidMount</code>里调用</p><h2 id="Redux-中间件"><a href="#Redux-中间件" class="headerlink" title="Redux 中间件"></a>Redux 中间件</h2><p><img src="/2020/04/28/React+Redux/middle.png" alt="image-20200331160117320"></p><p>action 和 store 中间的中间件</p><p>thunk 使得 action 可以是函数，中间件，对 dispatch 方法的封装升级</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-回顾&quot;&gt;&lt;a href=&quot;#React-回顾&quot; class=&quot;headerlink&quot; title=&quot;React 回顾&quot;&gt;&lt;/a&gt;React 回顾&lt;/h2&gt;&lt;h3 id=&quot;组件之间传递数据&quot;&gt;&lt;a href=&quot;#组件之间传递数据&quot; class=&quot;headerlink&quot; title=&quot;组件之间传递数据&quot;&gt;&lt;/a&gt;组件之间传递数据&lt;/h3&gt;&lt;p&gt;组件之间用 props 传递数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;&amp;lt;组件 数据=&amp;quot;值&amp;quot;&amp;gt;&lt;/code&gt;的形式传递&lt;/li&gt;
&lt;li&gt;组件里使用&lt;code&gt;this.props&lt;/code&gt;获取值&lt;/li&gt;
&lt;li&gt;如果组件只有&lt;code&gt;render&lt;/code&gt;函数，还可以用函数的形式写组件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>React知识点</title>
    <link href="http://yoursite.com/2020/04/28/React%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2020/04/28/React%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2020-04-28T08:00:50.000Z</published>
    <updated>2020-04-28T07:05:22.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-知识点"><a href="#React-知识点" class="headerlink" title="React 知识点"></a>React 知识点</h1><h2 id="ref-和-React-js-中的-DOM-操作"><a href="#ref-和-React-js-中的-DOM-操作" class="headerlink" title="ref 和 React.js 中的 DOM 操作"></a>ref 和 React.js 中的 DOM 操作</h2><p>在 React 中，可以直接通过<code>setState</code>的方式重新渲染组件，渲染时可以把新的<code>props</code>传递给子组件，从而达到页面更新的效果</p><p><code>ref</code>属性可以帮助获取已经挂载的元素的 DOM 节点</p><a id="more"></a><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class AutoFocusInput extends Component &#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    this.input.focus()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;input ref&#x3D;&#123;(input)&#x3D;&gt;this.input&#x3D;input&#125; &#x2F;&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里给<code>input</code>元素加了一个<code>ref</code>属性，这个属性值时一个函数，当<code>input</code>元素在页面上挂载完成以后，React 会调用这个函数，并且把这个挂载以后的 DOM 节点传给这个函数。在函数中把 DOM 元素设置为组件实例的一个属性，这样就可以通过<code>this.input</code>获取这个 DOM 元素</p><p>就可以在<code>componentDidMount()</code>中使用这个 DOM 元素，并调用它的 API</p><p>可以给任意代表 HTML 元素标签加上<code>ref</code>从而获取到它 DOM 元素然后调用 DOM 的 API</p><p>原则： <strong>能不用<code>ref</code>就不用。。。</strong></p><h2 id="PropTypes和组件参数验证"><a href="#PropTypes和组件参数验证" class="headerlink" title="PropTypes和组件参数验证"></a><code>PropTypes</code>和组件参数验证</h2><p>用于给组件的配置参数加上类型验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save prop-types</span><br></pre></td></tr></table></figure><p>用于帮助验证<code>props</code>的参数类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &#39;react&#39;</span><br><span class="line">import PropTypes from &#39;prop-types&#39;</span><br><span class="line"></span><br><span class="line">class Comment extends Component &#123;</span><br><span class="line">  static propTypes &#x3D; &#123;</span><br><span class="line">    comment:PropTypes.object.isRequest</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">    const &#123;comment&#125; &#x3D; this.props</span><br><span class="line">    return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;&#123;comment.username&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;p&gt;&#123;comment.content&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选参数我们可以通过配置 <code>defaultProps</code>，让它在不传入的时候有默认值。但是我们这里并没有配置 <code>defaultProps</code>，所以如果直接用而不传入任何参数的话，<code>comment</code> 就会是 <code>undefined</code>，<code>comment.username</code> 会导致程序报错</p><p>可以通过 <code>isRequired</code> 关键字来强制组件某个参数必须传入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span><span class="built_in">array</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span><span class="built_in">bool</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span>func</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span>number</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span>object</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span><span class="built_in">string</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span>node</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">PropTypes</span>.</span></span>element</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><h3 id="什么高阶组件"><a href="#什么高阶组件" class="headerlink" title="什么高阶组件"></a>什么高阶组件</h3><p><strong>高阶组件就是一个函数，传给它一个组件，它返回一个新的组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class="line"></span><br><span class="line">export default (WrappedComponent, name) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;可以实现更多自定义逻辑</span><br><span class="line">  class NewComponent extends Component &#123;</span><br><span class="line">    constructor () &#123;</span><br><span class="line">      super()</span><br><span class="line">      this.state &#x3D; &#123; data: null &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount () &#123;</span><br><span class="line">      ajax.get(&#39;&#x2F;data&#x2F;&#39; + name, (data) &#x3D;&gt; &#123;</span><br><span class="line">        this.setState(&#123; data &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      return &lt;WrappedComponent data&#x3D;&#123;this.state.data&#125; &#x2F;&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return NewComponent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import wrapWithLoadData from &#39;.&#x2F;wrapWithLoadData&#39;</span><br><span class="line">&#x2F;&#x2F;我觉得可以用来设置token</span><br><span class="line">class InputWithUserName extends Component &#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return &lt;input value &#x3D; &#123;this.props.data&#125; &#x2F;&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InputWithUserName &#x3D; wrapWithLoadData(InputWithUserName,&quot;username&quot;)</span><br><span class="line">export default InputWithUserName</span><br></pre></td></tr></table></figure><p>假如 <code>InputWithUserName</code> 的功能需求是挂载的时候从 LocalStorage 里面加载 <code>username</code> 字段作为 input 的<code>value</code>值</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-知识点&quot;&gt;&lt;a href=&quot;#React-知识点&quot; class=&quot;headerlink&quot; title=&quot;React 知识点&quot;&gt;&lt;/a&gt;React 知识点&lt;/h1&gt;&lt;h2 id=&quot;ref-和-React-js-中的-DOM-操作&quot;&gt;&lt;a href=&quot;#ref-和-React-js-中的-DOM-操作&quot; class=&quot;headerlink&quot; title=&quot;ref 和 React.js 中的 DOM 操作&quot;&gt;&lt;/a&gt;ref 和 React.js 中的 DOM 操作&lt;/h2&gt;&lt;p&gt;在 React 中，可以直接通过&lt;code&gt;setState&lt;/code&gt;的方式重新渲染组件，渲染时可以把新的&lt;code&gt;props&lt;/code&gt;传递给子组件，从而达到页面更新的效果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ref&lt;/code&gt;属性可以帮助获取已经挂载的元素的 DOM 节点&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Taro基础</title>
    <link href="http://yoursite.com/2020/04/28/Taro/"/>
    <id>http://yoursite.com/2020/04/28/Taro/</id>
    <published>2020-04-28T08:00:50.000Z</published>
    <updated>2020-04-28T07:16:58.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h1><h2 id="开发前的准备"><a href="#开发前的准备" class="headerlink" title="开发前的准备"></a>开发前的准备</h2><p>全局安装 Taro <code>npm install -g @tarojs/cli</code></p><p>使用命令创建模板项目 <code>taro init my-app</code></p><p>天坑 <code>npm install</code> 一波依赖</p><p>开发期启动命令</p><a id="more"></a><ul><li>Web H5 —— <code>npm run dev:h5</code></li><li>微信小程序 —— <code>npm run dev:weapp</code></li><li>支付宝小程序 —— <code>npm run dev:alipay</code></li><li>百度小程序 —— <code>npm run dev:swan</code></li><li>ReactNative —— <code>npm run dev:rn</code></li></ul><p>使用<code>npm run dev:weapp</code>初始化一下小程序，然后把 dist 文件夹导入微信开发者工具</p><p>通过在 app.js 项目入口文件中配置路由来确定页面</p><h2 id="生命周期-amp-state"><a href="#生命周期-amp-state" class="headerlink" title="生命周期 &amp; state"></a>生命周期 &amp; state</h2><blockquote><p>状态更新一定是异步的</p><p>React 中的状态更新不一定是异步的</p><p>同 React 一致，更新数据必须调用 setState</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import Taro, &#123; Component &#125; from &quot;@tarojs&#x2F;taro&quot;;</span><br><span class="line">import &#123; View, Text &#125; from &quot;@tarojs&#x2F;components&quot;;</span><br><span class="line">import &quot;.&#x2F;index.scss&quot;;</span><br><span class="line"></span><br><span class="line">export default class Index extends Component &#123;</span><br><span class="line">  state &#x3D; &#123; name: &quot;hello world!&quot; &#125;;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    this.setState(&#123; name: &quot;hello taro!&quot; &#125;, () &#x3D;&gt; &#123;</span><br><span class="line">      console.log(this.state.name);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F;设置回调，立即执行异步更新</span><br><span class="line">    console.log(&quot;第一次渲染之前执行，只执行一次&quot;);</span><br><span class="line">    console.log(this.state.name); &#x2F;&#x2F;还是上一次的state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    console.log(&quot;第一次渲染之后执行，只执行一次&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    console.log(&quot;卸载时执行，只执行一次&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUpdate() &#123;</span><br><span class="line">    console.log(&quot;state数据将要更新&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&quot;state数据更新完毕&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    &#x2F;&#x2F;会在父组件传递个子组件的参数发生改变时触发</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    &#x2F;&#x2F;检查此次setState是否要进行render调用</span><br><span class="line">    &#x2F;&#x2F;false不更新，true更新</span><br><span class="line">    &#x2F;&#x2F;一般用来多次setState调用时，提升render性能</span><br><span class="line">    if (nextState.name &#x3D;&#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class="line">      return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidShow() &#123;</span><br><span class="line">    &#x2F;&#x2F;页面时触发</span><br><span class="line">    console.log(&quot;页面显示时触发&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidHide() &#123;</span><br><span class="line">    console.log(&quot;页面隐藏时触发&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  config &#x3D; &#123;</span><br><span class="line">    navigationBarTitleText: &quot;首页&quot;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View className&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &lt;Text&gt;&#123;this.state.name&#125;&lt;&#x2F;Text&gt;</span><br><span class="line">      &lt;&#x2F;View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由功能"><a href="#路由功能" class="headerlink" title="路由功能"></a>路由功能</h2><ul><li>Taro 中路由功能是默认自带的，不需要进行额外的路由配置</li><li>通过小程序的配置适配了小程序和 H5 的路由问题</li><li>Taro 默认根据配置路径生成了 Route</li><li>只需要在入口文件的 config 配置中指定好 pages 即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;app.jsx</span><br><span class="line">import Taro, &#123; Component &#125; from &quot;@tarojs&#x2F;taro&quot;;</span><br><span class="line">import Index from &quot;.&#x2F;pages&#x2F;index&quot;;</span><br><span class="line"></span><br><span class="line">import &quot;.&#x2F;app.scss&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果需要在 h5 环境中开启 React Devtools</span><br><span class="line">&#x2F;&#x2F; 取消以下注释：</span><br><span class="line">&#x2F;&#x2F; if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &amp;&amp; process.env.TARO_ENV &#x3D;&#x3D;&#x3D; &#39;h5&#39;)  &#123;</span><br><span class="line">&#x2F;&#x2F;   require(&#39;nerv-devtools&#39;)</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  componentDidMount() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidShow() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidHide() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidCatchError() &#123;&#125;</span><br><span class="line">  &#x2F;&#x2F;配置页面组件的路由</span><br><span class="line">  config &#x3D; &#123;</span><br><span class="line">    pages: [&quot;pages&#x2F;index&#x2F;index&quot;],</span><br><span class="line">    window: &#123;</span><br><span class="line">      backgroundTextStyle: &quot;light&quot;,</span><br><span class="line">      navigationBarBackgroundColor: &quot;#fff&quot;,</span><br><span class="line">      navigationBarTitleText: &quot;WeChat&quot;,</span><br><span class="line">      navigationBarTextStyle: &quot;black&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 在 App 类中的 render() 函数没有实际作用</span><br><span class="line">  &#x2F;&#x2F; 请勿修改此函数</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;Index &#x2F;&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Taro.render(&lt;App &#x2F;&gt;, document.getElementById(&quot;app&quot;));</span><br></pre></td></tr></table></figure><h3 id="导航到页面"><a href="#导航到页面" class="headerlink" title="导航到页面"></a>导航到页面</h3><p>Taro.navigateTo(OBJECT)相当于 react 中的 Route.push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;可以设置初始值，一般用于子组件，以防未传入属性，导致报错</span><br><span class="line">export default class Test extends Component &#123;</span><br><span class="line">  config &#x3D; &#123;</span><br><span class="line">    navigationBarTitleText: &quot;Test&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">  link &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;相当于link</span><br><span class="line">    &#x2F;&#x2F;Taro.navigateTo(&#123; url: &quot;&#x2F;pages&#x2F;index&#x2F;index&quot; &#125;);</span><br><span class="line">    &#x2F;&#x2F;重定向，区别是没法返回</span><br><span class="line">    Taro.redirectTo(&#123; url: &quot;&#x2F;pages&#x2F;index&#x2F;index&quot; &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View className&#x3D;&quot;index&quot;&gt;</span><br><span class="line">        &lt;Text&gt;Test&lt;&#x2F;Text&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;this.link&#125;&gt;Link&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;&#x2F;View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>可以通过在所有跳转的 url 后面添加查询字符串参数进行跳转传参，</p><p>eg：传入参数 id=2&amp;type=test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Taro.navigateTo(&#123;</span><br><span class="line">  url:&#39;&#x2F;pages&#x2F;page&#x2F;path&#x2F;name?id&#x3D;2&amp;type&#x3D;test&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>跳转成功的目标页的生命周期方法里就可以通过<code>this.$route.params</code>获取传入的参数</p><h3 id="静态资源引用"><a href="#静态资源引用" class="headerlink" title="静态资源引用"></a>静态资源引用</h3><p>可以像用 webpack 一样自由使用</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>多使用三元表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &#123;!true || &lt;Image src&#x3D;&#123;Prom&#125; className&#x3D;&quot;img&quot; &#x2F;&gt;&#125;</span><br><span class="line">&#x2F;&#x2F;或表达的一种渲染，false时渲染</span><br></pre></td></tr></table></figure><p><code>this.props.children</code>从父组件中传入内容包裹在子组件的标签中，在子组件中通过这个获取到，并实现渲染</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ul><li>Taro 事件采用驼峰命名</li><li>在 Taro 中阻止事件冒泡，必须明确的使用<code>stopPropagation</code></li></ul><p>小程序端，不能内联箭头函数</p><p><code>onClick={()=&gt;{console.log(&#39;error&#39;)}}</code>会报错</p><h3 id="向事件处理程序传递参数"><a href="#向事件处理程序传递参数" class="headerlink" title="向事件处理程序传递参数"></a>向事件处理程序传递参数</h3><ul><li>向事件处理程序传递参数</li><li>任何组件的事件传递都要以 on 开头</li><li>只要 JSX 组件传入的参数是函数，参数名就必须以 on 开头</li><li>以上都是为了适配小程序</li></ul><p>onInput 相当于 onChange</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Taro&quot;&gt;&lt;a href=&quot;#Taro&quot; class=&quot;headerlink&quot; title=&quot;Taro&quot;&gt;&lt;/a&gt;Taro&lt;/h1&gt;&lt;h2 id=&quot;开发前的准备&quot;&gt;&lt;a href=&quot;#开发前的准备&quot; class=&quot;headerlink&quot; title=&quot;开发前的准备&quot;&gt;&lt;/a&gt;开发前的准备&lt;/h2&gt;&lt;p&gt;全局安装 Taro &lt;code&gt;npm install -g @tarojs/cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用命令创建模板项目 &lt;code&gt;taro init my-app&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;天坑 &lt;code&gt;npm install&lt;/code&gt; 一波依赖&lt;/p&gt;
&lt;p&gt;开发期启动命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Taro" scheme="http://yoursite.com/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>手写Redux</title>
    <link href="http://yoursite.com/2020/04/28/%E6%89%8B%E5%86%99Redux/"/>
    <id>http://yoursite.com/2020/04/28/%E6%89%8B%E5%86%99Redux/</id>
    <published>2020-04-28T08:00:50.000Z</published>
    <updated>2020-04-28T07:04:54.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手写Redux"><a href="#手写Redux" class="headerlink" title="手写Redux"></a>手写<code>Redux</code></h1><h2 id="Redux-设计原则"><a href="#Redux-设计原则" class="headerlink" title="Redux 设计原则"></a>Redux 设计原则</h2><a id="more"></a><h3 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h3><p>整个<code>react</code>项目的<code>state</code>存放在一起，相当于一个大的对象，单一数据源使得程序员在项目中更专注于数据源的设计和构建</p><h3 id="状态是只读的"><a href="#状态是只读的" class="headerlink" title="状态是只读的"></a>状态是只读的</h3><p>视图通过<code>store.getState()</code>方法来获取状态，通过<code>dispatch</code>派发<code>action</code>来改变状态。</p><p>状态是只读的，所以只能用<code>store.getState()</code>来获取状态，也只能用<code>dispatch</code>派发<code>action</code>来改变状态，同时也体现了单一数据流动</p><h3 id="使用纯函数编写reducer"><a href="#使用纯函数编写reducer" class="headerlink" title="使用纯函数编写reducer"></a>使用纯函数编写<code>reducer</code></h3><blockquote><p>纯函数：对于一个函数，相同的输入必定有相同的输出，即不依赖外部环境，也不改变外部环境。纯函数是没有副作用的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newState = reducer((initState = &#123;&#125;), action);</span><br></pre></td></tr></table></figure><h2 id="手写min-Redux"><a href="#手写min-Redux" class="headerlink" title="手写min-Redux"></a>手写<code>min-Redux</code></h2><h3 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a><code>createStore</code></h3><p><code>redux</code>的核心是<code>createStore</code>这个函数，<code>store</code>、<code>getState</code>、<code>dispatch</code>由它产出</p><p><code>createStore</code>：通过<code>subscribe</code>订阅<code>store</code>的变化，通过<code>dispatch</code>派发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收的rootReducer</span></span><br><span class="line"><span class="comment">//初始化initState</span></span><br><span class="line"><span class="comment">//中间件</span></span><br><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer, initState, enhancer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    replaceReducer,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="getState的实现"><a href="#getState的实现" class="headerlink" title="getState的实现"></a><code>getState</code>的实现</h4><p><code>getState</code>方法的作用是返回当前的 store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = initState;</span><br><span class="line"><span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="subscribe的实现"><a href="#subscribe的实现" class="headerlink" title="subscribe的实现"></a><code>subscribe</code>的实现</h4><p><code>subscribe</code>是<code>createStore</code>的订阅者，开发者用这个方法订阅，当<code>store</code>改变的时候执行监听函数。</p><p><code>subscribe</code>是典型的高阶函数，它的返回值是一个函数，执行该函数移除当前的监听函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个监听事件队列</span></span><br><span class="line"><span class="keyword">let</span> subQueue = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//将监听函数放入监听队列</span></span><br><span class="line">  subQueue.push(listener);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//找到当前监听函数的索引</span></span><br><span class="line">    <span class="keyword">let</span> idx = subQueue.indexOf(listener);</span><br><span class="line">    <span class="keyword">if</span> (idx &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">//通过索引吧监听函数移除</span></span><br><span class="line">      subQueue.splice(idx, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="dispatch的实现"><a href="#dispatch的实现" class="headerlink" title="dispatch的实现"></a><code>dispatch</code>的实现</h4><p><code>dispatch</code>是<code>createStore</code>的发布者，<code>dispatch</code>接收一个<code>action</code>，来执行<code>reducer</code>。<code>dispatch</code>在执行<code>reducer</code>的同时会执行所有监听函数（发布）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentReducer = reducer;</span><br><span class="line"><span class="keyword">let</span> isDispatch = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//使用isDispatch做标示，只有当上一个派发完成之后才能派发下一个</span></span><br><span class="line">  <span class="keyword">if</span> (isDispatch) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'dispatch error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    state = currentReducer(state, action);</span><br><span class="line">    isDispatch = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    isDispatch = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//执行所有的监听函数</span></span><br><span class="line">  subQueue.forEach(<span class="function">(<span class="params">sub</span>) =&gt;</span> sub.apply(<span class="literal">null</span>));</span><br><span class="line">  <span class="keyword">return</span> action;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="replaceReducer"><a href="#replaceReducer" class="headerlink" title="replaceReducer"></a><code>replaceReducer</code></h4><p><code>replaceReducer</code>即是替换<code>reducer</code>，再执行<code>createState</code>方法的时候<code>reducer</code>就作为第一个参数传进去。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//传入一个reducer作为参数，把它赋值给currentReducer</span></span><br><span class="line">  currentReducer = reducer;</span><br><span class="line">  <span class="comment">//更改后会派发一次dispatch</span></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: REPLACE &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="reducer的实现"><a href="#reducer的实现" class="headerlink" title="reducer的实现"></a><code>reducer</code>的实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = (state=&#123;&#125;,action)&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dispatch-type-INIT"><a href="#dispatch-type-INIT" class="headerlink" title="dispatch({type:INIT})"></a><code>dispatch({type:INIT})</code></h4><p><code>replaceReducer</code>中派发了一个<code>type</code>为<code>REPLACE</code>的<code>action</code>。源码最后也派发了一个<code>type</code>为<code>INIT</code>的<code>action</code></p><h3 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>reducer   //reducer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>initState    //初始状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>middleware   //中间件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer, initState, enhancer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> initialState; <span class="comment">//用于保存状态</span></span><br><span class="line">  <span class="keyword">let</span> currentReducer = reducer; <span class="comment">//reducer</span></span><br><span class="line">  <span class="keyword">let</span> listenerQueue = []; <span class="comment">//存放所有的监听函数</span></span><br><span class="line">  <span class="keyword">let</span> isDispatch = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (initState) &#123;</span><br><span class="line">    initialState = initState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enhancer) &#123;</span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, initState);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取Store</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判断是否正在派发</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatch) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'dispatching...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> initialState;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 派发action 并触发所有的listeners</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">action</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//判断是否正在派发</span></span><br><span class="line">    <span class="keyword">if</span> (isDispatch) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'dispatching...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatch = <span class="literal">true</span>;</span><br><span class="line">      initialState = currentReducer(initialState, action);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatch = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行所有的监听函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> listener <span class="keyword">of</span> listenerQueue) &#123;</span><br><span class="line">      listener.apply(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订阅监听</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">listener</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">    listenerQueue.push(listener);</span><br><span class="line">    <span class="comment">//移除监听</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> index = listenerQueue.indexOf(listener);</span><br><span class="line">      <span class="keyword">let</span> unListener = listenerQueue.splice(index, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> unListener;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 替换reducer</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">reducer</span></span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> replaceReducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (reducer) &#123;</span><br><span class="line">      currentReducer = reducer;</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">'REPLACE'</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: <span class="string">'INIT'</span> &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    replaceReducer,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;手写Redux&quot;&gt;&lt;a href=&quot;#手写Redux&quot; class=&quot;headerlink&quot; title=&quot;手写Redux&quot;&gt;&lt;/a&gt;手写&lt;code&gt;Redux&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;Redux-设计原则&quot;&gt;&lt;a href=&quot;#Redux-设计原则&quot; class=&quot;headerlink&quot; title=&quot;Redux 设计原则&quot;&gt;&lt;/a&gt;Redux 设计原则&lt;/h2&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 进阶系列</title>
    <link href="http://yoursite.com/2020/04/28/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/04/28/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/</id>
    <published>2020-04-28T07:00:50.000Z</published>
    <updated>2020-04-28T07:00:23.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="任务管理"><a href="#任务管理" class="headerlink" title="任务管理"></a>任务管理</h1><p>JavaScript 是单线程</p><p>为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的不阻塞，事件循环(Event Loop)的方案</p><a id="more"></a><p>JavaScript 处理任务是在等待任务、执行任务、休眠等待新任务中不断循环中，这种机制是事件循环</p><ul><li>主线程中的任务执行完后，才执行任务队列中的任务</li><li>有新任务到来时会放入任务队列，采取队列方式执行</li><li>多个<code>setTimeout</code>同时到时间，就要依次执行</li></ul><p>任务包括<code>script</code>(整体代码)、<code>setTimeout</code>、<code>setInterval</code>、DOM 渲染、DOM 事件、<code>Promise</code>、<code>XMLHTTPREQUESR</code>等</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>宏任务与微任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'bingyan'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'定时器'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'by.com'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">bingyan;</span><br><span class="line">by.com;</span><br><span class="line">promise1;</span><br><span class="line">promise2;</span><br><span class="line">定时器;</span><br></pre></td></tr></table></figure><ol><li>先执行最前面的宏任务 script，然后输出</li><li>然后执行到 setTimeout 异步宏任务。将其放入宏任务队列，<strong>等待执行</strong></li><li>之后执行到 Promise.then 微任务，并将其放入微任务队列，<strong>等待执行</strong></li><li>执行到主代码输出</li><li>主线程所有任务处理完成</li><li>通过事件循环遍历 <strong>微任务队列</strong>，将微任务读取到主线程执行</li><li>之后又执行 promise.then 产生新的微任务放入微任务队列</li><li>主线程任务处理完毕</li><li>再次事件循环遍历微任务队列，读取到 promise2 微任务放入主线程执行</li><li>主线程任务执行完毕</li><li>此时微任务队列无任务，从宏任务队列读取并加入主线程，执行</li></ol><p><img src="/2020/04/28/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200229182156042.png" alt="image-20200229182156042"></p><h2 id="脚本加载"><a href="#脚本加载" class="headerlink" title="脚本加载"></a>脚本加载</h2><p>引擎在执行任务时不会进行 DOM 渲染，因此 script 放在 body 结束之前</p><h2 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h2><p>微任务一般由用户代码产生，微任务较宏任务执行优先级更高，<code>promise.then</code>就是</p><p>实例化 Promise 时执行到代码是同步的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'定时器'</span>); <span class="comment">//4</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout timeout'</span>); <span class="comment">//7</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'settimeout Promise'</span>); <span class="comment">//5</span></span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'settimeout then'</span>); <span class="comment">//6</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>); <span class="comment">//1</span></span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'then'</span>); <span class="comment">//3</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'冰岩'</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h2 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h2><h3 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">      padding: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#hd</span> &#123;</span></span><br><span class="line">      height: 30px;</span><br><span class="line">      background: yellowgreen;</span><br><span class="line">      width: 0;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hd"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">view</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">      (<span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        hd.innerHTML = i + <span class="string">'%'</span>;</span></span><br><span class="line"><span class="actionscript">        hd.style.width = i + <span class="string">'%'</span>;</span></span><br><span class="line">        if (i++ &lt; 100) &#123;</span><br><span class="line">          setTimeout(handle, 20);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">    view();</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'定时器开始了...'</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h3><p>一个耗时的任务容易造成浏览器卡死，可以将任务拆分成多个小小异步任务小任务执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//耗时操作</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'runtime'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    count += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(count);</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'runtime'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">987654321</span>;</span><br><span class="line">hd(num);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bingyan.com'</span>); <span class="comment">//需要等待上面执行完才会执行</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将任务分解成小块放入任务队列</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'runtime'</span>);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">987654321</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    count += num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    setTimeout(hd);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">hd();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bingyan.com'</span>); <span class="comment">//立即显示</span></span><br></pre></td></tr></table></figure><p>交给微任务处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hd</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve().then(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      count += num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">hd(<span class="number">987654321</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;任务管理&quot;&gt;&lt;a href=&quot;#任务管理&quot; class=&quot;headerlink&quot; title=&quot;任务管理&quot;&gt;&lt;/a&gt;任务管理&lt;/h1&gt;&lt;p&gt;JavaScript 是单线程&lt;/p&gt;
&lt;p&gt;为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的不阻塞，事件循环(Event Loop)的方案&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>git流程</title>
    <link href="http://yoursite.com/2020/04/15/git%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/04/15/git%E6%B5%81%E7%A8%8B/</id>
    <published>2020-04-15T02:15:05.525Z</published>
    <updated>2020-04-28T07:17:09.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-流程"><a href="#Git-流程" class="headerlink" title="Git 流程"></a>Git 流程</h1><h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h3><ol><li>将尚未进行版本控制的本地目录转换成 Git 仓库</li><li>从其他服务器 clone 一个已经存在的 Git 仓库</li></ol><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /my-project</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><a id="more"></a><p>将会创建一个名为<code>.git</code>的子目录，用来保存版本信息。这个子目录包含初始化<code>Git</code>仓库的所有必须文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ls .git</span><br><span class="line"></span><br><span class="line">branches/</span><br><span class="line">config</span><br><span class="line">description</span><br><span class="line">HEAD</span><br><span class="line">hooks/</span><br><span class="line">info/</span><br><span class="line">objects/</span><br><span class="line">refs</span><br></pre></td></tr></table></figure><h4 id="进行版本控制"><a href="#进行版本控制" class="headerlink" title="进行版本控制"></a>进行版本控制</h4><h4 id="clone-现有仓库"><a href="#clone-现有仓库" class="headerlink" title="clone 现有仓库"></a>clone 现有仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure><p>自定义本地仓库的名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt; name</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit</span><br></pre></td></tr></table></figure><h4 id="git-add-命令"><a href="#git-add-命令" class="headerlink" title="git add 命令"></a>git add 命令</h4><p>将文件添加到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br></pre></td></tr></table></figure><h4 id="git-commit-命令"><a href="#git-commit-命令" class="headerlink" title="git commit 命令"></a>git commit 命令</h4><p>提交目录结构和说明，生成快照</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &lt;message&gt;</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br></pre></td></tr></table></figure><h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>git status 命令可以时刻掌握仓库当前的状态</p><h4 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff \"></a>git diff \<file\></file\></h4><p>查看 difference，查看修改内容</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>git log 命令查看日志。显示从最近到最远的提交日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><p>打印出 commit id（版本号）</p><h4 id="回退过去"><a href="#回退过去" class="headerlink" title="回退过去"></a>回退过去</h4><p>在 Git 中，用<code>HEAD</code>表示当前版本，最新版本</p><p>上一个版本就是<code>HEAD^</code>，上上个就是<code>HEAD^^</code>，上 n 个版本就是<code>HEAD~n</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><h4 id="回退未来"><a href="#回退未来" class="headerlink" title="回退未来"></a>回退未来</h4><p>找到版本号</p><p>查看提交历史，确定回退版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>回退</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit_id&gt;</span><br></pre></td></tr></table></figure><p>查看命令历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><h4 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h4><p>本地电脑的工程文件</p><h4 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h4><p>工作区的隐藏目录<code>.git</code>不算工作区，而是 Git 版本库</p><p>其中很重要的就是 <strong>stage</strong>暂存区，还有 Git 自动创建的第一个分支<code>master</code>，<code>master</code>的一个指针叫<code>HEAD</code></p><p><img src="/2020/04/15/git%E6%B5%81%E7%A8%8B/repository.png" alt="img"></p><ol><li><code>git add</code>添加文件，实际上是把文件修改添加到暂存区</li><li><code>git commit</code>提交修改，实际上是把暂存区的所有内容提交到当前分支</li></ol><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p><code>git checkout -- file</code>可以丢弃工作区的修改</p><p><code>git checkout -- README.md</code>把文件在工作区的修改全部撤销</p><ol><li>文件自修改后还没有被放到暂存区，现在撤销修改就回到和版本库一模一样的状态</li><li>文件已经添加到暂存区后，又作了修改，现在，撤销修改后就回到添加到暂存区后的状态</li></ol><p><code>--</code>指定文件，没有<code>--</code>就是切换分支的命令</p><p>如果 add 到了暂存区，在 commit 之前</p><p><code>git status</code>查看一下，修改只是添加到了暂存区没有提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br></pre></td></tr></table></figure><p><code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉，重新放回工作区</p><p>场景 1：改乱了工作区某个文件的内容，想要直接丢弃工作区的修改时，使用命令<code>git checkout -- file</code></p><p>场景 2：不但改乱了工作区某个文件的内容，还添加到了暂存区，想丢弃修改，分为两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就会回到了场景 1</p><p>场景 3：已经提交了不合适的修改到版本库时，撤销修改，版本回退</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>从版本库中删除文件<code>git rm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm <span class="string">'README.md'</span></span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">"remove README.md"</span></span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>如果误删，版本库里还有，可以恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure><p>git rm file 并且 git commit 并不是删除了版本库里的某个版本号，而是对工作目录下的删除操作进行了一个记录，会在仓库里生成一个新的版本号，在该版本下没有该文件。但是可以用 git reset —hard commit_id 进行版本回退，回退到有这个文件的版本号。而 git checkout commit_id file 命令是从含有该文件的旧版本号里把该文件拿出来，放到现版本里，版本号不改变。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h3><p>每次提交，Git 都把提交串成了一条时间线，这条时间线就是一个分支</p><p>主分支，即<code>master</code>分支，<code>HEAD</code>不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的。</p><p><code>HEAD</code>指向的就是当前分支</p><p><code>master</code>分支是一条线，Git 用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点</p><p><img src="/2020/04/15/git%E6%B5%81%E7%A8%8B/master.png" alt="img"></p><p>每次提交，<code>master</code>分支都会向前移动一步，不断提交，<code>master</code>分支越来越长</p><p>创建新的分支例如<code>dev</code>时，Git 新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上</p><p><img src="/2020/04/15/git%E6%B5%81%E7%A8%8B/dev.png" alt="img"></p><p>然后，对工作区的修改和提交就是针对<code>dev</code>分支，新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变</p><p><img src="/2020/04/15/git%E6%B5%81%E7%A8%8B/head.png" alt="img"></p><p>如果在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>。合并最简单的办法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并</p><p><img src="/2020/04/15/git%E6%B5%81%E7%A8%8B/toget.png" alt="img"></p><p>Git 合并分支很快，改改指针，工作区内容也不变</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针删除，删除后，就剩下一条<code>master</code>分支</p><p><img src="/2020/04/15/git%E6%B5%81%E7%A8%8B/devn.png" alt="img"></p><h4 id="创建切换分支"><a href="#创建切换分支" class="headerlink" title="创建切换分支"></a>创建切换分支</h4><p>创建<code>dev</code>分支，然后切换到<code>dev</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换分支，相当于两条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p>然后使用<code>git branch</code>命令查看当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">master</span><br></pre></td></tr></table></figure><p>会列出所有分支，当前分支前面会标一个<code>*</code>号</p><p>然后就可以在<code>dev</code>分支上正常提交</p><p><code>dev</code>分支的工作完成，就可以切换成<code>master</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/15/git%E6%B5%81%E7%A8%8B/ahead.png" alt="img"></p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p><code>git merge</code>命令用于合并指定分支到当前分支。</p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>合并完成后，就可以删除<code>dev</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>切换分支使用<code>git checkout &lt;branch&gt;</code></p><p>撤销修改则是<code>git checkout -- &lt;file&gt;</code></p><p>最新版本的 Git 提供了新的<code>git switch</code>命令来切换分支</p><p>创建并切换到新的<code>dev</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev</span><br></pre></td></tr></table></figure><p>直接切换到已有的<code>master</code>分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch master</span><br></pre></td></tr></table></figure><h4 id="Sum-Up"><a href="#Sum-Up" class="headerlink" title="Sum Up"></a>Sum Up</h4><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git switch &lt;name&gt;</code>或者<code>git checkout &lt;name&gt;</code></li><li>创建+切换分支：<code>git switch -c &lt;name&gt;</code>或者<code>git checkout -b &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li></ul><h2 id="git-忽略某个目录或文件不上传"><a href="#git-忽略某个目录或文件不上传" class="headerlink" title="git 忽略某个目录或文件不上传"></a>git 忽略某个目录或文件不上传</h2><p>在目录下创建一个<code>.gitignore</code>文件</p><p>写入<code>node_modules</code>，保存</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target          <span class="string">//</span>忽略这个target目录</span><br><span class="line">angular.json    <span class="string">//</span>忽略这个angular.json文件</span><br><span class="line">log/*           <span class="string">//</span>忽略log下的所有文件</span><br><span class="line">css/*<span class="string">.css</span>       <span class="string">//</span>忽略css目录下的<span class="string">.css</span>文件</span><br></pre></td></tr></table></figure><p>然后在执行 git status 查看，就没有 node_modules 目录了</p><p>然后执行 git add .，就没有 node_modules</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-流程&quot;&gt;&lt;a href=&quot;#Git-流程&quot; class=&quot;headerlink&quot; title=&quot;Git 流程&quot;&gt;&lt;/a&gt;Git 流程&lt;/h1&gt;&lt;h2 id=&quot;Git-基础&quot;&gt;&lt;a href=&quot;#Git-基础&quot; class=&quot;headerlink&quot; title=&quot;Git 基础&quot;&gt;&lt;/a&gt;Git 基础&lt;/h2&gt;&lt;h3 id=&quot;获取-Git-仓库&quot;&gt;&lt;a href=&quot;#获取-Git-仓库&quot; class=&quot;headerlink&quot; title=&quot;获取 Git 仓库&quot;&gt;&lt;/a&gt;获取 Git 仓库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将尚未进行版本控制的本地目录转换成 Git 仓库&lt;/li&gt;
&lt;li&gt;从其他服务器 clone 一个已经存在的 Git 仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;初始化项目&quot;&gt;&lt;a href=&quot;#初始化项目&quot; class=&quot;headerlink&quot; title=&quot;初始化项目&quot;&gt;&lt;/a&gt;初始化项目&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /my-project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flexbox and Grid完全解构</title>
    <link href="http://yoursite.com/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/"/>
    <id>http://yoursite.com/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/</id>
    <published>2020-03-28T08:45:50.000Z</published>
    <updated>2020-03-28T09:21:08.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flexbox-and-Grid-完全解构"><a href="#Flexbox-and-Grid-完全解构" class="headerlink" title="Flexbox and Grid 完全解构"></a>Flexbox and Grid 完全解构</h1><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><blockquote><p>在任何流动的方向上(包括上下左右)都能进行良好的布局</p><p>可以以逆序 或者 以任意顺序排列布局</p><p>可以线性的沿着主轴一字排开 或者 沿着侧轴换行排列</p><p>可以弹性的在任意的容器中伸缩大小</p><p>可以使子元素们在容器主轴方向上 或者 在容器侧轴方向上 进行对齐</p><p>可以动态的 <strong>沿着主轴方向</strong> 伸缩子级的尺寸，与此同时保证父级侧轴方向上的尺寸</p></blockquote><a id="more"></a><p>Flexbox 的布局方式主要分为两个角色</p><p>一是 Flex Container（Flex 容器）</p><p>二是 Flex Item（Flex 项目）</p><p>demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"flex-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box A"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box B"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box C"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box D"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box E"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Flex-Container"><a href="#Flex-Container" class="headerlink" title="Flex Container"></a>Flex Container</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a><code>flex-direction</code></h4><p><code>flex-direction</code>这个属性是用来定义在它里面的 flex items 的排序方向</p><p>它的预设值是 row</p><div class="table-container"><table><thead><tr><th>设定</th><th>效果</th></tr></thead><tbody><tr><td>row：横向排列</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325174436386.png" alt="image-20200325174436386" style="zoom: 33%;"></td></tr><tr><td>column：竖向排列</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325174504506.png" alt="image-20200325174504506" style="zoom: 33%;"></td></tr><tr><td>row-reverse：横向翻转</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325174526477.png" alt="image-20200325174526477" style="zoom:33%;"></td></tr><tr><td>column-reverse：纵向翻转</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325174548376.png" alt="image-20200325174548376" style="zoom:33%;"></td></tr></tbody></table></div><h5 id="轴的概念"><a href="#轴的概念" class="headerlink" title="轴的概念"></a>轴的概念</h5><p><code>flex-direction:row</code></p><p>主轴（main-axis）是 row</p><p>交叉轴（cross-axis）是 column</p><p><code>flex-direction:column</code></p><p>主轴（main-axis）是 column</p><p>交叉轴（cross-axis）是 row</p><h4 id="justify-content-amp-align-items"><a href="#justify-content-amp-align-items" class="headerlink" title="justify-content&amp;align-items"></a><code>justify-content</code>&amp;<code>align-items</code></h4><p><code>justify-content</code>是设定主轴的排序方向</p><p><code>align-items</code>是设定交叉轴的排序方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#044bd9</span>;</span><br><span class="line">  <span class="attribute">heigh</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="comment">/* 沿主轴，居中对齐 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/* 沿交叉轴，居中对齐 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325175126036.png" alt="image-20200325175126036" style="zoom:50%;"></p><p>center：居中对齐</p><p>flex-start：起始方向对齐</p><p>flex-end：结束方向对齐</p><p>方向是由于 flex-direction 的设定决定的</p><p>justify-content 的值</p><p>space-between：item 之间间隔相同的间隙，首尾距离边界没有间隙</p><p>space-around：item 之间间隔相同的间隙，首尾为中间的二分之一</p><p>space-evenly：item 之间间隔相同的间隙，首尾也和中间一样</p><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a><code>flex-wrap</code></h4><p>flex-wrap 是指是否会分行，默认 nowrap，一行显示，压缩 items</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325175623174.png" alt="image-20200325175623174" style="zoom:50%;"></p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325175638542.png" alt="image-20200325175638542" style="zoom: 33%;"></p><p>设置为 wrap，超出宽度就会分行显示，然后根据设定，显示出对齐效果</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325175901507.png" alt="image-20200325175901507" style="zoom: 50%;"></p><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><code>flex-flow</code></h4><p>flex-flow（flex-direction+flex-wrap）</p><p>flex-flow:row wrap</p><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a><code>align-content</code></h4><p>这个值是当 flex-wrap 的设定值时 wrap 时，即有多于一行 flex items 时才会生效</p><p>用于设定行与行之间的对齐方式</p><div class="table-container"><table><thead><tr><th>设定</th><th>效果</th></tr></thead><tbody><tr><td>center</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325180427403.png" alt="image-20200325180427403" style="zoom:50%;"></td></tr><tr><td>flex-start</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325180529990.png" alt="image-20200325180529990" style="zoom:50%;"></td></tr><tr><td>flex-end</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325180553649.png" alt="image-20200325180553649" style="zoom:50%;"></td></tr><tr><td>space-between</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325180648589.png" alt="image-20200325180648589" style="zoom:50%;"></td></tr><tr><td>space-around</td><td><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200325180630050.png" alt="image-20200325180630050" style="zoom:50%;"></td></tr></tbody></table></div><h3 id="Flex-Item"><a href="#Flex-Item" class="headerlink" title="Flex Item"></a>Flex Item</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h4><p>用于调整 flex item 的排序位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.C</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2d680</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326140002254.png" alt="image-20200326140002254" style="zoom:50%;"></p><p>flex item 的 order 预设值是 0</p><p>排序是根据 order 由小至大排列</p><p>flex item 在 HTML 的位置不代表最终显示的位置</p><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h4><p>用于覆写 flex container 的<code>align-items</code>设定</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.C</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2d680</span>;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326141448356.png" alt="image-20200326141448356" style="zoom:50%;"></p><p>（注：要取消 align-content 的设定）</p><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h4><p>flex-basis 是设定 flex-item 的主轴方向的大小的</p><p>设置是宽度还是高度，由 flex-direction 决定</p><p>并且原有的宽度或者高度设定就会失效</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326142223994.png" alt="image-20200326142223994" style="zoom:50%;"></p><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a><code>flex-grow</code></h4><p>flex-grow 是指当 flex-container 主轴方向有剩余空间的时候</p><p>flex-item 沿主轴方向扩大的设定，0 表示不扩大</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326142939695.png" alt="image-20200326142939695" style="zoom: 67%;"></p><p><code>.box{flex-grow:1}</code>放大占满主轴方向的空间</p><p>三个 item 的 grow 都为 1 的时候，1 表示占 1 份的意思，即是三个 item 各占有剩余空间 120px 中的一份</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326143108303.png" alt="image-20200326143108303" style="zoom:67%;"></p><p>给 B 单独设置<code>flex-grow:3</code>则是 120px 分成五份，B 占有三份</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326143546529.png" alt="image-20200326143546529" style="zoom:67%;"></p><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a><code>flex-shrink</code></h4><p>flex-shrink 与 flex-grow 相反</p><p>是指当 flex item 主轴方向的大小总和，超出了 flex container 的时候</p><p>flex item 沿主轴方向如何缩小的设定，flex-shrink 的预设值是 1，比如缩放的时候，nowap 的状况下，item 都是均匀的缩小，各自分担一份</p><p>flex-shrink:0;代表当主轴方向空间不足时，都不能缩小对应的 flex item</p><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a><code>flex</code></h4><p>flex-grow + flex-shrink + flex-basis 组合</p><p><code>flex:1 1 auto</code></p><h3 id="与-BFC-的细微区别"><a href="#与-BFC-的细微区别" class="headerlink" title="与 BFC 的细微区别"></a>与 BFC 的细微区别</h3><p>但需要注意的是以下几点细节，Flexbox 布局 和 Block 布局是有细微区别的</p><ul><li>Flexbox 不支持 <code>::first-line</code> 和 <code>::first-letter</code> 这两种伪元素</li><li><code>vertical-align</code> 对 Flexbox 中的子元素 是没有效果的</li><li><code>float</code> 和 <code>clear</code> 属性对 Flexbox 中的子元素是没有效果的，也不会使子元素脱离文档流(但是对 Flexbox 是有效果的！)</li><li>多栏布局<code>（column-*）</code> 在 Flexbox 中也是失效的，不能使用多栏布局在 Flexbox 排列其下的子元素</li><li>Flexbox 下的子元素不会继承父级容器的宽</li></ul><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><h3 id="Grid-Container"><a href="#Grid-Container" class="headerlink" title="Grid Container"></a>Grid Container</h3><p>Flexbox 属于一维（1-Dimension）的排版方式，Flexbox 容器只能控制一个方向，即水平或者竖直方向，如果需要控制另一个方向则需要在添加一层 Flexbox 容器</p><p>Grid 时二维（2-Dimensions）的排版方式，Grid 容器则可以一次控制两个方向，这样就可以直接定义容器内元素的位置</p><h4 id="grid-template-columns-amp-grid-template-rows"><a href="#grid-template-columns-amp-grid-template-rows" class="headerlink" title="grid-template-columns &amp; grid-template-rows"></a><code>grid-template-columns</code> &amp; <code>grid-template-rows</code></h4><p>先设置 row 再设置 column</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="comment">/*设置垂直方向划分*/</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/*设置水平方向划分*/</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入两个 item，仅设置背景，显示如图</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326155706902.png" alt="image-20200326155706902" style="zoom:50%;"></p><h3 id="Grid-Item"><a href="#Grid-Item" class="headerlink" title="Grid Item"></a>Grid Item</h3><h4 id="grid-row-amp-grid-column"><a href="#grid-row-amp-grid-column" class="headerlink" title="grid-row&amp;grid-column"></a><code>grid-row</code>&amp;<code>grid-column</code></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cell-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6dd9bf</span>;</span><br><span class="line">  <span class="comment">/*grid-row: 1/3;</span></span><br><span class="line"><span class="comment">  grid-column: 1/3;*/</span></span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">1</span>/<span class="number">3</span>/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f26e50</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">4</span>/<span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326160101327.png" alt="image-20200326160101327" style="zoom:50%;"></p><p>根据标线设置占据的位置</p><p>grid-area 是 row 和 column 的合写，设置的值的顺序</p><p><code>grid-row的第一个值/grid-column的第一个值/grid-row的第二个值/grid-column的第二个值</code></p><p>这个的写法，就是左上角和右下角的坐标。不过要记住这个轴</p><p>span 延伸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f26e50</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">4</span>/<span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326161233880.png" alt="image-20200326161233880" style="zoom:50%;"></p><h4 id="Grid-Lines"><a href="#Grid-Lines" class="headerlink" title="Grid-Lines"></a><code>Grid-Lines</code></h4><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326162046444.png" alt="image-20200326162046444" style="zoom:50%;"></p><p>这个标尺中划分出来的线，Grid 容器的分割线，就是 Grid-Lines，是可以给它们命名的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [Y1] <span class="number">100px</span> [Y2] <span class="number">100px</span> [Y3] <span class="number">100px</span> [Y4] <span class="number">100px</span> [Y5] <span class="number">100px</span> [Y6];</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [X1] <span class="number">100px</span> [X2] <span class="number">100px</span> [X3] <span class="number">100px</span> [X4] <span class="number">100px</span> [X5] <span class="number">100px</span> [X6];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接用 Grid-Line 的名字来定义 item 的位置了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f26e50</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: Y4/Y6;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Grid-Areas"><a href="#Grid-Areas" class="headerlink" title="Grid-Areas"></a><code>Grid-Areas</code></h4><p>Grid 容器内的方格则称为 Grid-Areas</p><p>CSS 提供了方法，可以直接给予一个或者多个方格命名，然后可以直接在元素中引用</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326163233184.png" alt="image-20200326163233184" style="zoom:50%;"></p><p>container 中，使用<code>grid-template-areas</code>命名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [Y1] <span class="number">100px</span> [Y2] <span class="number">100px</span> [Y3] <span class="number">100px</span> [Y4] <span class="number">100px</span> [Y5] <span class="number">100px</span> [Y6];</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [X1] <span class="number">100px</span> [X2] <span class="number">100px</span> [X3] <span class="number">100px</span> [X4] <span class="number">100px</span> [X5] <span class="number">100px</span> [X6];</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">'header header header header header'</span></span><br><span class="line">    <span class="string">'nav main main main main'</span></span><br><span class="line">    <span class="string">'nav main main main main'</span></span><br><span class="line">    <span class="string">'nav main main main main'</span></span><br><span class="line">    <span class="string">'. footer footer footer .'</span>;</span><br><span class="line">  <span class="comment">/*没有命名的位置可以用.占位*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>item 中，使用<code>grid-area</code>调用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cell-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6dd9bf</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#50a18e</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: nav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2d680</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-4</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f26e50</span>;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="row-gap-amp-column-gap"><a href="#row-gap-amp-column-gap" class="headerlink" title="row-gap&amp;column-gap"></a><code>row-gap</code>&amp;<code>column-gap</code></h4><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326163905067.png" alt="image-20200326163905067" style="zoom:50%;"></p><p>添加间距，会把 container 元素撑开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-gap</span>: 15<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><h4 id="fr-amp-repeat"><a href="#fr-amp-repeat" class="headerlink" title="fr&amp;repeat()"></a><code>fr</code>&amp;<code>repeat()</code></h4><p>相对单位 fr 的使用</p><p>1fr 即占一份的意思</p><p>repeat()函数，第一个参数是要重复的次数，第二个参数是要重复些什么</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-rows</span>: 3<span class="selector-tag">fr</span> <span class="selector-tag">repeat</span>(4, 1<span class="selector-tag">fr</span>);</span><br><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(5, 1<span class="selector-tag">fr</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200326164852806.png" alt="image-20200326164852806" style="zoom:50%;"></p><p>注：repeat()并不适用于 grid-template-areas</p><h4 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a><code>justify-items</code></h4><p>沿着 column（行）轴线对齐网格项(grid items)（相反的属性是 <code>align-items</code> 沿着 row（列）轴线对齐）。此值适用于容器内的所有网格项。</p><ul><li><code>start</code>：将网格项对齐到其单元格的左侧起始边缘（左侧对齐）</li><li><code>end</code>：将网格项对齐到其单元格的右侧结束边缘（右侧对齐）</li><li><code>center</code>：将网格项对齐到其单元格的水平中间位置（水平居中对齐）</li><li><code>stretch</code>：填满单元格的宽度（默认值）</li></ul><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200327214940615.png" alt="image-20200327214940615" style="zoom:50%;"></p><p><code>place-items</code> 是设置 <code>align-items</code> 和 <code>justify-items</code> 的简写形式。</p><p>第一个值设置 <code>align-items</code> 属性，第二个值设置 <code>justify-items</code> 属性。如果省略第二个值，则将第一个值同时分配给这两个属性。</p><p>（Edge 不支持）</p><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a><code>justify-content</code></h4><p>设置网格容器内的网格的对齐方式。 此属性沿着 column（行）轴线对齐网格（相反的属性是 <code>align-content</code>，沿着 row（列）轴线对齐网格）。</p><ul><li><code>start</code>：将网格对齐到 网格容器(grid container) 的左侧起始边缘（左侧对齐）</li><li><code>end</code>：将网格对齐到 网格容器 的右侧结束边缘（右侧对齐）</li><li><code>center</code>：将网格对齐到 网格容器 的水平中间位置（水平居中对齐）</li><li><code>stretch</code>：调整 网格项(grid items) 的宽度，允许该网格填充满整个 网格容器 的宽度</li><li><code>space-around</code>：在每个网格项之间放置一个均匀的空间，左右两端放置一半的空间</li><li><code>space-between</code>：在每个网格项之间放置一个均匀的空间，左右两端没有空间</li><li><code>space-evenly</code>：在每个网格项目之间放置一个均匀的空间，左右两端放置一个均匀的空间</li></ul><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200327215027208.png" alt="image-20200327215027208" style="zoom: 50%;"></p><h3 id="Grid-中自动排列的算法"><a href="#Grid-中自动排列的算法" class="headerlink" title="Grid 中自动排列的算法"></a>Grid 中自动排列的算法</h3><p>Grid 布局中实现流体网格列和列间距</p><p>没有必要指定网格项目具体的值就可以实现网格项目的排列位置。</p><p>如果显式声明网格属性，网格项目根据自动排列算法，会使网格排列变得更糟糕。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(5, 1<span class="selector-tag">fr</span>);</span><br><span class="line"><span class="selector-tag">grid-template-rows</span>: <span class="selector-tag">repeat</span>(5, 1<span class="selector-tag">fr</span>);</span><br><span class="line"><span class="selector-tag">grid-gap</span>: 2<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200327220532293.png" alt="image-20200327220532293" style="zoom:50%;"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-7</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#e03f3f</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200327220654373.png" alt="image-20200327220654373" style="zoom:50%;"></p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200327220820290.png" alt="image-20200327220820290" style="zoom: 75%;"></p><p><code>.item-10</code>会寻找一个新的行，没有填充到 6 下面</p><h4 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a><code>grid-auto-flow</code></h4><p>它的默认值是 row，横向排列</p><p>设置为 column 康康，变成了竖直排列，但是还是有填充的问题</p><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200327222124797.png" alt="image-20200327222124797"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">column</span> <span class="selector-tag">dense</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/28/Flexbox-and-Grid%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%84/image-20200327224818098.png" alt="image-20200327224818098"></p><ul><li>如果没有明确指定网格项目位置，网格会按自动排列算法，将它最大化利用可用空间</li><li>如果在当前行没有可用位置，网格会自动搜索下一行，这样会造成一定的差距，浪费可用空间</li><li>可以把<code>grid-auto-flow</code>的<code>row</code>值改变<code>auto</code>，可以切换搜索顺序</li><li><code>grid-auto-flow</code>还可以接受另一个关键词。默认情况下，其值是<code>sparse</code>（稀疏），但我们可以将其显式的设置为<code>dense</code>（稠密），让网格项目试图自动填补所有可用的空白空间</li></ul><p>参考：</p><p><a href="https://www.html.cn/archives/8510" target="_blank" rel="noopener"><a href="https://www.html.cn/archives/8510" target="_blank" rel="noopener">CSS Grid 布局完全指南(图解 Grid 详细教程)</a></a></p><p><a href="https://www.html.cn/archives/8629" target="_blank" rel="noopener"><a href="https://www.html.cn/archives/8629" target="_blank" rel="noopener">CSS3 Flexbox 布局完全指南(图解 Flexbox 布局详细教程)</a></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flexbox-and-Grid-完全解构&quot;&gt;&lt;a href=&quot;#Flexbox-and-Grid-完全解构&quot; class=&quot;headerlink&quot; title=&quot;Flexbox and Grid 完全解构&quot;&gt;&lt;/a&gt;Flexbox and Grid 完全解构&lt;/h1&gt;&lt;h2 id=&quot;Flexbox&quot;&gt;&lt;a href=&quot;#Flexbox&quot; class=&quot;headerlink&quot; title=&quot;Flexbox&quot;&gt;&lt;/a&gt;Flexbox&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在任何流动的方向上(包括上下左右)都能进行良好的布局&lt;/p&gt;
&lt;p&gt;可以以逆序 或者 以任意顺序排列布局&lt;/p&gt;
&lt;p&gt;可以线性的沿着主轴一字排开 或者 沿着侧轴换行排列&lt;/p&gt;
&lt;p&gt;可以弹性的在任意的容器中伸缩大小&lt;/p&gt;
&lt;p&gt;可以使子元素们在容器主轴方向上 或者 在容器侧轴方向上 进行对齐&lt;/p&gt;
&lt;p&gt;可以动态的 &lt;strong&gt;沿着主轴方向&lt;/strong&gt; 伸缩子级的尺寸，与此同时保证父级侧轴方向上的尺寸&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="布局" scheme="http://yoursite.com/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>数论</title>
    <link href="http://yoursite.com/2020/03/23/%E5%9F%9F/"/>
    <id>http://yoursite.com/2020/03/23/%E5%9F%9F/</id>
    <published>2020-03-23T06:00:50.000Z</published>
    <updated>2020-04-04T13:07:45.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><h2 id="域的定义与性质"><a href="#域的定义与性质" class="headerlink" title="域的定义与性质"></a>域的定义与性质</h2><h3 id="有限域的三大基本定理"><a href="#有限域的三大基本定理" class="headerlink" title="有限域的三大基本定理"></a>有限域的三大基本定理</h3><ol><li>有限域元素个数都是素数的幂$p^n$</li><li>对于任意的p和正整数n，$p^n$元的有限域都是存在的</li><li>所有元素个数相同的有限域都是同构的</li></ol><h3 id="域的定义"><a href="#域的定义" class="headerlink" title="域的定义"></a>域的定义</h3><a id="more"></a><p>域定义了四则运算的代数系统</p><p>定义</p><script type="math/tex; mode=display">设\mathbb{F}是一个非空集合，在其上定义了两种运算，分别为加法和乘法\\记作“+”和“·”，对于\mathbb{F}中的任意两个元素a，b，\\均有a+b\in\mathbb{F}，a·b\in\mathbb{F}（\mathbb{F}对于加法和乘法自封闭）\\\mathbb{F}对于所规定的运算成为一个域\\(1)\mathbb{F}中所有元素对于加法形成一个加法交换群\\(2)\mathbb{F}所有非零元素(记作\mathbb{F}^*)对于乘法形成一个乘法交换群\\(3)对于任意a,b,c\in\mathbb{F}，a(b+c)=ab+ac（满足分配律）</script><p>这样一来，一个域上有两个群，一个是加法交换群，一个是去除零元后的乘法交换群，通过分配律连接</p><p>定义一个域，不仅要定义元素，还要定义运算</p><p><strong>一个域至少有两个元素，即<em>加法群的零元</em>和<em>乘法群的单位元</em>，分别是域的零元和单位元</strong></p><p>当域的元素个数有限时称为有限域，或者伽罗华域，否则为无限域</p><script type="math/tex; mode=display">常见的有理数集合\mathbb{Q}，实数集合\mathbb{R}和复数集合\mathbb{C}\\按照定义的加法和乘法都形成域，分别称为有理数域，实数域和复数域</script><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="半群和独异点"><a href="#半群和独异点" class="headerlink" title="半群和独异点"></a>半群和独异点</h4><p>半群的定义</p><script type="math/tex; mode=display">设S是一个非空集合，\ast是S上的一个二元运算，\\若\ast是可结合的，则称代数系统<S;\ast>是半群</script><hr><p>独异点的定义</p><script type="math/tex; mode=display">若半群<S;\ast>中运算\ast有单位元，则称<S;\ast>为独异点</script><hr><p>子半群</p><script type="math/tex; mode=display">设<S;\ast>是一个半群，若<T;\ast>是<S;\ast>的子代数，\\则称<T;\ast>是<S;\ast>的子半群</script><hr><p>子独异点</p><script type="math/tex; mode=display">设<S;\ast>是一独异点，若<T;\ast>是<S;\ast>的子代数，且单位元e\in T，\\则称<T;\ast>是<S;\ast>的子独异点</script><h4 id="群的定义"><a href="#群的定义" class="headerlink" title="群的定义"></a>群的定义</h4><p>群的定义</p><script type="math/tex; mode=display">设<G;\ast>是一个代数系统，如果运算\ast是可结合的，存在单位元\\且G中任何元素a都有逆元a^{-1}，则称<G;\ast>是一个群\\结合律：对\forall a,b,c\in G，有a\ast(b\ast c)=(a\ast b)\ast c\\存在单位元\\每个元素都有逆元</script><hr><h4 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h4><p>群中元素的幂</p><script type="math/tex; mode=display">对于任意a\in G\\a^0=e;a^{n+1}=a^n\ast a\\(a^{-1})^0=e,(a^{-1})^{n+1}=(a^{-1})^n\ast a^{-1}\\对于任意整数m和n，依然成立\\a^m\ast a^n=a^{m+n};(a^m)^n=a^{mn}</script><hr><p>循环群</p><script type="math/tex; mode=display">在群<G;\ast>中，若存在一元素g\in G,使得每一个元素a\in G都能表示成g^i(i\in I)\\则称群<G;\ast>为循环群，称g为该循环群的生成元，并称群<G;\ast>由g生成</script><hr><p>群的阶</p><script type="math/tex; mode=display">设<G;\ast>是一个群，如果G是有限集，则称<G;\ast>是有限群\\G中元素的个数称为群<G;\ast>的阶</script><hr><p>元素的周期</p><script type="math/tex; mode=display">设<G;\ast>是一个群，a\in G，若存在正整数r，\\使得a^r=e，则称元素a具有有限周期\\使得a^r=e成立的最小正整数r称为a的周期\\若对于任何正整数r，均有a^r\neq e,\\则称a的周期为无限</script><hr><p>定理</p><script type="math/tex; mode=display">设<G;\ast>是一由元素g生成的循环群，则\\若g的周期为n，则<G;\ast>是一个阶为n的有限循环群\\若g的周期为无限，则<G;\ast>是一个无限阶的循环群</script><h4 id="群的性质"><a href="#群的性质" class="headerlink" title="群的性质"></a>群的性质</h4><h4 id="相约性"><a href="#相约性" class="headerlink" title="相约性"></a>相约性</h4><script type="math/tex; mode=display">设<G;\ast>是一个群，则对任意的a,b\in G\\存在唯一的元素x\in G，使得a\ast x=b\\存在唯一的元素y\in G，使得y\ast a=b</script><hr><script type="math/tex; mode=display">设<G;\ast>是一个群，则对任意的a,b,c\in G\\若a\ast b=a\ast c，则b=c\\若b\ast a=c\ast a，则b=c</script><hr><h4 id="元素运算后求逆元等于元素分别求逆元后颠倒次序相运算"><a href="#元素运算后求逆元等于元素分别求逆元后颠倒次序相运算" class="headerlink" title="元素运算后求逆元等于元素分别求逆元后颠倒次序相运算"></a>元素运算后求逆元等于元素分别求逆元后颠倒次序相运算</h4><script type="math/tex; mode=display">群中的任意元素(a\ast b)^{-1}=b^{-1}\ast a^{-1}</script><hr><h4 id="关于元素的周期"><a href="#关于元素的周期" class="headerlink" title="关于元素的周期"></a>关于元素的周期</h4><script type="math/tex; mode=display">群<G;\ast>中的元素a若具有有限后期r，则当且仅当k是r的整数倍时，a^k=e\\群中任一元素与它的逆元具有相同的周期\\在有限群<G;\ast>中，每个元素均具有优先周期，且周期不超过群的阶</script><hr><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>以下集合按照所定义的加法和乘法均形成域</p><script type="math/tex; mode=display">(1)\mathbb{Q}[\sqrt{2}]=\{a+b\sqrt{2}|a,b\in\mathbb{Q}\}，加法和乘法分别为实数域\mathbb{R}上的加法和乘法\\(2)\mathbb{R}[\sqrt{-2}]=\{a+b\sqrt{-2}|a,b\in\mathbb{R}\}，加法和乘法分别为复数域\mathbb{C}上的加法和乘法\\(3)\mathbb{Z}_p=\{0,1,…,p-1\}，p为素数，加法和乘法分别为模p的加法和乘法</script><hr><p>以下集合按照所定义的加法和乘法均不形成域</p><script type="math/tex; mode=display">(1)全体整数所形成的集合\mathbb{Z}，加法和乘法分别是\mathbb{Z}上的加法和乘法\\(2)集合\{a+b\sqrt[3]{2}|a,b\in\mathbb{Q}\}，加法和乘法分别是...\\(3)\mathbb{Z}_m=\{0,1,...,m-1\}，m为合数，加法和乘法分别为模m的加法和乘法</script><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><script type="math/tex; mode=display">设\mathbb{F}是一个域，那么，\\(1)对于任意a\in\mathbb{F}，0a=a0=0；\\(2)任意a,b\in\mathbb{F}，若ab=0，则a=0或b=0</script><h2 id="子域和扩域"><a href="#子域和扩域" class="headerlink" title="子域和扩域"></a>子域和扩域</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><script type="math/tex; mode=display">设\mathbb{F}是一个域，\mathbb{F}_0是\mathbb{F}的非空子集，\\如果对于\mathbb{F}上的加法和乘法，\mathbb{F}自身也是一个域，\\则称\mathbb{F}_0是\mathbb{F}的子域，\mathbb{F}是\mathbb{F}_0的扩域，\\记作\mathbb{F}_0\subset \mathbb{F}\\例如：\mathbb{Q}\subset\mathbb{Q}[\sqrt{2}]\subset\mathbb{R}\subset\mathbb{R}[\sqrt{-2}]\subset\mathbb{C}</script><hr><h3 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h3><p>定理</p><script type="math/tex; mode=display">设\mathbb{F}_0、\mathbb{F}_0^*均是域\mathbb{F}的非空子集\\当且仅当以下条件成立时\mathbb{F}_0是域\mathbb{F}的子域\\(1)任意a,b\in\mathbb{F}_0，都有-a,a+b\in\mathbb{F}_0\\(2)任意非零元素a,b\in\mathbb{F}_0，都有a^{-1},ab\in\mathbb{F}_0</script><h3 id="特征的定义"><a href="#特征的定义" class="headerlink" title="特征的定义"></a>特征的定义</h3><script type="math/tex; mode=display">设\mathbb{F}是一个域，如果存在正整数m，使得对于任意a\in\mathbb{F}均有ma=0，\\则在所有m中，最小的正整数称为域\mathbb{F}的特征；\\否则，如果不存在正整数m，使得对于任意a\in\mathbb{F}均有ma=0，\\则称域\mathbb{F}的特征为0。域\mathbb{F}的特征记作char(\mathbb{F})</script><h3 id="域的同构"><a href="#域的同构" class="headerlink" title="域的同构"></a>域的同构</h3><script type="math/tex; mode=display">设\mathbb{F}，\mathbb{K}是两个域，如果存在\mathbb{F}到\mathbb{K}上的一一映射\delta ，\\使得对于任意a，b\in\mathbb{F}，均有\\\delta (a+b)=\delta (a)+\delta (b)，\delta (ab)=\delta (a)\delta (b)\\则称\delta 为\mathbb{F}到\mathbb{K}上的同构映射，此时称域\mathbb{F}、\mathbb{K}同构，记作\mathbb{F}\cong \mathbb{K}\\如果\mathbb{F}=\mathbb{K}，则称\delta为自同构映射，特别的，\\若进一步对于任意a\in\mathbb{F}均有\delta(a)=a，则称\delta为恒等自同构映射</script><h3 id="素域"><a href="#素域" class="headerlink" title="素域"></a>素域</h3><script type="math/tex; mode=display">一个域的最小子域称为该域的素域\\设\mathbb{F}是一个域，如果char(\mathbb{F})为正整数，则必为某个素数p。\\特征为素数p的域的素域与\mathbb{Z}_p同构，特征为0的域的素域与\mathbb{Q}同构</script><h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><script type="math/tex; mode=display">设\mathbb{F}是一个域，a,b\in\mathbb{F}，则对于任意正整数n\\(a+b)^n=\sum_{i=0}^{n}\binom{n}{i}a^{n-i}b^i</script><h3 id="特征幂的二项式定理"><a href="#特征幂的二项式定理" class="headerlink" title="特征幂的二项式定理"></a>特征幂的二项式定理</h3><script type="math/tex; mode=display">设\mathbb{F}是一个域，char(F)=p，则对于任意a,b\in\mathbb{F}，n\geqslant 0，均有\\(a\pm b)^{p^n}=a^{p^n}\pm b^{p^n}</script><h3 id="域上的多项式"><a href="#域上的多项式" class="headerlink" title="域上的多项式"></a>域上的多项式</h3><script type="math/tex; mode=display">对于非负整数i，a_ix^i，a_i\in\mathbb{F}表示域\mathbb{F}上文字为x的单项式\\f(x)=a_nx^n+a_{n-1}x^{n-1}+···+a_1x^1+a_0x^0，a_i\in\mathbb{F}\\为域\mathbb{F}上文字为x的多项式，简称为域\mathbb{F}上的多项式\\a_ix^i称为f(x)的i次项，a_i称为f(x)的i次项系数。\\当a_n\neq 0时，称该多项式为n次多项式，a_n称为f(x)的首项系数，\\多项式f(x)的次数记作deg f(x)\\如果多项式的各项系数均为0，则称多项式为零多项式，记作0，\\零多项式的次数规定为-\infty。两个多项式相等是指其对应项的系数全部相等</script><hr><p>多项式的加法和乘法</p><script type="math/tex; mode=display">在\mathbb{F}[x]上可以定义加法和乘法\\设f(x)=\sum_{i=0}^{n}a_ix^i，g(x)=\sum_{i=0}^{n}b_ix^i，n\geqslant m，\\令b_{m+1}=b_{m+2}=···=b_n=0，则可定义\\f(x)+g(x)=\sum_{i=0}^{n}(a_i+b_i)x^i，\\f(x)·g(x)=\sum_{j=0}^{m+n}(\sum_{i=0}^{j}a_ib_{j-1})x^j\\deg(f(x)+g(x))\leqslant  max\{degf(x),degg(x)\}\\ \mathbb{F}[x]按照上面定义的加法和乘法不是域，除了\mathbb{F}中的非零元素，\\\mathbb{F}[x]中的其他元素均没有乘法逆元</script><h3 id="多项式的二项式定理及分布域"><a href="#多项式的二项式定理及分布域" class="headerlink" title="多项式的二项式定理及分布域"></a>多项式的二项式定理及分布域</h3><script type="math/tex; mode=display">f(x),g(x)是特征为p的域上的多项式，那么\\(f(x)\pm g(x))^{p^n}=f(x)^{p^n}\pm g(x)^{p^n}\\\mathbb{F}(x)=\{\frac{f(x)}{g(x)}|f(x),g(x)\in\mathbb{F}[x],g(x)\neq0\}按照以下规则形成一个域，\\其中\frac{f(x)}{g(x)}+\frac{s(x)}{t(x)}=\frac{f(x)t(x)+s(x)g(x)}{g(x)t(x)},\frac{f(x)}{g(x)}\frac{s(x)}{t(x)}=\frac{f(x)s(x)}{g(x)t(x)}，\\且\frac{f(x)}{g(x)}=\frac{f_1(x)}{g_1(x)}当且仅当f(x)g_1(x)=g(x)f_1(x)\\特别的，当\mathbb{F}是特征为p的有限域时，\mathbb{F}(x)是特征为p的无限域</script><h2 id="多项式的辗转相除法"><a href="#多项式的辗转相除法" class="headerlink" title="多项式的辗转相除法"></a>多项式的辗转相除法</h2><h3 id="带余除法算式"><a href="#带余除法算式" class="headerlink" title="带余除法算式"></a>带余除法算式</h3><script type="math/tex; mode=display">定理：设f(x),g(x)为域\mathbb{F}上的两个多项式，g(x)\neq0，则存在唯一一对多项式q(x),r(x),使得\\f(x)=q(x)g(x)+r(x), degr(x)<degg(x)\\r(x)称为f(x)被g(x)除所得的余式，记作(f(x))_{g(x)}=r(x)</script><hr><script type="math/tex; mode=display">定理：设f_1(x),f_2(x),g(x)为域\mathbb{F}上的多项式，g(x)\neq0，则\\(f_1(x)+f_2(x))_{g(x)}=(f_1(x))_{g(x)}+(f_2(x))_{g(x)}\\(f_1(x)f_2(x))_{g(x)}=((f_1(x))_{g(x)}(f_2(x))_{g(x)})_{g(x)}</script><hr><h3 id="因式与倍式"><a href="#因式与倍式" class="headerlink" title="因式与倍式"></a>因式与倍式</h3><script type="math/tex; mode=display">设f(x),g(x)为域\mathbb{F}上的两个多项式，g(x)\neq0，其带余除法算式如(1),\\当r(x)=0时，称f(x)能被g(x)整除，或者g(x)能整除f(x),记作g(x)|f(x)\\否则称g(x)不能整除f(x),记作g(x)|f(x)\\若g(x)|f(x)，f(x)称为g(x)的倍式，而g(x)称作f(x)的因式\\由定义，0是任意非零多项式的倍式，而域\mathbb{F}中非零元素为任意多项式的因式</script><hr><script type="math/tex; mode=display">设f(x)为域\mathbb{F}上的多项式，如果f(x)的因式只有c，cf(x)，其中c\in \mathbb{F}^*，\\则f(x)称为域\mathbb{F}上的不可约多项式，否则称为可约多项式</script><hr><script type="math/tex; mode=display">定理：域\mathbb{F}上的多项式f(x)是可约多项式，当且仅当存在两个域\mathbb{F}上的多项式f_1(x),f_2(x)\\degf_1(x)<degf(x),degf_2(x)<degf(x)，使得f(x)=f_1(x)f_2(x)</script><hr><script type="math/tex; mode=display">定理：域\mathbb{F}上的多项式g(x)|f_1(x),g(x)|f_2(x)，那么对于\mathbb{F}上的任意多项式s(x),t(x),\\g(x)|s(x)f_1(x)+t(x)f_2(x)</script><h3 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h3><script type="math/tex; mode=display">设f(x),g(x)为域\mathbb{F}上的两个多项式，若域\mathbb{F}上的多项式d(x)\neq0,\\同时满足d(x)|f(x),d(x)|g(x)，则称d(x)为f(x)和g(x)的公因式。\\当f(x)和g(x)不全为0时，在f(x)和g(x)的所有公因式中，一定有一个次数最高，首项系数为1的多项式，\\该多项式称为f(x)和g(x)的最高公因式，记作(f(x),g(x))或者gcd(f(x),g(x))\\当(f(x),g(x))=1时，f(x)和g(x)互素</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;域&quot;&gt;&lt;a href=&quot;#域&quot; class=&quot;headerlink&quot; title=&quot;域&quot;&gt;&lt;/a&gt;域&lt;/h1&gt;&lt;h2 id=&quot;域的定义与性质&quot;&gt;&lt;a href=&quot;#域的定义与性质&quot; class=&quot;headerlink&quot; title=&quot;域的定义与性质&quot;&gt;&lt;/a&gt;域的定义与性质&lt;/h2&gt;&lt;h3 id=&quot;有限域的三大基本定理&quot;&gt;&lt;a href=&quot;#有限域的三大基本定理&quot; class=&quot;headerlink&quot; title=&quot;有限域的三大基本定理&quot;&gt;&lt;/a&gt;有限域的三大基本定理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;有限域元素个数都是素数的幂$p^n$&lt;/li&gt;
&lt;li&gt;对于任意的p和正整数n，$p^n$元的有限域都是存在的&lt;/li&gt;
&lt;li&gt;所有元素个数相同的有限域都是同构的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;域的定义&quot;&gt;&lt;a href=&quot;#域的定义&quot; class=&quot;headerlink&quot; title=&quot;域的定义&quot;&gt;&lt;/a&gt;域的定义&lt;/h3&gt;
    
    </summary>
    
    
      <category term="study in school" scheme="http://yoursite.com/categories/study-in-school/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="study in school" scheme="http://yoursite.com/tags/study-in-school/"/>
    
  </entry>
  
  <entry>
    <title>密码学原理</title>
    <link href="http://yoursite.com/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/</id>
    <published>2020-03-23T06:00:50.000Z</published>
    <updated>2020-03-25T04:48:20.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学原理"><a href="#密码学原理" class="headerlink" title="密码学原理"></a>密码学原理</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="密码算法的分类"><a href="#密码算法的分类" class="headerlink" title="密码算法的分类"></a>密码算法的分类</h3><blockquote><p>对称密码算法：加密密钥和解密密钥相同或者能相互推导的密码算法，又称为秘密密钥算法或单密钥算法</p><p>公开密钥算法：加密密钥和解密密钥是指不同，在已知信息下无法相互推到的密码算法，又称非对称密码算法</p><ul><li>一对密钥称为公钥和私钥</li><li>可用于加密和数字签名</li><li>RSA</li></ul></blockquote><a id="more"></a><h3 id="密码体制的定义"><a href="#密码体制的定义" class="headerlink" title="密码体制的定义"></a>密码体制的定义</h3><p>密码体制（密码系统）的数学描述</p><p>它是一个五元组$(P,C,K,E,D)$满足条件：</p><ol><li>$P$是可能明文的有限集；（明文空间）</li><li>$C$是可能密文的有限集；（密文空间）</li><li>$K$是一切可能密钥构成的有限集；（密钥空间）</li><li>$E$是加密算法的有限集，$D$是解密算法的有限集</li><li>对任意的$k\in K$，有一个加密规则（算法）$e_k\in E$和相应的解密规则（算法）$d_k\in D$，使得$e_k:P\rightarrow C$和$d_k:C\rightarrow P$分别为加密解密函数，满足$d_k(e_k(x))=x$，这里$x\in P$</li></ol><p><strong>加密函数必须是单射函数</strong></p><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><h3 id="代换与置换"><a href="#代换与置换" class="headerlink" title="代换与置换"></a>代换与置换</h3><blockquote><p>代换密码</p><p>加密：将明文字符按照对应关系代换成另外的密文字符</p><p>解密：将密文字符按照对应关系还原成明文字符</p><p>密钥：对应关系</p><p><br></p><p>置换密码</p><p>加密：将明文字符按照一定的规则移动位置，得到排列错乱的密文，字符本身不变</p><p>解密：将密文字符按照相应的你想规则还原成原来的顺序</p><p>密钥：移位规则                                                                            </p></blockquote><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323160615829.png" alt="image-20200323160615829"></p><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323160637405.png" alt="image-20200323160637405"></p><h4 id="代换密码的数学描述"><a href="#代换密码的数学描述" class="headerlink" title="代换密码的数学描述"></a>代换密码的数学描述</h4><p>对于密码体制的五元组$(P,C,K,E,D)$有</p><ul><li>$P=C=Z_{26}$</li><li>K 是由 26 个数字 0，1，2，…，25 的所有可能的置换组成</li><li>对于任意的置换$\pi\in K$，定义<ul><li>$e_{\pi}(x)=\pi(x)$</li><li>$d_{\pi}(y)=\pi^{-1}(y)$</li></ul></li><li>$\pi^{-1}表示置换\pi的逆置换$</li></ul><p>注：加密函数必须是单射，$d_{\pi}(e_{\pi}(x))=x$</p><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323161459424.png" alt="image-20200323161459424"></p><h4 id="几种常用的代换密码"><a href="#几种常用的代换密码" class="headerlink" title="几种常用的代换密码"></a>几种常用的代换密码</h4><ol><li><p>仿射密码</p><script type="math/tex; mode=display">对于密码体制的五元组(P,C,K,E,D)有\\P=C=Z_{26}\\K=\{(a,b)\in Z_{26}\times Z_{26}:gcd(a,26)=1\}\\对任意的k=(a,b)\in K,x,y\in Z_{26},定义\\e_k(x)=(ax+b)mod26\\d_k(y)=a^{-1}(y-b)mod26\\a^{-1}是a关于模26乘法的逆</script><ul><li>当$a=1$时，又称为移位密码</li><li>密钥空间大小$\varphi(26)\times26=312 $</li></ul><hr><p>举例</p><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323162711399.png" alt="image-20200323162711399"></p><p>hot 对应的明文数值 7，14，19</p><ul><li>$(7\times7+3)mod26=0$</li><li>$(7\times14+3)mod26=23$</li><li>$(7\times19+3)mod26=6$</li></ul><p>得到对应的密文为 AXG</p><hr></li><li><p>希尔(HILL)密码</p><script type="math/tex; mode=display">对于密码体制的五元组(P,C,K,E,D)有\\P=C=(Z_{26})^m,m是不小于2的正整数\\K是定义在Z_{26}上的m\times\ m可逆矩阵的集合\\取密钥k\in K，k为一个m\times\ m矩阵，记作(k_{ij})\\对x=(x_1,x_2,...,x_m)\in P,y=(y_1,y_2,...,y_m)\in C,定义\\e_k(x)=xk,d_k(y)=yk\\k^{-1}表示k的逆矩阵\\以上运算均在Z_{26}上运行(模26)</script><hr><p>举例</p><script type="math/tex; mode=display">设m=2，取密钥k= \begin{pmatrix}  11 & 8 \\ 3 & 7\end{pmatrix}\\根据y=xk和x=yk^{-1}\\有(y_1,y_2)=(x_1,x_2)\begin{pmatrix}  11 & 8 \\ 3 & 7\end{pmatrix}\\k^{-1}=\begin{pmatrix}  7 & 18 \\ 23 & 11\end{pmatrix}\\则(x_1,x_2)=(y_1,y_2)\begin{pmatrix}  7 & 18 \\ 23 & 11\end{pmatrix}</script><p><br></p><script type="math/tex; mode=display">假设明文july，加密过程\\(9,20)\begin{pmatrix}  11 & 8 \\ 3 & 7\end{pmatrix} =(3,4)\\(11,24)\begin{pmatrix}  11 & 8 \\ 3 & 7\end{pmatrix} =(11,22)\\密文为delw</script><hr></li><li><p>维吉尼亚密码</p><script type="math/tex; mode=display">对于密码体制的五元组(P,C,K,E,D)有\\P=C=(Z_{26})^m,m是正整数\\对任意的k=(k_1,k_2,...,k_m)\in K，x=(x_1,x_2,...,x_m)\in P，y=(y_1,y_2,...,y_m)\in C\\定义e_k(x)=(x_1+k_1,x_2+k_2,...,x_m+k_m),d_k(y)=(y_1-k_1,y_2-k_2,...,y_m-k_m)\\以上运算均在Z_{26}上运行(模26)</script><hr><p>举例</p><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323175007359.png" alt="image-20200323175007359"></p><hr><p>安全性</p><ul><li>密钥空间大小为$26^m$</li><li>当$m=5$时，密钥空间大小超过$1.1\times 10^7$，已经不可能采用手工方法穷极搜索</li></ul><hr></li></ol><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><h4 id="矩阵的乘法"><a href="#矩阵的乘法" class="headerlink" title="矩阵的乘法"></a>矩阵的乘法</h4><script type="math/tex; mode=display">设A=(a_{i,j})是一个l\times m矩阵，B=(b_{j,k})是一个m\times n矩阵，\\则定义矩阵的乘法AB=C=(c_{i,k})\\c_{i,k}=\sum_{j=1}^{m}=a_{i,j}b_{j,k}\\C是一个l\ n矩阵\\矩阵乘法不满足交换律但满足结合律</script><h4 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h4><p>单位矩阵</p><script type="math/tex; mode=display">m\times m的矩阵中，主对角线上的元素均为1，其余元素均为0的矩阵称为单位矩阵，记为I_m\\I_2=\begin{pmatrix}  1 & 0 \\ 0 & 1\end{pmatrix}\\对任意l\times m矩阵A，有AI_m=A；对任意m\times n矩阵B，有I_mB=B</script><p>逆矩阵</p><script type="math/tex; mode=display">m\times m矩阵A的逆矩阵记为A^{-1}，满足\\AA^{-1}=A^{-1}A=I_m\\逆矩阵具有唯一性（但不一定存在）</script><p>行列式</p><script type="math/tex; mode=display">m\times m阶矩阵A=(a_{i,j})的行列式记作|A|或的detA\\|A|=\sum_{j=1}^{m}=a_{i,j}A_{i,j}</script><h4 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h4><script type="math/tex; mode=display">矩阵K的逆矩阵存在的充要条件是|K|非零；\\在Z_{26}下，逆矩阵存在的充要条件是|K|与26互素，即gcd(|K|,26)=1</script><h3 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h3><h4 id="置换密码的数学描述"><a href="#置换密码的数学描述" class="headerlink" title="置换密码的数学描述"></a>置换密码的数学描述</h4><p>对于密码体制的五元组$(P,C,K,E,D)$有</p><ul><li>$P=C=Z_{26}$</li><li>K 是由所有定义在集合$(1,2,…,m)$上的置换组成</li><li>对于任意的密钥（置换）$\pi\in K$，定义<ul><li>$e_{\pi}(x_1,x_2,…,x_m)=(x_{\pi(1)},x_{\pi(2)},…,x_{\pi(m)})$</li><li>$d_{\pi}(y_1,y_2,…,y_m)=(y_{\pi^{-1}(1)},y_{\pi^{-1}(2)},…,y_{\pi^{-1}(m)})$</li></ul></li><li>$\pi^{-1}表示置换\pi的逆置换$</li></ul><h4 id="置换密码举例"><a href="#置换密码举例" class="headerlink" title="置换密码举例"></a>置换密码举例</h4><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323180128109.png" alt="image-20200323180128109"></p><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323180515696.png" alt="image-20200323180515696"></p><h4 id="置换密码的特性"><a href="#置换密码的特性" class="headerlink" title="置换密码的特性"></a>置换密码的特性</h4><blockquote><p>置换密码实际上是希尔密码的特殊形式</p></blockquote><script type="math/tex; mode=display">给定集合(1,2,...,m)的一个置换\pi，定义置换\pi的关联置换矩阵K_\pi=(K_{ij})_{m\times m}\\其元素值为e_\pi(x_1,x_2,...,x_m)=(x_{\pi(1)},x_{\pi(2)},...,x_{\pi(m)})\\k_{i,j}=  \begin{cases}    1 & 若i=\pi(j) \\    0 & 否则    \end{cases}\\使用矩阵K_\pi为密钥的希尔密码等价于使用置换\pi在密钥的置换密码，且\\K_\pi^{-1}=K_{\pi^{-1 }}</script><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323182105781.png" alt="image-20200323182105781"></p><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323182130470.png" alt="image-20200323182130470"></p><h3 id="古典密码分析"><a href="#古典密码分析" class="headerlink" title="古典密码分析"></a>古典密码分析</h3><h4 id="密码分析概念和方法"><a href="#密码分析概念和方法" class="headerlink" title="密码分析概念和方法"></a>密码分析概念和方法</h4><p><img src="/2020/03/23/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86/image-20200323184759387.png" alt="image-20200323184759387"></p><h4 id="唯密文单表代换分析"><a href="#唯密文单表代换分析" class="headerlink" title="唯密文单表代换分析"></a>唯密文单表代换分析</h4><h4 id="希尔密码分析"><a href="#希尔密码分析" class="headerlink" title="希尔密码分析"></a>希尔密码分析</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码学原理&quot;&gt;&lt;a href=&quot;#密码学原理&quot; class=&quot;headerlink&quot; title=&quot;密码学原理&quot;&gt;&lt;/a&gt;密码学原理&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;密码算法的分类&quot;&gt;&lt;a href=&quot;#密码算法的分类&quot; class=&quot;headerlink&quot; title=&quot;密码算法的分类&quot;&gt;&lt;/a&gt;密码算法的分类&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对称密码算法：加密密钥和解密密钥相同或者能相互推导的密码算法，又称为秘密密钥算法或单密钥算法&lt;/p&gt;
&lt;p&gt;公开密钥算法：加密密钥和解密密钥是指不同，在已知信息下无法相互推到的密码算法，又称非对称密码算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一对密钥称为公钥和私钥&lt;/li&gt;
&lt;li&gt;可用于加密和数字签名&lt;/li&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="study in school" scheme="http://yoursite.com/categories/study-in-school/"/>
    
    
      <category term="study in school" scheme="http://yoursite.com/tags/study-in-school/"/>
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>群论</title>
    <link href="http://yoursite.com/2020/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    <id>http://yoursite.com/2020/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/</id>
    <published>2020-03-16T06:00:50.000Z</published>
    <updated>2020-03-16T10:03:49.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h1><h2 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h2><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>定义 1-1：</p><script type="math/tex; mode=display">设有非空集合A，函数f:A^n \Rightarrow A称为A上的一个n元运算，n是这个运算的阶</script><a id="more"></a><h4 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h4><p>A 是有限集合，A 上的一元运算有时采用运算表的方式来定义</p><div class="table-container"><table><thead><tr><th>$\circ$</th><th>$a_1$</th><th>$a_2$</th><th>…</th><th>$a_n$</th></tr></thead><tbody><tr><td>$a_1$</td><td>$\circ(a_1,a_1)$</td><td>$\circ(a_1,a_2)$</td><td>…</td><td>$\circ(a_1,a_n)$</td></tr><tr><td>$a_2$</td><td>$\circ(a_2,a_1)$</td><td>$\circ(a_2,a_2)$</td><td>…</td><td>$\circ(a_2,a_n)$</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>$a_n$</td><td>$\circ(a_n,a_1)$</td><td>$\circ(a_n,a_2)$</td><td>…</td><td>$\circ(a_n,a_n)$</td></tr></tbody></table></div><h4 id="运算的封闭性"><a href="#运算的封闭性" class="headerlink" title="运算的封闭性"></a>运算的封闭性</h4><p>定义 1-2：</p><script type="math/tex; mode=display">设\ast是集合A上的一个二元（或一元运算），S\subseteq A，若对于每一个序偶(a_i,a_j)\in S^2\\都有\ast(a_i,a_j)\in S，则称运算\ast在S是封闭的</script><h4 id="二元运算常见性质"><a href="#二元运算常见性质" class="headerlink" title="二元运算常见性质"></a>二元运算常见性质</h4><ul><li>交换律</li><li>结合律</li><li>分配律</li></ul><h4 id="特殊元素"><a href="#特殊元素" class="headerlink" title="特殊元素"></a>特殊元素</h4><p>单位元</p><script type="math/tex; mode=display">设\ast是集合A上的二元运算，\\若存在一元素e_l\in A，使得对\forall a\in A，\\有e_l\ast a=a，则称e_l是A中运算\ast的左单位元\\若存在一元素e_r\in A，使得对\forall a\in A，\\有a\ast e_r=a，则称e_r是A中运算\ast的右单位元\\若存在一元素e\in A，使得对\forall a\in A，\\有e\ast a=a\ast e=a，则称e是A中运算\ast的单位元</script><p>在运算表中的体现可以判断是否为单位元</p><p><hr><br>零元</p><script type="math/tex; mode=display">设\ast是集合A上的二元运算，\\若存在一元素z_l\in A，使得对\forall a\in A，\\有z_l\ast a=z_l，则称z_l是A中运算\ast的左零元\\若存在一元素z_r\in A，使得对\forall a\in A，\\有a\ast z_r=z_r，则称z_r是A中运算\ast的右零元\\若存在一元素z\in A，使得对\forall a\in A，\\有z\ast a=a\ast z=z，则称z是A中运算\ast的零元</script><p><hr><br>幂等元</p><script type="math/tex; mode=display">设\ast是集合A中的二元运算，若a\in A且a\ast a=a,\\则称a是A中关于运算\ast的幂等元</script><p><hr><br>元素的逆元</p><script type="math/tex; mode=display">设*是集合A上具有单位元e的二元运算，对于元素a\in A，\\若存在一元素a_l^{-1}\in A,使得a_l^{-1}\ast a=e,\\则称a关于\ast是左可逆，称a_l^{-1}是a的左逆元\\若存在一元素a_r^{-1}\in A,使得a\ast a_r^{-1}=e,\\则称a关于\ast是右可逆，称a_l^{-1}是a的右逆元\\若存在一元素a^{-1}\in A,使得a^{-1}\ast a=a\ast a^{-1}=e,\\则称a关于\ast是可逆，称a_l^{-1}是a的逆元</script><p><hr><br>定理</p><script type="math/tex; mode=display">设\ast是集合A上具有单位元e且和结合的二元运算，\\若元素a\in A有左逆元a_l^{-1}和右逆元a_r^{-1}\\则a_l^{-1}=a_r^{-1}=a^{-1},且a^{-1}是a唯一的逆元</script><p>定理</p><script type="math/tex; mode=display">设\ast是集合A上的二元运算，且\# A>1\\若运算\ast有单位元e和零元z，则e\neq z</script><h3 id="代数系统-1"><a href="#代数系统-1" class="headerlink" title="代数系统"></a>代数系统</h3><p>定义</p><script type="math/tex; mode=display">一个非空集合S和定义在该集合上的一个或多个运算\circ_1,\circ_2,...,\circ_n所组成的系统\\称为代数系统，表示为<S;\circ_1,\circ_2,...,\circ_n>\\S称为该代数系统的域</script><h4 id="子代数"><a href="#子代数" class="headerlink" title="子代数"></a>子代数</h4><script type="math/tex; mode=display">设<S;\circ_1,\circ_2,\circ_3>是一个代数系统，其中\circ_i(i=1,2,3)均是一元或二元运算\\H是S的一个非空子集，若S上的这三个运算在H上也都是封闭的\\则称<H;\circ_1,\circ_2,\circ_3>是<S;\circ_1,\circ_2,\circ_3>的子代数或子系统</script><h3 id="代数系统的同态和同构"><a href="#代数系统的同态和同构" class="headerlink" title="代数系统的同态和同构"></a>代数系统的同态和同构</h3><h4 id="同态"><a href="#同态" class="headerlink" title="同态"></a>同态</h4><script type="math/tex; mode=display">设V_1=<S;\ast_1,\circ_1,\sim_1>与V_2=<S;\ast_2,\circ_2,\sim_2>是两个代数系统\\h是从S_1到S_2的一个函数，对于\forall x,y\in S_1,有\\h(x\ast_1y)=h(x)\ast_2h(y)\\h(x\circ_1y)=h(x)\circ_2h(y)\\对于\forall x\in S_1,有h(\sim_1(x))=\sim_2(h(x))\\则称h是从代数系统V_1到V2的一个同态</script><p>即先运算后取象等同于先取象后运算</p><p>两集合中对应元素的运算结果仍然对应</p><h4 id="由特殊函数定义的特殊同态"><a href="#由特殊函数定义的特殊同态" class="headerlink" title="由特殊函数定义的特殊同态"></a>由特殊函数定义的特殊同态</h4><script type="math/tex; mode=display">设h:S_1\Rightarrow S_2是代数系统V_1=<S;\ast_1,\circ_1,\sim_1>到V_2=<S;\ast_2,\circ_2,\sim_2>的同态\\如果h是内射，则称h是从V_1到V_2的单一同态\\如果h是满射，则称h是从V_1到V_2的满同态\\如果h是双射，则称h是从V_1到V_2的同构</script><ul><li><strong>单射</strong>：指将不同的变量<a href="http://zh.wikipedia.org/wiki/映射" target="_blank" rel="noopener">映射</a>到不同的值的函数。</li><li><strong>满射</strong>：指<a href="http://zh.wikipedia.org/wiki/陪域" target="_blank" rel="noopener">陪域</a>等于<a href="http://zh.wikipedia.org/wiki/值域" target="_blank" rel="noopener">值域</a>的函数。即：对陪域中任意元素，都存在至少一个定义域中的元素与之对应。</li><li><strong>双射</strong>（也称<strong>一一对应</strong>）：既是<a href="http://zh.wikipedia.org/wiki/单射" target="_blank" rel="noopener">单射</a>又是<a href="http://zh.wikipedia.org/wiki/满射" target="_blank" rel="noopener">满射</a>的函数。直观地说，一个双射函数形成一个对应，并且每一个输入值都有正好一个输出值以及每一个输出值都有正好一个输入值。</li></ul><div class="table-container"><table><thead><tr><th>双射（单射与满射）</th><th>单射但非满射</th><th>满射但非单射</th><th>非满射非单射</th></tr></thead><tbody><tr><td><img src="/2020/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20191103171736396.png" alt="image-20191103171736396"></td><td><img src="/2020/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20191103171755708.png" alt="image-20191103171755708"></td><td><img src="/2020/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20191103171817754.png" alt="image-20191103171817754"></td><td><img src="/2020/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20191103171837067.png" alt="image-20191103171837067"></td></tr></tbody></table></div><p><hr></p><h4 id="满同态的性质"><a href="#满同态的性质" class="headerlink" title="满同态的性质"></a>满同态的性质</h4><script type="math/tex; mode=display">设h是代数系统V_1=<S;\ast_1,\circ_1,\sim_1>到V_2=<S;\ast_2,\circ_2,\sim_2>的一个满同态，则\\若\ast_1(\circ_1)是可交换的，则\ast_2(\circ_2)也是可交换的\\若\ast_1(\circ_1)是可结合的，则\ast_2(\circ_2)也是可结合的\\若\ast_1对\circ_1是可分配的，则\ast_2对\circ_2也是可分配的\\在V_1中若\ast_1(\circ_1)具有单位元e，则V_2中\ast_2(\circ_2)也具有单位元h(e)\\在V_1中若\ast_1(\circ_1)具有零元z，则V_2中\ast_2(\circ_2)也具有零元h(z)\\若对于\ast_1(\circ_1)，S_1元素x具有逆元x^{-1},则对于\ast_2(\circ_2)x的象也具有逆元h(x^{-1})</script><h4 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h4><script type="math/tex; mode=display">设h是代数系统V_1=<S;\ast_1,\circ_1,\sim_1>到V_2=<S;\ast_2,\circ_2,\sim_2>的一个同构，\\那么h是从S_1到S_2的双射，此时h存在逆函数h^{-1}:S_2\Rightarrow S_1</script><p>抽象来看，两个同构的代数系统可以看作同一个代数系统来研究</p><h3 id="代数系统的积代数"><a href="#代数系统的积代数" class="headerlink" title="代数系统的积代数"></a>代数系统的积代数</h3><script type="math/tex; mode=display">设代数系统V_1=<S_1;\ast>和V_2=<S_2;\circ>（都是二元运算）\\V_1和V_2的积代数是一个代数系统V_1\times V_2=<S;\oplus>,\\其中S=S_1\times S_2=\{(x_1,X_2)|x_1\in S_1,x_2\in S_2\}\\\oplus是二元运算，定义为对\forall(x_1,x_2),(y_1,y_2)\in S\\(x_1,x_2)\oplus(y_1,y_2)=(x_1\ast y_1,x_2\circ y_2)</script><h2 id="几种典型的代数系统"><a href="#几种典型的代数系统" class="headerlink" title="几种典型的代数系统"></a>几种典型的代数系统</h2><h3 id="半群和独异点"><a href="#半群和独异点" class="headerlink" title="半群和独异点"></a>半群和独异点</h3><p>半群的定义</p><script type="math/tex; mode=display">设S是一个非空集合，\ast是S上的一个二元运算，\\若\ast是可结合的，则称代数系统<S;\ast>是半群</script><p><hr><br>独异点的定义</p><script type="math/tex; mode=display">若半群<S;\ast>中运算\ast有单位元，则称<S;\ast>为独异点</script><p><hr><br>子半群</p><script type="math/tex; mode=display">设<S;\ast>是一个半群，若<T;\ast>是<S;\ast>的子代数，\\则称<T;\ast>是<S;\ast>的子半群</script><p><hr><br>子独异点</p><script type="math/tex; mode=display">设<S;\ast>是一独异点，若<T;\ast>是<S;\ast>的子代数，且单位元e\in T，\\则称<T;\ast>是<S;\ast>的子独异点</script><h3 id="群的定义"><a href="#群的定义" class="headerlink" title="群的定义"></a>群的定义</h3><p>群的定义</p><script type="math/tex; mode=display">设<G;\ast>是一个代数系统，如果运算\ast是可结合的，存在单位元\\且G中任何元素a都有逆元a^{-1}，则称<G;\ast>是一个群\\结合律：对\forall a,b,c\in G，有a\ast(b\ast c)=(a\ast b)\ast c\\存在单位元\\每个元素都有逆元</script><p><hr><br>循环群</p><p>群中元素的幂</p><script type="math/tex; mode=display">对于任意a\in G\\a^0=e;a^{n+1}=a^n\ast a\\(a^{-1})^0=e,(a^{-1})^{n+1}=(a^{-1})^n\ast a^{-1}\\对于任意整数m和n，依然成立\\a^m\ast a^n=a^{m+n};(a^m)^n=a^{mn}</script><p><hr><br>循环群</p><script type="math/tex; mode=display">在群<G;\ast>中，若存在一元素g\in G,使得每一个元素a\in G都能表示成g^i(i\in I)\\则称群<G;\ast>为循环群，称g为该循环群的生成元，并称群<G;\ast>由g生成</script><p><hr><br>群的阶</p><script type="math/tex; mode=display">设<G;\ast>是一个群，如果G是有限集，则称<G;\ast>是有限群\\G中元素的个数称为群<G;\ast>的阶</script><p><hr><br>元素的周期</p><script type="math/tex; mode=display">设<G;\ast>是一个群，a\in G，若存在正整数r，\\使得a^r=e，则称元素a具有有限周期\\使得a^r=e成立的最小正整数r称为a的周期\\若对于任何正整数r，均有a^r\neq e,\\则称a的周期为无限</script><p><hr><br>定理</p><script type="math/tex; mode=display">设<G;\ast>是一由元素g生成的循环群，则\\若g的周期为n，则<G;\ast>是一个阶为n的有限循环群\\若g的周期为无限，则<G;\ast>是一个无限阶的循环群</script><h3 id="群的性质"><a href="#群的性质" class="headerlink" title="群的性质"></a>群的性质</h3><h4 id="相约性"><a href="#相约性" class="headerlink" title="相约性"></a>相约性</h4><script type="math/tex; mode=display">设<G;\ast>是一个群，则对任意的a,b\in G\\存在唯一的元素x\in G，使得a\ast x=b\\存在唯一的元素y\in G，使得y\ast a=b</script><p><hr></p><script type="math/tex; mode=display">设<G;\ast>是一个群，则对任意的a,b,c\in G\\若a\ast b=a\ast c，则b=c\\若b\ast a=c\ast a，则b=c</script><p><hr></p><h4 id="元素运算后求逆元等于元素分别求逆元后颠倒次序相运算"><a href="#元素运算后求逆元等于元素分别求逆元后颠倒次序相运算" class="headerlink" title="元素运算后求逆元等于元素分别求逆元后颠倒次序相运算"></a>元素运算后求逆元等于元素分别求逆元后颠倒次序相运算</h4><script type="math/tex; mode=display">群中的任意元素(a\ast b)^{-1}=b^{-1}\ast a^{-1}</script><p><hr></p><h4 id="关于元素的周期"><a href="#关于元素的周期" class="headerlink" title="关于元素的周期"></a>关于元素的周期</h4><script type="math/tex; mode=display">群<G;\ast>中的元素a若具有有限后期r，则当且仅当k是r的整数倍时，a^k=e\\群中任一元素与它的逆元具有相同的周期\\在有限群<G;\ast>中，每个元素均具有优先周期，且周期不超过群的阶</script><h3 id="子群及其判别"><a href="#子群及其判别" class="headerlink" title="子群及其判别"></a>子群及其判别</h3><p>子群的定义</p><script type="math/tex; mode=display">设<G;\ast>是一个群，若<H;\ast>是<G;\ast>的子代数，\\单位元e\in H，且对任意的a\in H，有a^{-1}\in H\\则称<H;\ast>是<G\ast>的子群</script><p><img src="/2020/03/16/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/image-20191103183704955.png" alt="image-20191103183704955"></p><p>子群的判别</p><ol><li>封闭性：对于任意 a,b $\in H$,是否有 $a*b\in H$;</li><li>单位元：是否有$e\in H$</li><li>可逆性：对于任意$a\in H$，是否有$a^{-1}\in H$</li></ol><p>定理</p><script type="math/tex; mode=display">设<G;\ast>是一个群，H是G的一个非空子集\\若对于任意a,b\in H，有a\ast b^{-1}\in H，\\则<H;\ast>是<G;\ast>的子群</script><p><hr></p><script type="math/tex; mode=display">设<G;\ast>是一有限群，若<H;\ast>是<G;\ast>的子代数，\\则<H;\ast>是<G;\ast>的子群</script><p><hr></p><script type="math/tex; mode=display">设<G;\ast>是一个群，若<H;\ast>是<G;\ast>的有限子代数，\\则<H;\ast>是<G;\ast>的子群</script><h3 id="子群等价定义"><a href="#子群等价定义" class="headerlink" title="子群等价定义"></a>子群等价定义</h3><script type="math/tex; mode=display">若<H;*>是群<G;*>的子群，则<H;*>自身必然是群\\设<G;*>是一个群，H是G的非空子集，\\若<H;*>也是群，则<H;*>必是<G;*>的子群</script><h3 id="格"><a href="#格" class="headerlink" title="格"></a>格</h3><h4 id="偏序集"><a href="#偏序集" class="headerlink" title="偏序集"></a>偏序集</h4><ul><li>自反</li><li>反对称</li><li>可传递</li></ul><script type="math/tex; mode=display">集合L和定义在L上的偏序关系“\preceq”一起称为偏序集，表示为<L;\preceq>\\<R;\leq>,<I;\leq>,<2^U;\subseteq>,<N;|>\\若\rho是集合A上的偏序关系，则\rho的你关系也必然是A上的偏序关系</script><h4 id="最大下界和最小上界"><a href="#最大下界和最小上界" class="headerlink" title="最大下界和最小上界"></a>最大下界和最小上界</h4><script type="math/tex; mode=display">设l_1和l_2是偏序集<L;\preceq>中的两个元素，元素a\in L\\若满足a\preceq l_1,a\preceq l_2\\则称a是l_1和l_2的下界\\如果a是l_1和l_2的下界，且对于任意a’\in L，\\若a'也是l_1和l_2的下界，便有a’\preceq a\\则称a是l_1和l_2的最大下界，简记a=glb(l_1,l_2)</script><p><hr></p><script type="math/tex; mode=display">设l_1和l_2是偏序集<L;\preceq>中的两个元素，元素b\in L\\若满足l_1\preceq b,l_2\preceq b\\则称b是l_1和l_2的上界\\如果b是l_1和l_2的上界，且对于任意b’\in L，\\若b'也是l_1和l_2的上界，便有b\preceq b’\\则称b是l_1和l_2的最小上界，简记b=lub(l_1,l_2)</script><p><hr><br>定理</p><script type="math/tex; mode=display">设l_1和l_2是偏序集<L;\preceq>的两个元素，如果l_1和l_2 有glb，则glb是唯一的。lub也是</script><p><hr></p><h4 id="最小元素和最大元素"><a href="#最小元素和最大元素" class="headerlink" title="最小元素和最大元素"></a>最小元素和最大元素</h4><script type="math/tex; mode=display">设<L;\preceq>是一个偏序集\\1.如果存在元素a\in L，使得对于所有的元素l\in L，都有a\preceq l,则称a是最小元素（最大元素同理）</script><p><hr><br>定理</p><script type="math/tex; mode=display">如果偏序集<L;\preceq>有最小元素，则最小元素是唯一的，最大元素同理</script><h3 id="格的定义"><a href="#格的定义" class="headerlink" title="格的定义"></a>格的定义</h3><script type="math/tex; mode=display">设<L;\preceq>是一个偏序集，如果L中任意两个元素都存在着最大下界和最小上界，则称它是格</script><h4 id="格的性质"><a href="#格的性质" class="headerlink" title="格的性质"></a>格的性质</h4><script type="math/tex; mode=display">在格<L;\preceq>中，对于任意l_1,l_2\in L以下任一成立，则都成立\\l_1 \vee l_2=l_1\\l_1\wedge l_2=l_2\\l_2\leqslant l_1</script><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;离散数学&quot;&gt;&lt;a href=&quot;#离散数学&quot; class=&quot;headerlink&quot; title=&quot;离散数学&quot;&gt;&lt;/a&gt;离散数学&lt;/h1&gt;&lt;h2 id=&quot;代数系统&quot;&gt;&lt;a href=&quot;#代数系统&quot; class=&quot;headerlink&quot; title=&quot;代数系统&quot;&gt;&lt;/a&gt;代数系统&lt;/h2&gt;&lt;h3 id=&quot;运算&quot;&gt;&lt;a href=&quot;#运算&quot; class=&quot;headerlink&quot; title=&quot;运算&quot;&gt;&lt;/a&gt;运算&lt;/h3&gt;&lt;p&gt;定义 1-1：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
设有非空集合A，函数f:A^n \Rightarrow A称为A上的一个n元运算，n是这个运算的阶&lt;/script&gt;
    
    </summary>
    
    
      <category term="study in school" scheme="http://yoursite.com/categories/study-in-school/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="study in school" scheme="http://yoursite.com/tags/study-in-school/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://yoursite.com/2020/02/27/Promise/"/>
    <id>http://yoursite.com/2020/02/27/Promise/</id>
    <published>2020-02-27T06:00:50.000Z</published>
    <updated>2020-02-27T06:59:58.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="promise-介绍"><a href="#promise-介绍" class="headerlink" title="promise 介绍"></a>promise 介绍</h2><p>JavaScript 异步处理，很多可以利用回调函数</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数异步处理</span></span><br><span class="line">http.get(<span class="string">'/v1/get'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'错误时的处理'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功时的处理'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code>把类似的异步处理对象和处理规则进行规范化，并按照采用统一的接口来编写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = http.get(<span class="string">'/vi/get'</span>);</span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//待处理的异步逻辑</span></span><br><span class="line">  <span class="comment">//处理结束后，调用resolve或reject方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方法，<code>new</code>一个<code>Promise</code>对象，<code>Promise</code>本质上就是一个函数，接受一个函数作为参数，并且会返回<code>Promise</code>对象，给链式调用提供了基础</p><p><code>Promise</code>函数就是构建出它的实例，并且负责管理这些实例，这些实例具有三种状态</p><ol><li>pending：初始状态，未履行或拒绝</li><li>fulfilled：操作成功完成</li><li>rejected：操作失败</li></ol><p><code>pending</code>状态的<code>Promise</code>对象可能以<code>fulfilled</code>状态返回了一个值，也可能被某种异常 reject</p><p>当其中任一种情况出现时，<code>Promise</code>对象的<code>then</code>方法绑定的处理方法（handlers）就会被调用，</p><p><code>then</code>方法分别制定了<code>resolve</code>方法和<code>reject</code>方法的回调函数</p><p><img src="https://mengera88.github.io/images/promises.png" alt="alt promise图解"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="comment">/*异步操作成功*/</span>)&#123;</span><br><span class="line">  resolve(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//如果调用了resolve方法，执行此函数</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//如果调用了reject方法，执行此函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">'GET'</span>, url);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = <span class="string">'json'</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">'/posts.json'</span>).then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Contents:'</span> + json);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>resolve</code>方法和<code>reject</code>方法调用时，都带有参数。参数会被传递给回调函数。</p><p><code>reject</code>方法的参数是 Error 对象的实例。</p><p><code>resolve</code>方法的参数除了正常值以外，还可能是另一个 Promise 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...some code</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...some code</span></span><br><span class="line">  resolve(p1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>p1 和 p2 都是 Promise 实例，p2 的<code>resolve</code>方法将 p1 作为参数，此时 p1 的状态就会传递给 p2。</p><p>如果调用时，p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变</p><p>如果 p1 的状态已经是 fulfilled 或者 rejected，那么 p2 的回调函数就会立刻执行</p><h3 id="Promise-的链式操作"><a href="#Promise-的链式操作" class="headerlink" title="Promise 的链式操作"></a>Promise 的链式操作</h3><p><code>Promise.prototype.then</code>方法返回的是一个新的<code>Promise</code>对象，因此可以采用链式写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">'/data.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> json.name;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//proceed</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><code>then</code>方法，依次指定了两个回调函数，第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数</p><p>如果前一个回调函数返回的是<code>Promise</code>对象，后一个回调函数就会等待该<code>Promise</code>对象有了运行结果，才会进一步调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">'/data/get.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getJSON(post.jobURL);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">jobs</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对jobs进行处理</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-捕获错误"><a href="#Promise-捕获错误" class="headerlink" title="Promise 捕获错误"></a>Promise 捕获错误</h3><p><code>Promise.prototype.catch</code>方法是<code>Promise.prototype.then(null,rejection)</code>的别名，用于指定发生错误时的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">'/data.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//处理前一个回调函数运行时发生的错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止。</p><p>错误总是会被下一个 catch 语句捕获</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getJSON(<span class="string">'/data.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> json.name;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//proceed</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//处理前面任一个then函数抛出的错误</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="其他常用的Promise方法"><a href="#其他常用的Promise方法" class="headerlink" title="其他常用的Promise方法"></a>其他常用的<code>Promise</code>方法</h2><h3 id="Promise-all方法，Promise-race方法"><a href="#Promise-all方法，Promise-race方法" class="headerlink" title="Promise.all方法，Promise.race方法"></a><code>Promise.all</code>方法，<code>Promise.race</code>方法</h3><p><code>Promise.all</code>方法用于将多个 Promise 实例，包装成一个新的<code>Promise</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例</p><p>参数不一定是数组，但是必须具有<code>iterator</code>接口，且返回的每个成员都是 Promise 实例</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况</p><ol><li>只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数</li><li>只要 p1，p2，p3 之中由一个被 rejected，p 的状态就会变成 rejected，此时第一个被 rejected 的实例的返回值，会传递给 p 的回调函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promises = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(<span class="string">'/get/addr'</span>+id+<span class="string">'.json'</span>)<span class="string">''</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-race方法"><a href="#Promise-race方法" class="headerlink" title="Promise.race方法"></a><code>Promise.race</code>方法</h3><p>同样是多个 Promise 实例，包装成一个新的 Promise 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就随之改变，那个率先改变的 Promise 实例的返回值，就传递给 p 的返回值</p><p>如果<code>Promise.all</code>方法和<code>Promise.race</code>方法的参数，不是 Promise 实例，就会先调用<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理</p><h2 id="Promise-resolve方法，Promise-reject方法"><a href="#Promise-resolve方法，Promise-reject方法" class="headerlink" title="Promise.resolve方法，Promise.reject方法"></a><code>Promise.resolve</code>方法，<code>Promise.reject</code>方法</h2><p><code>Promise.resolve</code>方法将现有的对象转为 Promise 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsPromise = <span class="built_in">Promise</span>.resolve($.ajax(<span class="string">'/whatever.json'</span>));</span><br></pre></td></tr></table></figure><p>将 jQuery 生成 deferred 对象，转为一个新的 ES6 的 Promise 对象</p><p>如果<code>Promise.resolve</code>方法的参数，不是具有 then 方法的对象（又称 thenable 对象）</p><p>则返回一个新的 Promise 对象，且它的状态为 fulfilled</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//Hello</span></span><br></pre></td></tr></table></figure><p>生成一个新的 Promise 对象的实例 p，它的状态为 fulfilled，所以回调函数会立即执行，Promise.resolve 方法的参数就是回调函数的参数</p><p>如果 Promise.resolve 方法的参数是一个 Promise 对象的实例，则会被原封不动的返回</p><p><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为 rejected</p><p>Promise.reject 方法的参数 reason，会被传递给实例的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.reject(<span class="string">'出错啦'</span>);</span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><p>生成一个 Promise 对象的实例 p，状态为 rejected，回调函数会立即执行</p><h2 id="手写Promise"><a href="#手写Promise" class="headerlink" title="手写Promise"></a>手写<code>Promise</code></h2><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">'resolved'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  _this.state = PENDING;</span><br><span class="line">  _this.value = <span class="literal">null</span>;</span><br><span class="line">  _this.resolvedCallbacks = [];</span><br><span class="line">  _this.rejectedCallbacks = [];</span><br><span class="line">  <span class="comment">//待完善的resolve和reject函数</span></span><br><span class="line">  <span class="comment">//待完善执行fn函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义三个常量表示状态</li><li>在函数体内部创建常量<code>_this</code>，因为代码可能异步执行，用于获取正确的<code>this</code>对象</li><li><code>Promise</code>初始状态为<code>pending</code></li><li><code>value</code>变量用于保存<code>resolve</code>或者<code>reject</code>中传入的值</li><li><code>resolvedCallbacks</code>和<code>rejectedCallbacks</code>用于保存<code>then</code>中的回调，因为当执行完<code>Promise</code>时状态可能还在等待中，这时应该把<code>then</code>中的回调保存起来用于状态改变时使用</li></ol><h3 id="完善resolve和reject函数"><a href="#完善resolve和reject函数" class="headerlink" title="完善resolve和reject函数"></a>完善<code>resolve</code>和<code>reject</code>函数</h3><p>添加至函数体内部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (_this.state === PENDING) &#123;</span><br><span class="line">    _this.state = RESOLVED;</span><br><span class="line">    _this.value = value;</span><br><span class="line">    _this.resolvedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(_this.value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (that.state === PENDING) &#123;</span><br><span class="line">    that.state = REJECTED;</span><br><span class="line">    that.value = value;</span><br><span class="line">    that.rejectedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> cb(that.value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断状态，然后改变状态</li><li>将当前状态更改为对应状态，并将转入的值赋值给<code>value</code></li><li>遍历回调数组并执行</li></ol><h3 id="实现执行-Promise-中传入的函数"><a href="#实现执行-Promise-中传入的函数" class="headerlink" title="实现执行 Promise 中传入的函数"></a>实现执行 Promise 中传入的函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fn(resolve, reject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  reject(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行传入的参数并且将之前两个函数当作参数传入</li><li>可能执行函数过程中会遇到错误，需要捕获错误并且执行<code>reject</code>函数</li></ul><h3 id="实现then函数"><a href="#实现then函数" class="headerlink" title="实现then函数"></a>实现<code>then</code>函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">  onRejected =</span><br><span class="line">    <span class="keyword">typeof</span> onRejectde === <span class="string">'function'</span></span><br><span class="line">      ? onRejected</span><br><span class="line">      : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> r;</span><br><span class="line">        &#125;;</span><br><span class="line">  <span class="keyword">if</span> (_this.state === PENDING) &#123;</span><br><span class="line">    _this.resolvedCallbacks.push(onFulfilled);</span><br><span class="line">    _this.rejectedCallbacks.push(onRejected);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (_this.state === RESOLVED) &#123;</span><br><span class="line">    onFulfilled(_this.value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (_this.state === REJECTED) &#123;</span><br><span class="line">    onRejected(_this.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>判断两个参数是否为函数类型，这两个参数为可选参数</li><li>当参数不是函数类型时，创建函数传参</li><li>判断状态，不是 pending 态就立即执行，否则 push</li></ul><p>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;h2 id=&quot;promise-介绍&quot;&gt;&lt;a href=&quot;#promise-介绍&quot; class=&quot;headerlink&quot; title=&quot;promise 介绍&quot;&gt;&lt;/a&gt;promise 介绍&lt;/h2&gt;&lt;p&gt;JavaScript 异步处理，很多可以利用回调函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>React H5开发有感</title>
    <link href="http://yoursite.com/2020/02/27/React-H5%E5%BC%80%E5%8F%91%E6%9C%89%E6%84%9F/"/>
    <id>http://yoursite.com/2020/02/27/React-H5%E5%BC%80%E5%8F%91%E6%9C%89%E6%84%9F/</id>
    <published>2020-02-27T06:00:50.000Z</published>
    <updated>2020-02-27T07:16:35.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-H5-开发有感"><a href="#React-H5-开发有感" class="headerlink" title="React H5 开发有感"></a>React H5 开发有感</h1><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="官方脚手架"><a href="#官方脚手架" class="headerlink" title="官方脚手架"></a>官方脚手架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><a id="more"></a><p>这里可能存在 npm 缓存问题，清除缓存<code>npm clean cache --force</code></p><h3 id="路由处理"><a href="#路由处理" class="headerlink" title="路由处理"></a>路由处理</h3><h4 id="在-Page-文件夹导出所有页面"><a href="#在-Page-文件夹导出所有页面" class="headerlink" title="在 Page 文件夹导出所有页面"></a>在 Page 文件夹导出所有页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> One <span class="keyword">from</span> <span class="string">'./1/one'</span>;</span><br><span class="line"><span class="keyword">import</span> Two <span class="keyword">from</span> <span class="string">'./2/two'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; One, Two &#125;;</span><br></pre></td></tr></table></figure><h4 id="创建路由配置文件"><a href="#创建路由配置文件" class="headerlink" title="创建路由配置文件"></a>创建路由配置文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  One,</span><br><span class="line">  Two</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./pages/index'</span>‘</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RouterConfig = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/one'</span>,</span><br><span class="line">    component: One,</span><br><span class="line">    sceneConfig: &#123;</span><br><span class="line">      enter: <span class="string">'from-left'</span>,</span><br><span class="line">      exit: <span class="string">'to-right'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/two'</span>,</span><br><span class="line">    component: Two,</span><br><span class="line">    sceneConfig: &#123;</span><br><span class="line">      enter: <span class="string">'from-left'</span>,</span><br><span class="line">      exit: <span class="string">'to-right'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="引入路由配置（具有动画的配置）"><a href="#引入路由配置（具有动画的配置）" class="headerlink" title="引入路由配置（具有动画的配置）"></a>引入路由配置（具有动画的配置）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; RouterConfig &#125; from &#39;.&#x2F;RouteConfig&#39;; &#x2F;&#x2F;引入路由配置</span><br><span class="line">import &#39;.&#x2F;app.scss&#39;;</span><br><span class="line">import &#123; Route, Switch, HashRouter, withRouter &#125; from &#39;react-router-dom&#39;;</span><br><span class="line">import &#39;.&#x2F;index.css&#39;;</span><br><span class="line">import &#123; CSSTransition, TransitionGroup &#125; from &#39;react-transition-group&#39;;</span><br><span class="line"></span><br><span class="line">const DEFAULT_SCENE_CONFIG &#x3D; &#123;</span><br><span class="line">  enter: &#39;from-right&#39;,</span><br><span class="line">  exit: &#39;to-exit&#39;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const getSceneConfig &#x3D; location &#x3D;&gt; &#123;</span><br><span class="line">  const matchedRoute &#x3D; RouterConfig.find(config &#x3D;&gt;</span><br><span class="line">    new RegExp(&#96;^$&#123;config.path&#125;$&#96;).test(location.pathname)</span><br><span class="line">  );</span><br><span class="line">  return (matchedRoute &amp;&amp; matchedRoute.sceneConfig) || DEFAULT_SCENE_CONFIG;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let oldLocation &#x3D; null;</span><br><span class="line">const Routes &#x3D; withRouter((&#123; location, history &#125;) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; 转场动画应该都是采用当前页面的sceneConfig，所以：</span><br><span class="line">  &#x2F;&#x2F; push操作时，用新location匹配的路由sceneConfig</span><br><span class="line">  &#x2F;&#x2F; pop操作时，用旧location匹配的路由sceneConfig</span><br><span class="line">  let classNames &#x3D; &#39;&#39;;</span><br><span class="line">  if (history.action &#x3D;&#x3D;&#x3D; &#39;PUSH&#39;) &#123;</span><br><span class="line">    classNames &#x3D; &#39;forward-&#39; + getSceneConfig(location).enter;</span><br><span class="line">  &#125; else if (history.action &#x3D;&#x3D;&#x3D; &#39;POP&#39; &amp;&amp; oldLocation) &#123;</span><br><span class="line">    classNames &#x3D; &#39;back-&#39; + getSceneConfig(oldLocation).exit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 更新旧location</span><br><span class="line">  oldLocation &#x3D; location;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;TransitionGroup</span><br><span class="line">      className&#x3D;&#123;&#39;router-wrapper&#39;&#125;</span><br><span class="line">      childFactory&#x3D;&#123;child &#x3D;&gt; React.cloneElement(child, &#123; classNames &#125;)&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;CSSTransition timeout&#x3D;&#123;800&#125; key&#x3D;&#123;location.pathname&#125;&gt;</span><br><span class="line">        &lt;Switch location&#x3D;&#123;location&#125;&gt;</span><br><span class="line">          &#123;RouterConfig.map((config, index) &#x3D;&gt; (</span><br><span class="line">            &lt;Route exact key&#x3D;&#123;index&#125; &#123;...config&#125; &#x2F;&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;&#x2F;Switch&gt;</span><br><span class="line">      &lt;&#x2F;CSSTransition&gt;</span><br><span class="line">    &lt;&#x2F;TransitionGroup&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default class App extend React.PureComponent &#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return</span><br><span class="line">    &lt;HashRouter&gt;</span><br><span class="line">    &lt;Routes &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;HashRouter&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line">import &#39;.&#x2F;index.css&#39;;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render( &lt; App &#x2F; &gt; , document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure><p>现在存在的问题，依然使用了老旧的版本<code>class</code>来构建组件，且组件分离不明显。</p><h3 id="长按Button封装"><a href="#长按Button封装" class="headerlink" title="长按Button封装"></a>长按Button封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">class MyButton extends React.Component &#123;</span><br><span class="line">  onTouchStart(callback, time) &#123;</span><br><span class="line">    this.timeOutEvent &#x3D; setInterval(function() &#123;</span><br><span class="line">      this.timeOutEvent &#x3D; 0;</span><br><span class="line">      callback();</span><br><span class="line">      console.log(&#39;你长按了&#39;);</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;</span><br><span class="line">  onTouchMove() &#123;</span><br><span class="line">    clearInterval(this.timeOutEvent);</span><br><span class="line">    this.timeOutEvent &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  onTouchEnd() &#123;</span><br><span class="line">    clearInterval(this.timeOutEvent);</span><br><span class="line">    if (this.timeOutEvent !&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(this.timeOutEvent);</span><br><span class="line">    this.timeOutEvent &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; callback, time &#125; &#x3D; this.props;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div</span><br><span class="line">        className&#x3D;&quot;start&quot;</span><br><span class="line">        onTouchStart&#x3D;&#123;this.onTouchStart.bind(this, callback, time)&#125;</span><br><span class="line">        onTouchEnd&#x3D;&#123;this.onTouchEnd.bind(this)&#125;</span><br><span class="line">      &gt;&lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default MyButton;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;调用</span><br><span class="line">&lt;MyButton</span><br><span class="line">time&#x3D;&#123;time&#125;</span><br><span class="line">callback&#x3D;&#123;this.handleAnimation.bind(this)&#125;</span><br><span class="line">&gt;&lt;&#x2F;MyButton&gt;</span><br></pre></td></tr></table></figure><h2 id="动画——react-transition-group"><a href="#动画——react-transition-group" class="headerlink" title="动画——react-transition-group"></a>动画——<code>react-transition-group</code></h2><p><a href="https://reactcommunity.org/react-transition-group/" target="_blank" rel="noopener">官方文档</a></p><p>安装<code>npm install react-transition-group --save</code></p><h3 id="CSSTransition"><a href="#CSSTransition" class="headerlink" title="CSSTransition"></a>CSSTransition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; TransitionGroup, CSSTransition &#125; from &#39;react-transition-group&#39;;&#x2F;&#x2F;引入</span><br><span class="line"></span><br><span class="line">class Animition extends React.Component&#123;</span><br><span class="line">  this.state&#x3D;&#123;</span><br><span class="line">    show:false</span><br><span class="line">  &#125;</span><br><span class="line">render()&#123;</span><br><span class="line">    return (</span><br><span class="line">    &lt;CSSTransition</span><br><span class="line">          in&#x3D;&#123;show&#125; &#x2F;&#x2F;是否显示</span><br><span class="line">          timeout&#x3D;&#123;500&#125; &#x2F;&#x2F;延时时间，可以是个对象enter、exit</span><br><span class="line">          classNames&#x3D;&quot;idea&quot; &#x2F;&#x2F;类名开头</span><br><span class="line">          unmountOnExit &#x2F;&#x2F;默认卸载离开</span><br><span class="line">          key&#x3D;&quot;idea&quot; &#x2F;&#x2F;key</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;idea&quot; &#x2F;&gt; &#123;&#x2F;*只能包裹一个整体元素*&#x2F;&#125;</span><br><span class="line">        &lt;&#x2F;CSSTransition&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*css文件*/</span></span><br><span class="line"><span class="selector-class">.idea-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.01</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">40vw</span>, <span class="number">50vw</span>) <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.idea-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50vw</span>, <span class="number">40vw</span>) <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">500ms</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.idea-enter-done</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">60vw</span>, <span class="number">30vw</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">500ms</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.idea-exit</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">60vw</span>, <span class="number">30vw</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.idea-exit-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100vw</span>, <span class="number">30vw</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">500ms</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.idea-exit-done</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TransitionGroup"><a href="#TransitionGroup" class="headerlink" title="TransitionGroup"></a>TransitionGroup</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#123; TransitionGroup, CSSTransition &#125; from &#39;react-transition-group&#39;;&#x2F;&#x2F;引入</span><br><span class="line"></span><br><span class="line">class Animition extends React.Component&#123;</span><br><span class="line">  this.state&#x3D;&#123;</span><br><span class="line">    texts: [&#39;“闲置品交易”&#39;, &#39;“高效收作业”&#39;, &#39;“校园需求”&#39;, &#39;“公选课选课指南”&#39;],</span><br><span class="line">    show:false</span><br><span class="line">  &#125;</span><br><span class="line">render()&#123;</span><br><span class="line">     const texts &#x3D; showText.map((item, index) &#x3D;&gt; &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;CSSTransition</span><br><span class="line">          in&#x3D;&#123;true&#125;</span><br><span class="line">          timeout&#x3D;&#123;500&#125;</span><br><span class="line">          classNames&#x3D;&#123;&#39;show&#39; + index&#125;</span><br><span class="line">          key&#x3D;&#123;index&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;thoughts&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;item&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;CSSTransition&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    return (</span><br><span class="line">    &lt;TransitionGroup&gt;&#123;texts&#125;&lt;&#x2F;TransitionGroup&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">0</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.show</span>#&#123;<span class="variable">$i</span>&#125;-enter &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.01</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">20vw</span>, <span class="number">60vw</span>) scale(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.show</span>#&#123;<span class="variable">$i</span>&#125;-enter-active &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">500ms</span> linear;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.show</span>#&#123;<span class="variable">$i</span>&#125;-enter-done &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">500ms</span> linear;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.show</span>#&#123;<span class="variable">$i</span>&#125;-exit-active &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">500ms</span> ease-in;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.show</span>#&#123;<span class="variable">$i</span>&#125;-exit-done &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show0-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(<span class="number">30vw</span>, <span class="number">35vw</span>) scale(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show0-enter-done</span>,</span><br><span class="line"><span class="selector-class">.show0-exit</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(<span class="number">40vw</span>, <span class="number">10vw</span>) scale(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show1-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(<span class="number">10vw</span>, <span class="number">39vw</span>) scale(<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show1-enter-done</span>,</span><br><span class="line"><span class="selector-class">.show1-exit</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(<span class="number">0vw</span>, <span class="number">18vw</span>) scale(<span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show2-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(<span class="number">8vw</span>, <span class="number">31vw</span>) scale(<span class="number">0.45</span>, <span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show2-enter-done</span>,</span><br><span class="line"><span class="selector-class">.show2-exit</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(-<span class="number">4vw</span>, <span class="number">2vw</span>) scale(<span class="number">0.9</span>, <span class="number">0.8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show3-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(<span class="number">29vw</span>, <span class="number">42vw</span>) scale(<span class="number">0.45</span>, <span class="number">0.35</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.show3-enter-done</span>,</span><br><span class="line"><span class="selector-class">.show3-exit</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: translate(<span class="number">38vw</span>, <span class="number">24vw</span>) scale(<span class="number">0.8</span>, <span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个完整的动画-demo"><a href="#一个完整的动画-demo" class="headerlink" title="一个完整的动画 demo"></a>一个完整的动画 demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import &#39;.&#x2F;one.scss&#39;;</span><br><span class="line">import &#123; TransitionGroup, CSSTransition &#125; from &#39;react-transition-group&#39;;</span><br><span class="line">import stop from &#39;..&#x2F;..&#x2F;assets&#x2F;imgs&#x2F;stop.png&#39;;</span><br><span class="line">import cont from &#39;..&#x2F;..&#x2F;assets&#x2F;imgs&#x2F;cont.png&#39;;</span><br><span class="line"></span><br><span class="line">let cancel1, cancel2, time;</span><br><span class="line"></span><br><span class="line">class One extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      bao: 0,</span><br><span class="line">      start: false,</span><br><span class="line">      show: false,</span><br><span class="line">      tishi: false,</span><br><span class="line">      btn: false,</span><br><span class="line">      texts: [&#39;“闲置品交易”&#39;, &#39;“高效收作业”&#39;, &#39;“校园需求”&#39;, &#39;“公选课选课指南”&#39;],</span><br><span class="line">      showText: [],</span><br><span class="line">      h1: null,</span><br><span class="line">      h2: null,</span><br><span class="line">      hs1: true,</span><br><span class="line">      hs2: true,</span><br><span class="line">      t: 0</span><br><span class="line">    &#125;;</span><br><span class="line">    this.handlePause &#x3D; this.handlePause.bind(this);</span><br><span class="line">    this.handleStart &#x3D; this.handleStart.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123; &#x2F;&#x2F;挂载后，进行异步执行操作</span><br><span class="line">    let &#123; showText, texts &#125; &#x3D; this.state;</span><br><span class="line">    time &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">      let &#123; t &#125; &#x3D; this.state; &#x2F;&#x2F;记录时间，因为有一个不暂停的动画持续进行，以免在t之前的取消又进行别的动画</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        t: t + 1</span><br><span class="line">      &#125;);</span><br><span class="line">      console.log(this.state.t);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">    cancel1 &#x3D; setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">      if (texts.length &gt; 0) &#123;</span><br><span class="line">        let text &#x3D; texts.pop();</span><br><span class="line">        showText.push(text);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">          texts: texts,</span><br><span class="line">          showText: showText</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">    cancel2 &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        showText: [],</span><br><span class="line">        tishi: true,</span><br><span class="line">        btn: true</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, 6000);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      h1: setTimeout(this.handle1, 8000),&#x2F;&#x2F;设定动画函数</span><br><span class="line">      h2: setTimeout(this.handle2, 10000)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle1 &#x3D; () &#x3D;&gt; &#123;&#x2F;&#x2F;动画函数修改参数，以及hs记录动画状态</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      show: true,</span><br><span class="line">      tishi: false,</span><br><span class="line">      hs1: false</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handle2 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      show: false,</span><br><span class="line">      hs2: false</span><br><span class="line">    &#125;);</span><br><span class="line">    this.props.history.push(&#39;two&#39;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handlePause() &#123;&#x2F;&#x2F;暂停函数，简单粗暴取消所有，并修改暂停按钮状态</span><br><span class="line">    clearTimeout(this.state.h1);</span><br><span class="line">    clearTimeout(this.state.h2);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      start: true</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleStart() &#123;</span><br><span class="line">    const &#123; hs1, hs2, t &#125; &#x3D; this.state;</span><br><span class="line">    if (t &gt; 4) &#123;</span><br><span class="line">      if (hs1) &#123; &#x2F;&#x2F;监听动画执行的状态，重新设置动画函数</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">          h1: setTimeout(this.handle1, 1000),</span><br><span class="line">          h2: setTimeout(this.handle2, 3000)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else if (hs2) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">          h2: setTimeout(this.handle2, 2000)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      start: false</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123; &#x2F;&#x2F;卸载前取消所有定时器</span><br><span class="line">    clearInterval(time);</span><br><span class="line">    clearInterval(cancel1);</span><br><span class="line">    clearTimeout(cancel2);</span><br><span class="line">    clearTimeout(this.state.h1);</span><br><span class="line">    clearTimeout(this.state.h2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; showText, show, start, bao &#125; &#x3D; this.state;</span><br><span class="line">    const texts &#x3D; showText.map((item, index) &#x3D;&gt; &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;CSSTransition</span><br><span class="line">          in&#x3D;&#123;true&#125;</span><br><span class="line">          timeout&#x3D;&#123;500&#125;</span><br><span class="line">          classNames&#x3D;&#123;&#39;show&#39; + index&#125;</span><br><span class="line">          key&#x3D;&#123;index&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;thoughts&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;item&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;CSSTransition&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">      &lt;div className&#x3D;&quot;bg1&quot;&gt;</span><br><span class="line">        &lt;TransitionGroup&gt;&#123;texts&#125;&lt;&#x2F;TransitionGroup&gt;</span><br><span class="line">        &lt;CSSTransition</span><br><span class="line">          in&#x3D;&#123;show&#125;</span><br><span class="line">          timeout&#x3D;&#123;500&#125;</span><br><span class="line">          classNames&#x3D;&quot;idea&quot;</span><br><span class="line">          unmountOnExit</span><br><span class="line">          key&#x3D;&quot;idea&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div className&#x3D;&quot;idea&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;CSSTransition&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div</span><br><span class="line">          onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">            if (start) &#123;</span><br><span class="line">              this.handleStart();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.handlePause();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            window._czc.push([&#39;_trackEvent&#39;, &#39;1&#39;, &#39;点击&#39;, &#39;暂停&#39;, &#39;1&#39;]);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          className&#x3D;&quot;start&quot;</span><br><span class="line">          style&#x3D;&#123;</span><br><span class="line">            start</span><br><span class="line">              ? &#123;</span><br><span class="line">                  backgroundImage: &#39;url(&#39; + cont + &#39;)&#39;,</span><br><span class="line">                  backgroundPositionX: &#39;60%&#39;</span><br><span class="line">                &#125;</span><br><span class="line">              : &#123; backgroundImage: &#39;url(&#39; + stop + &#39;)&#39; &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div</span><br><span class="line">          className&#x3D;&quot;next&quot;</span><br><span class="line">          onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">            this.props.history.push(&#39;two&#39;);</span><br><span class="line">            window._czc.push([&#39;_trackEvent&#39;, &#39;1&#39;, &#39;点击&#39;, &#39;下一页&#39;, &#39;1&#39;]);</span><br><span class="line">          &#125;&#125;</span><br><span class="line">          style&#x3D;&#123;&#123; animation: &#39;next 1s linear infinite&#39; &#125;&#125;</span><br><span class="line">        &#x2F;&gt;</span><br><span class="line">        &lt;a</span><br><span class="line">          className&#x3D;&quot;nsignin&quot;</span><br><span class="line">          href&#x3D;&quot;#&quot;</span><br><span class="line">          onClick&#x3D;&#123;() &#x3D;&gt;</span><br><span class="line">            window._czc.push([&#39;_trackEvent&#39;, &#39;1&#39;, &#39;点击&#39;, &#39;直接报名&#39;, &#39;1&#39;])</span><br><span class="line">          &#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div&gt;直接报名&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default One;</span><br></pre></td></tr></table></figure><h2 id="字蛛"><a href="#字蛛" class="headerlink" title="字蛛"></a>字蛛</h2><p>原理，引入字体文件，爬取显示出的字，生成小的字体文件，引入即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- font.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="comment">/*声明 WebFont*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line">        font-family: 'hanyi';</span><br><span class="line">        src: url('./assets/font/hanyan.ttf');</span><br><span class="line">        src: url('./assets/font/hanyan?#font-spider') format('embedded-opentype'),</span><br><span class="line">          url('./assets/font/hanyan.woff') format('woff'),</span><br><span class="line">          url('./assets/font/hanyan.ttf') format('truetype'), url('./assets/font/hanyan.svg')</span><br><span class="line">            format('svg');</span><br><span class="line">        font-weight: normal;</span><br><span class="line">        font-style: normal;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="comment">/*使用选择器指定字体*/</span></span></span><br><span class="line"></span><br><span class="line">      * &#123;</span><br><span class="line">        font-family: 'hanyi';</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>“闲置品交易”, “高效收作业”, “校园需求”, “公选课选课指南”<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行命令<code>npx font-spider font.html</code></p><h3 id="引入执行后的文件"><a href="#引入执行后的文件" class="headerlink" title="引入执行后的文件"></a>引入执行后的文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'hanyi'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'./assets/font/hanyan.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">'./assets/font/hanyan.ttf'</span>)</span><br><span class="line">      <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="built_in">url</span>(<span class="string">'./assets/font/hanyan.svg'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="埋点——友盟"><a href="#埋点——友盟" class="headerlink" title="埋点——友盟"></a>埋点——友盟</h2><p><a href="https://workbench.umeng.com/home" target="_blank" rel="noopener">友盟站点</a></p><h3 id="监听网页"><a href="#监听网页" class="headerlink" title="监听网页"></a>监听网页</h3><p><img src="/2020/02/27/React-H5%E5%BC%80%E5%8F%91%E6%9C%89%E6%84%9F/zhandian.png" alt="image-20200227143037246"></p><h3 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h3><p><img src="/2020/02/27/React-H5%E5%BC%80%E5%8F%91%E6%9C%89%E6%84%9F/tianjia.png" alt="tianjia"></p><h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><p><img src="/2020/02/27/React-H5%E5%BC%80%E5%8F%91%E6%9C%89%E6%84%9F/shengcheng.png" alt="image-20200227143408049"></p><p>在 index.html 中引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"复制引入"</span>)), <span class="built_in">document</span>.getElementById(<span class="string">"引入"</span>).style.display = <span class="string">"none"</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _czc = <span class="built_in">window</span>._czc || [];</span></span><br><span class="line"><span class="actionscript">    _czc.push([<span class="string">"_setAccount"</span>, <span class="string">"查询号码"</span>])<span class="comment">//创建全局变量</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引入使用</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> window._czc.push(['_trackEvent', '1', '点击', '直接报名', '1']) &#125;</span><br><span class="line">   &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="微信——JDK"><a href="#微信——JDK" class="headerlink" title="微信——JDK"></a>微信——JDK</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; location &#125; = <span class="built_in">window</span>;</span><br><span class="line"><span class="keyword">const</span> shareLink = location.toString();</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">encodeURIComponent</span>(shareLink);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信分享接口 在微信安卓版上表现正常 在IOS上无法正常分享</span></span><br><span class="line"><span class="comment"> * 原因： 安卓端浏览器自动对shareLink进行了encodeURIComponent</span></span><br><span class="line"><span class="comment"> *        IOS端默认不进行此操作 且IOS端会莫名其妙在地址后面加一些键值对</span></span><br><span class="line"><span class="comment"> *        那里面的 &amp; 符号 是需要转义的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> appId = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">const</span> wxAPI = <span class="string">'by接口'</span>;</span><br><span class="line"><span class="keyword">const</span> jsApiList = [</span><br><span class="line">  <span class="string">'onMenuShareAppMessage'</span>,</span><br><span class="line">  <span class="string">'onMenuShareTimeline'</span>,</span><br><span class="line">  <span class="string">'onMenuShareQQ'</span>,</span><br><span class="line">  <span class="string">'onMenuShareWeibo'</span>,</span><br><span class="line">  <span class="string">'onMenuShareQZone'</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">shareConfig</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>shareConfig.title</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>shareConfig.desc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>shareConfig.link</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>shareConfig.desc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;function&#125;</span> </span>shareConfig.success</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;function&#125;</span> </span>shareConfig.cancel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">share</span>(<span class="params">shareConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> staticShareConfig = &#123;</span><br><span class="line">    title: <span class="string">''</span>,</span><br><span class="line">    desc: <span class="string">''</span>,</span><br><span class="line">    link: <span class="string">''</span>,</span><br><span class="line">    imgUrl: <span class="string">''</span>,</span><br><span class="line">    success() &#123;&#125;,</span><br><span class="line">    cancle() &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> conf = <span class="built_in">Object</span>.assign(staticShareConfig, shareConfig);</span><br><span class="line">  <span class="keyword">return</span> fetch(<span class="string">`<span class="subst">$&#123;wxAPI&#125;</span>?url=<span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> config = &#123;</span><br><span class="line">        debug: <span class="literal">false</span>,</span><br><span class="line">        appId: data.appId || data.appid || appId,</span><br><span class="line">        timestamp: data.timestamp,</span><br><span class="line">        nonceStr: data.nonce_str || data.noncestr,</span><br><span class="line">        signature: data.signature,</span><br><span class="line">        jsApiList: [...jsApiList],</span><br><span class="line">        success() &#123;&#125;,</span><br><span class="line">        cancel() &#123;&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      wx.config(config);</span><br><span class="line">      wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        jsApiList.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (item === <span class="string">'onMenuShareTimeline'</span>) &#123;</span><br><span class="line">            wx.onMenuShareTimeline(conf);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> wxApi = wx[item];</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> wxApi === <span class="string">'function'</span>) &#123;</span><br><span class="line">            wxApi(conf);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">`<span class="subst">$&#123;item&#125;</span> api not exist!!!`</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预加载——Preload"><a href="#预加载——Preload" class="headerlink" title="预加载——Preload"></a>预加载——Preload</h2><h3 id="preloadle"><a href="#preloadle" class="headerlink" title="preloadle"></a><code>preloadle</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import Loadable from &#39;react-loadable&#39;;</span><br><span class="line">import Loader from &#39;.&#x2F;pages&#x2F;load&#x2F;loader&#39;;</span><br><span class="line"></span><br><span class="line">const LoadableMyApp &#x3D; Loadable(&#123;</span><br><span class="line">  loader: () &#x3D;&gt; import(&#39;.&#x2F;App&#39;),</span><br><span class="line">  loading() &#123;</span><br><span class="line">    console.log(&#39;loading&#39;);</span><br><span class="line">    return &lt;Loader &#x2F;&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default class MyApp extends React.Component &#123;</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    LoadableMyApp.preload();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;LoadableMyApp &#x2F;&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预加载图片资源"><a href="#预加载图片资源" class="headerlink" title="预加载图片资源"></a>预加载图片资源</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//resLoader.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">//AMD</span></span><br><span class="line">    define(factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">//Node, CommonJS之类的</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//浏览器全局变量(root 即 window)</span></span><br><span class="line">    root.resLoader = factory(root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isFunc = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> f === <span class="string">'function'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//构造器函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resLoader</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.option = &#123;</span><br><span class="line">      resourceType: <span class="string">'image'</span>, <span class="comment">//资源类型，默认为图片</span></span><br><span class="line">      baseUrl: <span class="string">'./'</span>, <span class="comment">//基准url</span></span><br><span class="line">      resources: [], <span class="comment">//资源路径数组</span></span><br><span class="line">      onStart: <span class="literal">null</span>, <span class="comment">//加载开始回调函数，传入参数total</span></span><br><span class="line">      onProgress: <span class="literal">null</span>, <span class="comment">//正在加载回调函数，传入参数currentIndex, total</span></span><br><span class="line">      onComplete: <span class="literal">null</span> <span class="comment">//加载完毕回调函数，传入参数total</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (config) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i <span class="keyword">in</span> config) &#123;</span><br><span class="line">        <span class="keyword">this</span>.option[i] = config[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'参数错误！'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.status = <span class="number">0</span>; <span class="comment">//加载器的状态，0：未启动   1：正在加载   2：加载完毕</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="keyword">this</span>.option.resources.length || <span class="number">0</span>; <span class="comment">//资源总数</span></span><br><span class="line">    <span class="keyword">this</span>.currentIndex = <span class="number">0</span>; <span class="comment">//当前正在加载的资源索引</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resLoader.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> baseUrl = <span class="keyword">this</span>.option.baseUrl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.option.resources.length; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> r = <span class="keyword">this</span>.option.resources[i],</span><br><span class="line">        url = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">if</span> (r.indexOf(<span class="string">'http://'</span>) === <span class="number">0</span> || r.indexOf(<span class="string">'https://'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        url = r;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url = baseUrl + r;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">      image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.loaded();</span><br><span class="line">      &#125;;</span><br><span class="line">      image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.loaded();</span><br><span class="line">      &#125;;</span><br><span class="line">      image.src = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isFunc(<span class="keyword">this</span>.option.onStart)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.option.onStart(<span class="keyword">this</span>.total);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  resLoader.prototype.loaded = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFunc(<span class="keyword">this</span>.option.onProgress)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.option.onProgress(++<span class="keyword">this</span>.currentIndex, <span class="keyword">this</span>.total);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载完毕</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="keyword">this</span>.total) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isFunc(<span class="keyword">this</span>.option.onComplete)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.option.onComplete(<span class="keyword">this</span>.total);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//暴露公共方法</span></span><br><span class="line">  <span class="keyword">return</span> resLoader;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loader = <span class="keyword">new</span> resLoader(&#123;</span><br><span class="line">  resources: [</span><br><span class="line">    <span class="comment">//相对路径即可，react项目中，可在打包后的，asset-manifest.json中找到</span></span><br><span class="line">    <span class="string">'./static/media/123.1fb4d1e6.gif'</span>,</span><br><span class="line">    <span class="string">'./static/media/thoughts.84182ca8.png'</span>,</span><br><span class="line">    <span class="string">'./static/media/yonghu.5eb5a0de.png'</span></span><br><span class="line">  ],</span><br><span class="line">  onStart: <span class="function"><span class="keyword">function</span>(<span class="params">total</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'start:'</span> + total);</span><br><span class="line">  &#125;,</span><br><span class="line">  onProgress: <span class="function"><span class="keyword">function</span>(<span class="params">current, total</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(current + <span class="string">'/'</span> + total);</span><br><span class="line">    <span class="keyword">let</span> percent = (current / total) * <span class="number">100</span>;</span><br><span class="line">    $(<span class="string">'.progressbar'</span>).css(<span class="string">'width'</span>, percent + <span class="string">'%'</span>);</span><br><span class="line">    $(<span class="string">'.progresstext .current'</span>).text(current);</span><br><span class="line">    $(<span class="string">'.progresstext .total'</span>).text(total);</span><br><span class="line">  &#125;,</span><br><span class="line">  onComplete: <span class="function"><span class="keyword">function</span>(<span class="params">total</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加载完毕:'</span> + total + <span class="string">'个资源'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">loader.start();</span><br></pre></td></tr></table></figure><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">"homepage": "."</span><br></pre></td></tr></table></figure><p><code>npm run build</code></p><h2 id="npm以及各种-bug"><a href="#npm以及各种-bug" class="headerlink" title="npm以及各种 bug"></a><code>npm</code>以及各种 bug</h2><p>。。。总有奇奇怪怪的 bug，清除缓存，npx 执行命令</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-H5-开发有感&quot;&gt;&lt;a href=&quot;#React-H5-开发有感&quot; class=&quot;headerlink&quot; title=&quot;React H5 开发有感&quot;&gt;&lt;/a&gt;React H5 开发有感&lt;/h1&gt;&lt;h2 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h2&gt;&lt;h3 id=&quot;官方脚手架&quot;&gt;&lt;a href=&quot;#官方脚手架&quot; class=&quot;headerlink&quot; title=&quot;官方脚手架&quot;&gt;&lt;/a&gt;官方脚手架&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npx create-react-app my-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; my-app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 进阶系列</title>
    <link href="http://yoursite.com/2020/01/22/JavaScript%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2020/01/22/JavaScript%E8%BF%9B%E9%98%B6%E7%B3%BB%E5%88%97/</id>
    <published>2020-01-22T14:00:50.000Z</published>
    <updated>2020-02-26T14:47:51.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-进阶系列"><a href="#JavaScript-进阶系列" class="headerlink" title="JavaScript 进阶系列"></a>JavaScript 进阶系列</h1><h2 id="解析过程与变量提升"><a href="#解析过程与变量提升" class="headerlink" title="解析过程与变量提升"></a>解析过程与变量提升</h2><h3 id="变量的提升"><a href="#变量的提升" class="headerlink" title="变量的提升"></a>变量的提升</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> web = <span class="string">'by.com'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(web);</span><br><span class="line"><span class="keyword">var</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">'asdf'</span>; <span class="comment">//关键字不可用</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>结果是不会输出<code>web</code>的内容，直接报错</p><p>原因：解析器在运行代码前会解析一波，在这个过程中进行了<strong>变量提升</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(web); <span class="comment">//error，web没有定义</span></span><br><span class="line"><span class="keyword">var</span> web = <span class="string">'by.com'</span>; <span class="comment">//输出undefined</span></span><br></pre></td></tr></table></figure><p>执行前进行解析，变量提升</p><p><code>var web = &quot;by.com&quot;</code>这个语句进行了 ① 声明和 ② 赋值，等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> web; <span class="comment">//这一步在解析中被提升到前面</span></span><br><span class="line">web = <span class="string">'by.com'</span>;</span><br></pre></td></tr></table></figure><p>变量提升是在代码预解析的时候进行的处理；</p><h3 id="函数的例子"><a href="#函数的例子" class="headerlink" title="函数的例子"></a>函数的例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> web = <span class="string">'by.com'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(web);</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br><span class="line"><span class="comment">//输出undefined，等同于在if前赋值</span></span><br></pre></td></tr></table></figure><p>SUM：使用<code>var</code>定义赋值不是最佳的，习惯最好是先声明后使用的操作。</p><h2 id="let-amp-const暂时性死区-TDC"><a href="#let-amp-const暂时性死区-TDC" class="headerlink" title="let&amp;const暂时性死区 TDC"></a><code>let</code>&amp;<code>const</code>暂时性死区 TDC</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(web);</span><br><span class="line"><span class="keyword">let</span> web = <span class="string">'by.com'</span>; <span class="comment">//error报错,这里const同理</span></span><br></pre></td></tr></table></figure><p><code>let</code>声明产生了一个临时性死区 TDC</p><p><strong><code>let</code>声明，必须在声明之后才能使用。</strong></p><hr><h3 id="函数的例子-1"><a href="#函数的例子-1" class="headerlink" title="函数的例子"></a>函数的例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> web = <span class="string">'by.com'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(web);</span><br><span class="line">  <span class="comment">//let web = 'some';</span></span><br><span class="line">  <span class="comment">//如果在函数里，调用后加上声明，就会报错，cannot access 'web'...</span></span><br><span class="line">&#125;</span><br><span class="line">func();</span><br><span class="line"><span class="comment">//输出by.com</span></span><br></pre></td></tr></table></figure><p>如果在函数体内没有声明变量，会向上寻找变量</p><p>在块区域中如果使用了声明语句，声明语句必须放在使用之前，就不会出现<code>var</code>的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">a=b,b=<span class="number">3</span></span>)</span>&#123;&#125;</span><br><span class="line">run() <span class="comment">//error cannot access 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run1</span>(<span class="params">a=<span class="number">3</span>,b=a</span>)</span>&#123;&#125;<span class="comment">//这样是不会报错的，a已经赋值了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-进阶系列&quot;&gt;&lt;a href=&quot;#JavaScript-进阶系列&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 进阶系列&quot;&gt;&lt;/a&gt;JavaScript 进阶系列&lt;/h1&gt;&lt;h2 id=&quot;解析过程与变量提升&quot;&gt;&lt;a href=&quot;#解析过程与变量提升&quot; class=&quot;headerlink&quot; title=&quot;解析过程与变量提升&quot;&gt;&lt;/a&gt;解析过程与变量提升&lt;/h2&gt;&lt;h3 id=&quot;变量的提升&quot;&gt;&lt;a href=&quot;#变量的提升&quot; class=&quot;headerlink&quot; title=&quot;变量的提升&quot;&gt;&lt;/a&gt;变量的提升&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; web = &lt;span class=&quot;string&quot;&gt;&#39;by.com&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(web);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;/span&gt;= &lt;span class=&quot;string&quot;&gt;&#39;asdf&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//关键字不可用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>React-Hook</title>
    <link href="http://yoursite.com/2020/01/22/React-Hook/"/>
    <id>http://yoursite.com/2020/01/22/React-Hook/</id>
    <published>2020-01-22T14:00:50.000Z</published>
    <updated>2020-01-25T09:24:47.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React-Hook"></a>React-Hook</h1><blockquote><p>Hook 是 React 16.8 的新特性，可以在不编写<code>class</code>的情况下使用<code>state</code>以及其他的 React 特性</p></blockquote><a id="more"></a><h2 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a><code>State Hook</code></h2><p>一个<code>class</code>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Example extends React.Component &#123;</span><br><span class="line">  construtor(props)&#123;</span><br><span class="line">    super(props)l</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      count: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    return(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;button onClick&#x3D;&#123;()&#x3D;&gt;this.setState(&#123;count:this.state.count + 1&#125;)&#125;&gt;</span><br><span class="line">        Click!</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hook</code>写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from &#39;react&#39;;</span><br><span class="line">function Example()&#123;</span><br><span class="line">  &#x2F;&#x2F;声明一个名为&quot;count&quot;的state变量</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line">  return (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;button onClick&#x3D;&#123;()&#x3D;&gt;setCount(count + 1)&#125;&gt;</span><br><span class="line">      Click!</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hook和函数组件"><a href="#Hook和函数组件" class="headerlink" title="Hook和函数组件"></a><code>Hook</code>和函数组件</h3><h4 id="无状态组件（函数组件）"><a href="#无状态组件（函数组件）" class="headerlink" title="无状态组件（函数组件）"></a>无状态组件（函数组件）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Example &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;可以使用Hook</span><br><span class="line">  return &lt;div &#x2F;&gt;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">function Example(props)&#123;</span><br><span class="line">  &#x2F;&#x2F;可以使用Hook</span><br><span class="line">  return &lt;div &#x2F;&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Hook 在 class 内部是不起作用的，但是可以用来取代 class</strong></p><h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><blockquote><p>首先引入了 React 中<code>useState</code>的 Hook</p><p>Hook 是一种特殊的函数，可以“钩入”React 的特性。</p><p>例如，<code>useState</code>允许在 React 函数组件中添加 state 的 Hook</p></blockquote><p>使用 Hook 的场景</p><p>在编写函数组件并需要向其添加一些 state，以前是用 class，现在可以在现有的函数组件中使用 Hook</p><h3 id="声明State变量"><a href="#声明State变量" class="headerlink" title="声明State变量"></a>声明<code>State</code>变量</h3><p>在函数组件中，没有<code>this</code>，所以不能分配或读取<code>this.state</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState&#125; from &#39;react&#39;;</span><br><span class="line">function Example()&#123;</span><br><span class="line">  &#x2F;&#x2F;声明一个叫&quot;count&quot;的state变量</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>useState</code>方法的过程</p><p>定义了一个<code>state</code>变量。这里的变量名为<code>count</code>。这是一种在函数调用时保存变量的方式——<code>useState</code>是一种新方法。与 class 里的<code>this.state</code>提供的功能完全相同。一般而言，在函数退出后变量就会消失，<code>state</code>中的变量会被 React 保留。</p><p><hr><br><code>useState</code>的参数</p><p><code>useState()</code>方法唯一的参数就是初始<code>state</code>。</p><p>不同于 class。可以按照需要使用的字符串或数组进行赋值，而不一定是对象</p><p>想要在<code>state</code>中存储两个不同的变量，只需调用<code>useState()</code>两次</p><p><hr><br><code>useState</code>的返回值</p><p>返回值为：当前<code>state</code>以及更新<code>state</code>的函数。</p><p><code>const [count, setCount] = useState()</code></p><p><hr><br>这里声明了一个名为<code>count</code>的<code>state</code>变量，然后初始化为 0。React 会在重复渲染时记住它的值。</p><p>并且提供最新的值给函数。可以通过调用<code>setCount</code>来更新当前的<code>count</code></p><h3 id="读取State"><a href="#读取State" class="headerlink" title="读取State"></a>读取<code>State</code></h3><p>直接调用<code>{count}</code></p><h3 id="更新State"><a href="#更新State" class="headerlink" title="更新State"></a>更新<code>State</code></h3><p><code>onClick = {() =&gt; setCount(count + 1)}</code></p><h2 id="使用Effect-Hook"><a href="#使用Effect-Hook" class="headerlink" title="使用Effect Hook"></a>使用<code>Effect Hook</code></h2><blockquote><p>Effect Hook 可以在函数组件中执行副作用操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState, useEffect&#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">function Example()&#123;</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;Similar to componentDidMount and componentDidUpdate;</span><br><span class="line">  useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;Update the document title using the browser API</span><br><span class="line">    document.title &#x3D; &#96;You clicked $&#123;count&#125; times&#96;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;You clicked &#123;count&#125; times&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;button onClick &#x3D; &#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">      Click</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给计数器添加了一个功能：将 document 的 title 设置为包含了点击次数的消息</p><p><strong>数据获取、设置订阅以及手动更改 React 组件中的 DOM 都属于副作用</strong></p><h3 id="无需清除的-effect"><a href="#无需清除的-effect" class="headerlink" title="无需清除的 effect"></a>无需清除的 <code>effect</code></h3><p>只想在 React 更新 DOM 之后运行一些额外的代码。</p><p>如：<strong>发送网络请求、手动变更 DOM、记录日志</strong>，这些都是常见的无需清除的操作</p><p>因为在执行完这些操作过后，可以忽略</p><hr><p><code>useEffect</code></p><p>使用Hook，可以告知React组件需要在渲染后执行一些操作。</p><p>React会保存传递的函数，effect。并且在执行DOM更新后调用它，在effect中，设置了document的title属性，也可以执行数据获取或调用其他命令式的API</p><hr><p>在组件内部调用<code>useEffect</code>的原因</p><p>将<code>useEffect</code>放在组件内部可以在effect中直接访问<code>count</code> state变量（或其他props）无需特殊的API读取——已经保存在了函数作用域中。Hook使用了JavaScript闭包机制</p><hr><p><code>useEffect</code>在渲染后都会执行</p><p>在第一次渲染之后和每次更新之后都会执行。effect发生在渲染之后，不是考虑挂载更新，React保证了每次运行effect的同时，DOM都已经更新完毕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明了<code>count state</code>变量，并且使用effect。传递函数给use</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Hook&quot;&gt;&lt;a href=&quot;#React-Hook&quot; class=&quot;headerlink&quot; title=&quot;React-Hook&quot;&gt;&lt;/a&gt;React-Hook&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Hook 是 React 16.8 的新特性，可以在不编写&lt;code&gt;class&lt;/code&gt;的情况下使用&lt;code&gt;state&lt;/code&gt;以及其他的 React 特性&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="工程" scheme="http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据结构与算法（六）树篇</title>
    <link href="http://yoursite.com/2020/01/20/JavaScript6/"/>
    <id>http://yoursite.com/2020/01/20/JavaScript6/</id>
    <published>2020-01-20T12:00:50.000Z</published>
    <updated>2020-01-26T07:52:05.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据结构与算法（六）树篇"><a href="#JavaScript-数据结构与算法（六）树篇" class="headerlink" title="JavaScript 数据结构与算法（六）树篇"></a>JavaScript 数据结构与算法（六）树篇</h1><h2 id="二叉树和二叉搜索树"><a href="#二叉树和二叉搜索树" class="headerlink" title="二叉树和二叉搜索树"></a>二叉树和二叉搜索树</h2><blockquote><p>二叉搜索树(BST)是二叉树的一种</p><p>只允许在左侧节点存储比双亲节点小的值，在右侧节点存储比双亲节点大的值</p></blockquote><a id="more"></a><h3 id="创建BinarySearchTree类"><a href="#创建BinarySearchTree类" class="headerlink" title="创建BinarySearchTree类"></a>创建<code>BinarySearchTree</code>类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">data,left,right</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = data;</span><br><span class="line">  <span class="keyword">this</span>.left = left;</span><br><span class="line">  <span class="keyword">this</span>.right = right;</span><br><span class="line">  <span class="keyword">this</span>.show = show</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉搜索树</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BST</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.insert = insert;</span><br><span class="line">  <span class="keyword">this</span>.inOrder = inOrder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="keyword">new</span> Node(data,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.root === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.root = n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">let</span> parent;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">      parent = current;</span><br><span class="line">      <span class="keyword">if</span>(data &lt; current.data)&#123;</span><br><span class="line">        current = current.left;</span><br><span class="line">        <span class="keyword">if</span>(current === <span class="literal">null</span>)&#123;</span><br><span class="line">          parent.left = n;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = current.right;</span><br><span class="line">        <span class="keyword">if</span>(current === <span class="literal">null</span>)&#123;</span><br><span class="line">          parent.right = n;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!(node === <span class="literal">null</span>))&#123;</span><br><span class="line">    inOrder(node.left);</span><br><span class="line">    putstr(node.data + <span class="string">" "</span>);</span><br><span class="line">    inOrder(node.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>访问BST所有节点的遍历方式，从最小到最大的顺序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preOrder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!(node === <span class="literal">null</span>))&#123;</span><br><span class="line">    putstr(node.data + <span class="string">" "</span>);</span><br><span class="line">    preOrder(node.left);</span><br><span class="line">    preOrder(node.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postOrder</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!(node === <span class="literal">null</span>))&#123;</span><br><span class="line">    postOrder(node.left);</span><br><span class="line">    postOrder(node.right);</span><br><span class="line">    putstr(node.data + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搜索树中的值"><a href="#搜索树中的值" class="headerlink" title="搜索树中的值"></a>搜索树中的值</h2><h3 id="搜索最小值和最大值"><a href="#搜索最小值和最大值" class="headerlink" title="搜索最小值和最大值"></a>搜索最小值和最大值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span>(current.left !== <span class="literal">null</span>)&#123;</span><br><span class="line">    current = current.left;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current.data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span>(current.right !== <span class="literal">null</span>)&#123;</span><br><span class="line">    current = current.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> current.data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索特定的值"><a href="#搜索特定的值" class="headerlink" title="搜索特定的值"></a>搜索特定的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">  <span class="keyword">while</span>(current !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(current.data === data)&#123;</span><br><span class="line">      <span class="keyword">return</span> current</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(current.data &lt; data)&#123;</span><br><span class="line">      current = current.left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = current.right;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除指定值"><a href="#删除指定值" class="headerlink" title="删除指定值"></a>删除指定值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  root = removeNode(<span class="keyword">this</span>.root, data)<span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeNode</span>(<span class="params">node, data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(node === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(data === node.data)&#123;</span><br><span class="line">    <span class="comment">//没有子节点</span></span><br><span class="line">    <span class="keyword">if</span>(node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有左子</span></span><br><span class="line">    <span class="keyword">if</span>(node.left === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> node.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有右子</span></span><br><span class="line">    <span class="keyword">if</span>(node.right === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tempNode = getSmallest(node.right);</span><br><span class="line">    node.data = tempNode.data;</span><br><span class="line">    node.right = removeNode(node.right, tempNode.data);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; node.data)&#123;</span><br><span class="line">    node.left = removeNode(node.left, data);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    node.right = removeNode(node.right, data);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-数据结构与算法（六）树篇&quot;&gt;&lt;a href=&quot;#JavaScript-数据结构与算法（六）树篇&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据结构与算法（六）树篇&quot;&gt;&lt;/a&gt;JavaScript 数据结构与算法（六）树篇&lt;/h1&gt;&lt;h2 id=&quot;二叉树和二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉树和二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉树和二叉搜索树&quot;&gt;&lt;/a&gt;二叉树和二叉搜索树&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;二叉搜索树(BST)是二叉树的一种&lt;/p&gt;
&lt;p&gt;只允许在左侧节点存储比双亲节点小的值，在右侧节点存储比双亲节点大的值&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据结构与算法（四）集合篇</title>
    <link href="http://yoursite.com/2020/01/19/JavaScript4/"/>
    <id>http://yoursite.com/2020/01/19/JavaScript4/</id>
    <published>2020-01-19T15:00:50.000Z</published>
    <updated>2020-01-19T14:25:54.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据结构与算法（四）集合篇"><a href="#JavaScript-数据结构与算法（四）集合篇" class="headerlink" title="JavaScript 数据结构与算法（四）集合篇"></a>JavaScript 数据结构与算法（四）集合篇</h1><h2 id="构建数据集合"><a href="#构建数据集合" class="headerlink" title="构建数据集合"></a>构建数据集合</h2><blockquote><p>集合是由一组无序且唯一（不能重复）的项组成。</p></blockquote><a id="more"></a><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  has(element) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>.items, element);</span><br><span class="line">  &#125;</span><br><span class="line">  add(element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.has(element)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.items[element] = element;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span>(element) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(element)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.items[element];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.items).length;</span><br><span class="line">  &#125;</span><br><span class="line">  sizeLegacy() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.items) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.items.hasOwnProperty(key)) &#123;</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">  values() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.values(<span class="keyword">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">union(otherSet)&#123;</span><br><span class="line">  <span class="keyword">const</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">this</span>.values().forEach(<span class="function"><span class="params">value</span> =&gt;</span> unionSet.add(value));</span><br><span class="line">  otherSet.values().forEach(<span class="function"><span class="params">value</span> =&gt;</span> unionSet.add(value));</span><br><span class="line">  <span class="keyword">return</span> unionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">intersection(otherset)&#123;</span><br><span class="line">  <span class="keyword">const</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">const</span> values = <span class="keyword">this</span>.values;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(otherSet.has(values[i]))&#123;</span><br><span class="line">      intersectionSet.add(values[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> intersectionSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">difference(otherSet)&#123;</span><br><span class="line">  <span class="keyword">const</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="keyword">this</span>.values().forEach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!otherSet.has(value))&#123;</span><br><span class="line">      differenceSet.add(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> differenceSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">isSubsetOf(otherSet)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.size() &gt; otherSet.size())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> isSubset = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.values().every(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!otherSet.has(value))&#123;</span><br><span class="line">      isSubset = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> isSubset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多重集或袋</p><p>允许向集合中插入之前已经添加过的元素。在计算集合中元素的出现次数时很有用。在数据库系统中得到了广泛运用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-数据结构与算法（四）集合篇&quot;&gt;&lt;a href=&quot;#JavaScript-数据结构与算法（四）集合篇&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据结构与算法（四）集合篇&quot;&gt;&lt;/a&gt;JavaScript 数据结构与算法（四）集合篇&lt;/h1&gt;&lt;h2 id=&quot;构建数据集合&quot;&gt;&lt;a href=&quot;#构建数据集合&quot; class=&quot;headerlink&quot; title=&quot;构建数据集合&quot;&gt;&lt;/a&gt;构建数据集合&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;集合是由一组无序且唯一（不能重复）的项组成。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据结构与算法（五）字典与散列表篇</title>
    <link href="http://yoursite.com/2020/01/19/JavaScript5/"/>
    <id>http://yoursite.com/2020/01/19/JavaScript5/</id>
    <published>2020-01-19T15:00:50.000Z</published>
    <updated>2020-01-20T06:25:07.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据结构与算法（五）字典与散列表篇"><a href="#JavaScript-数据结构与算法（五）字典与散列表篇" class="headerlink" title="JavaScript 数据结构与算法（五）字典与散列表篇"></a>JavaScript 数据结构与算法（五）字典与散列表篇</h1><h2 id="字典Dictionary"><a href="#字典Dictionary" class="headerlink" title="字典Dictionary"></a>字典<code>Dictionary</code></h2><blockquote><p>字典是以<code>[key,value]</code>（集合则是<code>[value,value]</code>）</p><p>字典也称作<strong>映射、符号表、关联数组</strong></p><p>字典经常用来保存对象的引用地址</p></blockquote><a id="more"></a><h3 id="创建字典类"><a href="#创建字典类" class="headerlink" title="创建字典类"></a>创建字典类</h3><blockquote><p>在字典中，一般是用字符串作为键名，值可以是任何类型</p><p>需要把所有作为key传入的对象转化为字符串</p></blockquote><p>以键值对形式保存<code>table[key] = {key,value}</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defaultToString</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(item === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'NULL'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'UNDEFINED'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typedef item === <span class="string">'string'</span> || item <span class="keyword">instanceof</span> <span class="built_in">String</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defaultToString&#125; <span class="keyword">from</span> <span class="string">'../util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValuePair</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(key,value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">  toString()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="keyword">this</span>.key&#125;</span>:<span class="subst">$&#123;<span class="keyword">this</span>.value&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(toStrFn = defaultToString)&#123;</span><br><span class="line">    <span class="keyword">this</span>.toStrFn = toStrFn;</span><br><span class="line">    <span class="keyword">this</span>.table = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//检测一个key是否存在</span></span><br><span class="line">  hasKey(key)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.toStrFn(key)] !== <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//设置键值对</span></span><br><span class="line">  <span class="keyword">set</span>(key,value)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> tableKey = <span class="keyword">this</span>.toStrFn(key);</span><br><span class="line">      <span class="keyword">this</span>.table[tableKey] = <span class="keyword">new</span> ValuePair(key,value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//移除一个值</span></span><br><span class="line">  remove(key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.hasKey(key))&#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.toStrFn(key)];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//检索一个值</span></span><br><span class="line">  <span class="keyword">get</span>(key)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.hasKey(key))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.toStrFn(key)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  keyValues()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.values(<span class="keyword">this</span>.table);</span><br><span class="line">  &#125;</span><br><span class="line">  keyValuesNormal()&#123;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> k <span class="keyword">in</span> <span class="keyword">this</span>.table)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.hasKey(k))&#123;</span><br><span class="line">        valuePairs.push(<span class="keyword">this</span>.table[k]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> valuePairs;</span><br><span class="line">  &#125;</span><br><span class="line">  keys()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.keyValues().map(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.key);</span><br><span class="line">  &#125;</span><br><span class="line">  values()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.keyValues().map(<span class="function"><span class="params">valuePair</span> =&gt;</span> valuePair.value);</span><br><span class="line">  &#125;</span><br><span class="line">  forEach(callbackFn)&#123;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="keyword">this</span>.keyValues();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; valuePairs.length; i++)&#123;</span><br><span class="line">      <span class="keyword">const</span> result = callbackFn(valuePairs[i].key, valuePairs[i].value);</span><br><span class="line">      <span class="keyword">if</span>(result === <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  size()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.table).length;</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  clear()&#123;</span><br><span class="line">    <span class="keyword">this</span>.table = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  toString()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> valuePairs = <span class="keyword">this</span>.keyValues();</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;valuePairs[<span class="number">0</span>].toString()&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; valuePairs.length; i++)&#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;valuePairs[i].toString()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="散列表HashTable-HashMap"><a href="#散列表HashTable-HashMap" class="headerlink" title="散列表HashTable/HashMap"></a>散列表<code>HashTable</code>/<code>HashMap</code></h2><blockquote><p>散列算法的作用是尽可能快的在数据结构中找到一个值。比get方法更快速</p><p>如果使用散列函数，就知道值的具体位置。散列函数的作用是给定一个键值，然后返回值在表中的地址</p></blockquote><h3 id="创建散列表"><a href="#创建散列表" class="headerlink" title="创建散列表"></a>创建散列表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span>()</span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(toStrFn = defaultToString)&#123;</span><br><span class="line">    <span class="keyword">this</span>.toStrFn = toStrFn;</span><br><span class="line">    <span class="keyword">this</span>.table = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建散列函数"><a href="#创建散列函数" class="headerlink" title="创建散列函数"></a>创建散列函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loseloseHashCode(key)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> key === <span class="string">'number'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tableKey = <span class="keyword">this</span>.toStrFn(key);</span><br><span class="line">  <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tableKey.length; i++)&#123;</span><br><span class="line">    hash += tableKey.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashCode(key)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.loseloseHashCode(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">put(key,value)&#123;</span><br><span class="line">  <span class="keyword">if</span>(key !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="keyword">this</span>.hashCode(key);</span><br><span class="line">    <span class="keyword">this</span>.table[position] = <span class="keyword">new</span> ValuePair(key,value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>(key)&#123;</span><br><span class="line">  <span class="keyword">const</span>  valuePair = <span class="keyword">this</span>.table[<span class="keyword">this</span>.hashCode(key)];</span><br><span class="line">  <span class="keyword">return</span> valuePair === <span class="literal">null</span> ? <span class="literal">undefined</span> : valuePair.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove(key)&#123;</span><br><span class="line">  <span class="keyword">const</span> hash = <span class="keyword">this</span>.hashCode(key);</span><br><span class="line">  <span class="keyword">const</span> valuePair = <span class="keyword">this</span>.table[hash];</span><br><span class="line">  <span class="keyword">if</span>(valuePair !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.table[hash];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="散列表和散列集合"><a href="#散列表和散列集合" class="headerlink" title="散列表和散列集合"></a>散列表和散列集合</h2><h3 id="处理散列表中的冲突"><a href="#处理散列表中的冲突" class="headerlink" title="处理散列表中的冲突"></a>处理散列表中的冲突</h3><h4 id="分离链接"><a href="#分离链接" class="headerlink" title="分离链接"></a>分离链接</h4><blockquote><p>分离链接法包括为散列表的每一个位置创建一个链表用于存储元素</p></blockquote><p><img src="/2020/01/19/JavaScript5/linked" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTableSeparateChaining</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(toStrFn = defaultToString)&#123;</span><br><span class="line">    <span class="keyword">this</span>.toStrFn = toStrFn;</span><br><span class="line">    <span class="keyword">this</span>.table = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  put(key,value)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> position = <span class="keyword">this</span>.hashCode(key);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.table[position] === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.table[position] = <span class="keyword">new</span> LinkedList();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.table[position].push(<span class="keyword">new</span> ValuePair(key,value));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">get</span>(key)&#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="keyword">this</span>.hashCode(key);</span><br><span class="line">    <span class="keyword">const</span> linkedList = <span class="keyword">this</span>.table[position];</span><br><span class="line">    <span class="keyword">if</span>(linkedList !== <span class="literal">null</span> &amp;&amp; linkedList.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">let</span> current = linkedList.getHead();</span><br><span class="line">      <span class="keyword">while</span>(current !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line">          <span class="keyword">return</span> current.element.value;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  remove(key)&#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="keyword">this</span>.hashCode(key);</span><br><span class="line">    <span class="keyword">const</span> linkedList = <span class="keyword">this</span>.table[position];</span><br><span class="line">    <span class="keyword">if</span>(linkedList !== <span class="literal">null</span> &amp;&amp; !linkedList.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">let</span> current = linkedList.getHead();</span><br><span class="line">      <span class="keyword">while</span>(current !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(current.element.key === key)&#123;</span><br><span class="line">          linkedList.remove(current.element);</span><br><span class="line">          <span class="keyword">if</span>(linkedList.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>.table[position];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线性探查"><a href="#线性探查" class="headerlink" title="线性探查"></a>线性探查</h4><blockquote><p>线性探查，处理冲突的方法是将元素直接存储到表中，而不是在单独的数据结构中</p><p>如果索引为position的位置被占据了，就尝试position+1的位置，依此类推</p></blockquote><p><img src="/2020/01/19/JavaScript5/list" alt="img" style="zoom: 50%;"></p><p>线性探查技术分为两种</p><ol><li><p>软删除方法，使用一个特殊的值（标记）来表示键值对被删除。一段时间过后，散列表被操作过后，会得到一个标记了若干位置的散列表。这会逐渐降低散列表的效率，因为搜索键值会随时间变得更慢了</p><p><img src="/2020/01/19/JavaScript5/delete1" alt="img" style="zoom:50%;"></p></li><li><p>需要检验是否有必要将一个或多个元素移动到之前的位置。</p><p><img src="/2020/01/19/JavaScript5/delete2" alt="img" style="zoom:50%;"></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">put(key,value)&#123;</span><br><span class="line">  <span class="keyword">if</span>(key !== <span class="literal">null</span> &amp;&amp; value !== <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="keyword">this</span>.hashCode(key);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.table[position] === <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.table[position] = <span class="keyword">new</span> ValuePair(key,value); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> index = position + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">this</span>.table[index] !== <span class="literal">null</span>)&#123;</span><br><span class="line">        index++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.table[index] = <span class="keyword">new</span> ValuePair(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-数据结构与算法（五）字典与散列表篇&quot;&gt;&lt;a href=&quot;#JavaScript-数据结构与算法（五）字典与散列表篇&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据结构与算法（五）字典与散列表篇&quot;&gt;&lt;/a&gt;JavaScript 数据结构与算法（五）字典与散列表篇&lt;/h1&gt;&lt;h2 id=&quot;字典Dictionary&quot;&gt;&lt;a href=&quot;#字典Dictionary&quot; class=&quot;headerlink&quot; title=&quot;字典Dictionary&quot;&gt;&lt;/a&gt;字典&lt;code&gt;Dictionary&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;字典是以&lt;code&gt;[key,value]&lt;/code&gt;（集合则是&lt;code&gt;[value,value]&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;字典也称作&lt;strong&gt;映射、符号表、关联数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字典经常用来保存对象的引用地址&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据结构与算法（三）链表篇</title>
    <link href="http://yoursite.com/2020/01/17/JavaScript3/"/>
    <id>http://yoursite.com/2020/01/17/JavaScript3/</id>
    <published>2020-01-17T15:00:50.000Z</published>
    <updated>2020-01-19T14:23:22.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据结构与算法（三）链表篇"><a href="#JavaScript-数据结构与算法（三）链表篇" class="headerlink" title="JavaScript 数据结构与算法（三）链表篇"></a>JavaScript 数据结构与算法（三）链表篇</h1><h2 id="链表数据结构"><a href="#链表数据结构" class="headerlink" title="链表数据结构"></a>链表数据结构</h2><blockquote><p>数组的大小是固定的，从数组的起点或中间插入或移除项的成本很高</p><p>链表存储有序的元素合集，链表中的元素在内存中不是连续放置的</p></blockquote><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = element;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.head = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.push = push;</span><br><span class="line">  <span class="keyword">this</span>.removeAt = removeAt;</span><br><span class="line">  <span class="keyword">this</span>.getElementAt = getElementAt;</span><br><span class="line">  <span class="keyword">this</span>.insert = insert;</span><br><span class="line">  <span class="keyword">this</span>.indexOf = indexOf;</span><br><span class="line">  <span class="keyword">this</span>.size = size;</span><br><span class="line">  <span class="keyword">this</span>.isEmpty = isEmpty;</span><br><span class="line">  <span class="keyword">this</span>.toString = toString;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向链表尾部添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">  <span class="keyword">let</span> current;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.head = node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (current.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//获得最后一项</span></span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将其next赋为新元素，创建链接</span></span><br><span class="line">    current.next = node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从链表中移除元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeAt</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="comment">//移除第一项</span></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = current.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> previous;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        <span class="comment">//找到index节点</span></span><br><span class="line">        previous = current;</span><br><span class="line">        current = current.next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//跳过current</span></span><br><span class="line">      previous.next = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">return</span> current.element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到目标位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementAt</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; node !== <span class="literal">null</span>; i++) &#123;</span><br><span class="line">      node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重构remove</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = current.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">      current = previous.next;</span><br><span class="line">      previous.next = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">return</span> current.element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任意位置插入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//在第一位插入</span></span><br><span class="line">      <span class="keyword">const</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">      node.next = current;</span><br><span class="line">      <span class="keyword">this</span>.head = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">      <span class="comment">//插入操作</span></span><br><span class="line">      <span class="keyword">const</span> current = previous.next;</span><br><span class="line">      node.next = current;</span><br><span class="line">      previous.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一个元素的位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.count &amp;&amp; current !== <span class="literal">null</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current.element !== element) &#123;</span><br><span class="line">      current = current.nextl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">size</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHead</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.head.element&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.head.next;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.count &amp;&amp; current !== <span class="literal">null</span>; i++) &#123;</span><br><span class="line">    objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span>;</span><br><span class="line">    current = current.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><blockquote><p>双向链接，方便找到前一个节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyNode</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = element;</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">this</span>.prev = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.head = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">this</span>.tail = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.insert = insert;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">element, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> DoublyNode(element);</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = node;</span><br><span class="line">        <span class="keyword">this</span>.tail = node;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.next = <span class="keyword">this</span>.head;</span><br><span class="line">        current.prev = node;</span><br><span class="line">        <span class="keyword">this</span>.head = node;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.count) &#123;</span><br><span class="line">      current = <span class="keyword">this</span>.tail;</span><br><span class="line">      current.next = node;</span><br><span class="line">      node.prev = current;</span><br><span class="line">      <span class="keyword">this</span>.tail = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">      current = previous.next;</span><br><span class="line">      node.next = current;</span><br><span class="line">      previous.next = node;</span><br><span class="line">      current.prev = node;</span><br><span class="line">      node.prev = previous;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeAt</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = current.next;</span><br><span class="line">      <span class="comment">//如果只有一项，更新tail</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.count === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.count - <span class="number">1</span>) &#123;</span><br><span class="line">      current = <span class="keyword">this</span>.tail;</span><br><span class="line">      <span class="keyword">this</span>.tail = current.prev;</span><br><span class="line">      <span class="keyword">this</span>.tail.next = <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = <span class="keyword">this</span>.getElementAt(index);</span><br><span class="line">      <span class="keyword">const</span> previous = current.prev;</span><br><span class="line">      previous.next = current.next;</span><br><span class="line">      current.next.prev = previous;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">return</span> current.element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><blockquote><p>循环链表链表一样单向引用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail.next = head;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-数据结构与算法（三）链表篇&quot;&gt;&lt;a href=&quot;#JavaScript-数据结构与算法（三）链表篇&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据结构与算法（三）链表篇&quot;&gt;&lt;/a&gt;JavaScript 数据结构与算法（三）链表篇&lt;/h1&gt;&lt;h2 id=&quot;链表数据结构&quot;&gt;&lt;a href=&quot;#链表数据结构&quot; class=&quot;headerlink&quot; title=&quot;链表数据结构&quot;&gt;&lt;/a&gt;链表数据结构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数组的大小是固定的，从数组的起点或中间插入或移除项的成本很高&lt;/p&gt;
&lt;p&gt;链表存储有序的元素合集，链表中的元素在内存中不是连续放置的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数据结构与算法（二）栈与队列篇</title>
    <link href="http://yoursite.com/2020/01/16/JavaScript2/"/>
    <id>http://yoursite.com/2020/01/16/JavaScript2/</id>
    <published>2020-01-16T15:00:50.000Z</published>
    <updated>2020-04-16T03:59:07.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据结构与算法（二）栈与队列篇"><a href="#JavaScript-数据结构与算法（二）栈与队列篇" class="headerlink" title="JavaScript 数据结构与算法（二）栈与队列篇"></a>JavaScript 数据结构与算法（二）栈与队列篇</h1><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h2><blockquote><p>栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，是一种后入先出（LIFO）的数据结构</p></blockquote><a id="more"></a><h3 id="基于数组实现栈"><a href="#基于数组实现栈" class="headerlink" title="基于数组实现栈"></a>基于数组实现栈</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//入栈操作</span></span><br><span class="line">  push(element = <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!element) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">this</span>.items.push(element);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//出栈操作</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.pop();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//查看栈顶元素，理论上只能看到栈顶或者即将处理的元素</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.size() - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打印栈数据</span></span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.join(<span class="string">' '</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//栈是否为空</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回栈的元素个数</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于对象实现栈"><a href="#基于对象实现栈" class="headerlink" title="基于对象实现栈"></a>基于对象实现栈</h3><p>与数组不同，不能直接调用数组的<code>push()</code>和<code>pop()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 或者</span></span><br><span class="line"><span class="comment">    while(!this.isEmpty())&#123;</span></span><br><span class="line"><span class="comment">      this.pop();</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.items[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一些规范化改进"><a href="#一些规范化改进" class="headerlink" title="一些规范化改进"></a>一些规范化改进</h4><h5 id="下划线命名约定"><a href="#下划线命名约定" class="headerlink" title="下划线命名约定"></a>下划线命名约定</h5><blockquote><p>使用下划线命名约定来标记一个属性为私有变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">construtor()&#123;</span><br><span class="line">  <span class="keyword">this</span>._count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>._items = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="限定作用域-Symbol-实现类"><a href="#限定作用域-Symbol-实现类" class="headerlink" title="限定作用域 Symbol 实现类"></a>限定作用域 Symbol 实现类</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _items = <span class="built_in">Symbol</span>(<span class="string">'stackItems'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>[_items] = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制数转化"><a href="#进制数转化" class="headerlink" title="进制数转化"></a>进制数转化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进制转换算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber, base</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> remStack = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="keyword">const</span> digits = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class="line">  <span class="keyword">let</span> number = decNumber;</span><br><span class="line">  <span class="keyword">let</span> rem;</span><br><span class="line">  <span class="keyword">let</span> baseString = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!(base &gt;= <span class="number">2</span> &amp;&amp; base &lt;= <span class="number">36</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>; <span class="comment">//进制转化的限制</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(number % base);</span><br><span class="line">    remStack.push(rem);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number / base);<span class="comment">//得到商</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!remStack.isEmpty()) &#123;</span><br><span class="line">    baseString += digits[remStack.pop()];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baseString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的一些思考"><a href="#栈的一些思考" class="headerlink" title="栈的一些思考"></a>栈的一些思考</h3><p>栈作用：在编程语言的编译器和内存中保存变量、方法调用</p><p>计算机内存栈</p><p><img src="/2020/01/16/JavaScript2/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200416113054390.png" alt="image-20200416113054390"></p><p>fun1()先执行</p><p><strong>先调用先入栈，先执行先出栈</strong></p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p><img src="/2020/01/16/JavaScript2/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20200416113402390.png" alt="image-20200416113402390"></p><p>函数调用自己本身</p><h2 id="队列-Queue-和双端队列-Deque"><a href="#队列-Queue-和双端队列-Deque" class="headerlink" title="队列 Queue 和双端队列 Deque"></a>队列 Queue 和双端队列 Deque</h2><h3 id="队列数据结构"><a href="#队列数据结构" class="headerlink" title="队列数据结构"></a>队列数据结构</h3><blockquote><p>队列是遵循先进先出（FIFO）原则的一组有序的项。队列在尾部添加先元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>; <span class="comment">//控制队列的大小</span></span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>; <span class="comment">//追踪第一个元素</span></span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//向队列添加元素</span></span><br><span class="line">  enqueue(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//从队列移除元素</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">this</span>.lowestCount++;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//查看队列头元素</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//检查队列是否为空并获取长度</span></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//大小</span></span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//清空队列</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="keyword">this</span>.lowestCount + <span class="number">1</span>; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="keyword">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><h3 id="双端队列数据结构"><a href="#双端队列数据结构" class="headerlink" title="双端队列数据结构"></a>双端队列数据结构</h3><blockquote><p>双端队列（deque）是一种允许同时从前端和后端添加和移除元素的特殊队列</p><p>在计算机科学中，双端队列的一个常见应用是存储一系列的撤销操作。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//向双端队列的前端添加元素</span></span><br><span class="line">  addFront(element)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">this</span>.addBack(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.lowestCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.lowestCount--;</span><br><span class="line">      <span class="keyword">this</span>.items[lowestCount] = element;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="keyword">this</span>.count; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">this</span>.items[i] = <span class="keyword">this</span>.items[i<span class="number">-1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count++;</span><br><span class="line">      <span class="keyword">this</span>.lowestCount = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>.items[<span class="number">0</span>] = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//向双端队列的后端添加元素，同enqueue</span></span><br><span class="line">  addBack(element)&#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = element;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//从双端队列中的前端移除元素，同dequeue</span></span><br><span class="line">  removeFront()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">    lowestCount++;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//从双端队列中的后端移除元素，同pop</span></span><br><span class="line">  removeBack()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count--;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回双端队列前端的第一个元素，同Queue中的peek</span></span><br><span class="line">  peekFront()&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回双端队列后端的第一个元素，同Stack中的peek</span></span><br><span class="line">  peekBack()&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用队列和双端队列来解决问题"><a href="#使用队列和双端队列来解决问题" class="headerlink" title="使用队列和双端队列来解决问题"></a>使用队列和双端队列来解决问题</h2><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">elementsList,num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line">  <span class="keyword">const</span> elimitatedList = [];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elementsList.length; i++)&#123;</span><br><span class="line">    queue.enqueue(elementsList[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(queue.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">      queue.enqueue(queue.dequeue());</span><br><span class="line">    &#125;</span><br><span class="line">    elimitatedList.push(queue.dequeue());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    eliminated : elimitatedList,</span><br><span class="line">    winner : queue.dequeue()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="击鼓传花"><a href="#击鼓传花" class="headerlink" title="击鼓传花"></a>击鼓传花</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flowers</span>(<span class="params">names = [], num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (names.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; num; i++) &#123;</span><br><span class="line">      names.push(names.shift())</span><br><span class="line">    &#125;</span><br><span class="line">    names.shift()</span><br><span class="line">    <span class="built_in">console</span>.log(names)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> names</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line"><span class="keyword">let</span> winer = flowers(names, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(winer)</span><br></pre></td></tr></table></figure><h3 id="回文检查器"><a href="#回文检查器" class="headerlink" title="回文检查器"></a>回文检查器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindromeChecker</span>(<span class="params">aString</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(aString === <span class="literal">undefined</span> || aString === <span class="literal">null</span> || (aString !== <span class="literal">null</span> &amp;&amp; aString.length === <span class="number">0</span>))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//检测字符串参数是否合法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> deque = <span class="keyword">new</span> Deque();</span><br><span class="line">  <span class="keyword">const</span> lowerString = aString.toLocaleLowerCase().split(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> isEqual = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> firstChar, lastChar;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lowerString.length; i++)&#123;</span><br><span class="line">    deque.addBack(lowerString.charAt(i));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(deque.size() &gt; <span class="number">1</span> &amp;&amp; isEqual)&#123;</span><br><span class="line">    firstChar = deque.removeFront();</span><br><span class="line">    lastChar = deque.removeBack();</span><br><span class="line">    <span class="keyword">if</span>(firstChar !== lastChar)&#123;</span><br><span class="line">      isEqual = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> isEqual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript任务队列"><a href="#JavaScript任务队列" class="headerlink" title="JavaScript任务队列"></a><code>JavaScript</code>任务队列</h3><p>当在浏览器中打开新标签时，就会创建一个任务队列。</p><p>因为每个标签都是单线程处理所有任务，称为<strong>事件循环</strong>。</p><p>浏览器要负责多个任务，如渲染<code>HTML</code>、执行<code>JavaScript</code>代码、处理用户交互、执行和处理异步请求。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-数据结构与算法（二）栈与队列篇&quot;&gt;&lt;a href=&quot;#JavaScript-数据结构与算法（二）栈与队列篇&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 数据结构与算法（二）栈与队列篇&quot;&gt;&lt;/a&gt;JavaScript 数据结构与算法（二）栈与队列篇&lt;/h1&gt;&lt;h2 id=&quot;栈-Stack&quot;&gt;&lt;a href=&quot;#栈-Stack&quot; class=&quot;headerlink&quot; title=&quot;栈 Stack&quot;&gt;&lt;/a&gt;栈 Stack&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;栈是一种特殊的列表，栈内的元素只能通过列表的一端访问，是一种后入先出（LIFO）的数据结构&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
